<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>System.Reactive.Interfaces</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.NamespaceDoc">
            <summary><b>System.Reactive</b> 네임스페이스에는 반응성 확장 라이브러리 전체에서 사용되는 인터페이스와 클래스가 포함되어 있습니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.NamespaceDoc">
            <summary><b>System.Reactive.Conactive.Concurrency</b> 네임스페이스에는 이벤트 스트림을 생성하고 처리하는 데 반응성 확장에서 사용하는 스케줄러 인프라를 제공하는 인터페이스와 클래스가 포함되어 있습니다.  스케줄러는 쿼리 연산자가 도입한 동시성을 매개변수화하고, 시간을 가상화하고, 기록 데이터를 처리하고, 반응성 확장 구문으로 빌드된 기능에 대한 단위 테스트를 작성하는 데 사용됩니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.NamespaceDoc">
            <summary><b>System.Reactive.Disposables</b> 네임스페이스에는 반응성 확장에서 리소스 및 구독 관리를 처리하는 데 사용되는 구성 생성자 집합을 제공하는 인터페이스와 클래스가 포함되어 있습니다. 이러한 형식은 반응성 확장 구현 내에서 광범위하게 사용되며 사용자 지정 쿼리 연산자 또는 스케줄러를 작성할 때 유용합니다.</summary>
        </member>
        <member name="T:System.Reactive.Linq.NamespaceDoc">
            <summary><b>System.Reactive.Linq</b> 네임스페이스에는 언어 통합 쿼리(LINQ)를 사용하여 관찰 가능한 시퀀스에 대한 쿼리 표현을 지원하는 인터페이스와 클래스가 포함되어 있습니다.  쿼리 연산자는 Observable 및 Qbservable 클래스에 정의된 IObservable&lt;T&gt; 및 IQbservable&lt;T&gt;에 대한 확장 메서드로 각각 사용할 수 있습니다.</summary>
        </member>
        <member name="T:System.Reactive.Subjects.NamespaceDoc">
            <summary><b>System.Reactive.Subjects</b> 네임스페이스에는 IObservable&lt;T&gt;과 IObserver&lt;T&gt;를 모두 구현하는 개체인 주체를 나타내는 인터페이스와 클래스가 포함되어 있습니다. 주체는 종종 이벤트의 소스로 사용되므로 한 당사자가 이벤트를 발생시키고 다른 당사자가 이벤트 스트림을 통해 쿼리를 작성할 수 있습니다. 여러 명의 등록된 관찰자를 가질 수 있기 때문에 주체는 쿼리의 이벤트 스트림에 대해 멀티캐스트 동작을 제공하는 기능으로도 사용됩니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ISchedulerPeriodic">
            <summary>주기적 작업 실행을 지원하는 스케줄러입니다. 이러한 유형의 스케줄러는 재귀 스케줄링을 사용하는 대신 타이머를 보다 효율적으로 실행하는 데 사용할 수 있습니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.ISchedulerPeriodic.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>주기적인 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">첫 번째 반복시 작업에 전달된 초기 상태입니다.</param>
            <param name="period">주기적으로 작업을 실행하는 기간입니다.</param>
            <param name="action">실행할 작업으로, 잠재적으로 상태를 업데이트할 수 있습니다.</param>
            <returns>예약된 되풀이 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 사용).</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.IStopwatchProvider">
            <summary>IStopwatch 개체에 대한 공급자입니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.IStopwatchProvider.StartStopwatch">
            <summary>새 스톱워치 개체를 시작합니다.</summary>
            <returns>새 스톱워치 개체, 요청 시 시작됩니다.</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.IScheduledItem`1">
            <summary>예약된 작업 항목을 나타냅니다.</summary>
            <typeparam name="TAbsolute">절대 시간 표현 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduledItem`1.Invoke">
            <summary>작업 항목을 호출합니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.IScheduledItem`1.DueTime">
            <summary>항목이 호출 예정인 절대 시간을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.IScheduler">
            <summary>작업 단위를 예약하는 개체를 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.IScheduler.Now">
            <summary>현재 시간에 대한 스케줄러의 개념을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ISchedulerLongRunning">
            <summary>장기 실행 작업을 시작하기 위한 지원이 있는 스케줄러입니다. 이러한 유형의 스케줄러는 재귀 스케줄링을 사용하는 대신 루프를 보다 효율적으로 실행하는 데 사용할 수 있습니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.ISchedulerLongRunning.ScheduleLongRunning``1(``0,System.Action{``0,System.Reactive.Disposables.ICancelable})">
            <summary>장기 실행 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <remarks><para><b>구현자에 대한 참고</b></para> 반환된 일회용 개체는 작업을 시작하는 것을 방지하지 말고 지정된 작업에 전달된 취소 플래그만 설정해야 합니다.</remarks>
        </member>
        <member name="T:System.Reactive.Concurrency.IStopwatch">
            <summary>시작점을 기준으로 시간을 계산하는 스톱워치에 대한 추상화입니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.IStopwatch.Elapsed">
            <summary>스톱워치 개체를 얻은 이후 경과된 시간을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.ICancelable">
            <summary>삭제 상태 추적이 있는 일회용 리소스입니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ICancelable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.IEventPattern`2">
            <summary>이벤트를 발생시키는 강력한 형식의 개체와 이벤트에 의해 생성된 데이터로 구성된 .NET 이벤트 호출을 나타냅니다.</summary>
            <typeparam name="TSender">이벤트를 발생시킨 보낸 사람의 유형입니다. 이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식 또는 파생된 모든 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다. 이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식 또는 파생된 모든 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
        </member>
        <member name="P:System.Reactive.IEventPattern`2.Sender">
            <summary>이벤트를 발생시킨 보낸 개체를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.IEventPattern`2.EventArgs">
            <summary>이벤트에 의해 생성된 이벤트 데이터를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.IEventPatternSource`1">
            <summary>이벤트를 통해 해당 요소를 시그널링하는 데이터 스트림을 나타냅니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
        </member>
        <member name="E:System.Reactive.IEventPatternSource`1.OnNext">
            <summary>데이터 스트림의 다음 요소를 신호하는 이벤트입니다.</summary>
        </member>
        <member name="T:System.Reactive.IEventSource`1">
            <summary>이벤트를 통해 해당 요소를 시그널링하는 데이터 스트림을 나타냅니다.</summary>
            <typeparam name="T">이벤트에서 생성된 이벤트 데이터의 유형입니다. 이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식 또는 파생된 모든 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
        </member>
        <member name="E:System.Reactive.IEventSource`1.OnNext">
            <summary>데이터 스트림의 다음 요소를 신호하는 이벤트입니다.</summary>
        </member>
        <member name="T:System.Reactive.IObserver`2">
            <summary>푸시 기반 알림을 수신하고 응답을 반환하는 메커니즘을 제공합니다.</summary>
            <typeparam name="TValue">관찰자가 수신한 요소의 유형입니다. 이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식이나 덜 파생된 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
            <typeparam name="TResult">관찰자의 알림 처리기에서 반환된 결과 유형입니다. 이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식 또는 파생된 모든 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
        </member>
        <member name="M:System.Reactive.IObserver`2.OnNext(`0)">
            <summary>시퀀스에서 새 요소를 관찰자에게 통보합니다.</summary>
            <param name="value">시퀀스의 새 요소입니다.</param>
            <returns>새 요소 관찰 시 반환되는 결과입니다.</returns>
        </member>
        <member name="M:System.Reactive.IObserver`2.OnError(System.Exception)">
            <summary>관찰자에게 예외가 발생했음을 통보합니다.</summary>
            <param name="exception">발생한 예외입니다.</param>
            <returns>오류 관찰 시 반환되는 결과입니다.</returns>
        </member>
        <member name="M:System.Reactive.IObserver`2.OnCompleted">
            <summary>시퀀스의 끝을 관찰자에게 통보합니다.</summary>
            <returns>시퀀스 완료의 관찰 시 반환되는 결과입니다.</returns>
        </member>
        <member name="T:System.Reactive.Linq.IGroupedObservable`2">
            <summary>공통 키가 있는 요소의 관찰 가능한 시퀀스를 나타냅니다.</summary>
            <typeparam name="TKey">그룹의 모든 요소가 공유하는 키의 형식입니다. 이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식 또는 파생된 모든 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
            <typeparam name="TElement">그룹의 요소 형식입니다. 이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식 또는 파생된 모든 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
        </member>
        <member name="P:System.Reactive.Linq.IGroupedObservable`2.Key">
            <summary>공통 키를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Linq.IQbservable`1">
            <summary>데이터 형식이 알려진 특정 데이터 원본에 대해 쿼리를 평가하는 기능을 제공합니다.</summary>
            <typeparam name="T">데이터 원본의 데이터 형식입니다. 이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식 또는 파생된 모든 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
        </member>
        <member name="T:System.Reactive.Linq.IQbservable">
            <summary>데이터 형식이 지정되지 않은 특정 데이터 원본에 대해 쿼리를 평가하는 기능을 제공합니다.</summary>
        </member>
        <member name="P:System.Reactive.Linq.IQbservable.ElementType">
            <summary>IQbservable의 이 인스턴스와 연결된 식 트리가 실행될 때 반환되는 요소의 형식을 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Linq.IQbservable.Expression">
            <summary>IQbservable의 인스턴스와 연결된 식 트리를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Linq.IQbservable.Provider">
            <summary>이 데이터 원본과 연결된 쿼리 공급자를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Linq.IQbservableProvider">
            <summary>IQbservable 개체에 의해 설명되는 쿼리를 만들고 실행하는 메서드를 정의합니다.</summary>
        </member>
        <member name="M:System.Reactive.Linq.IQbservableProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>지정된 식 트리로 나타낸 쿼리를 평가할 수 있는 IQbservable&gt;TResult&lt; 개체를 생성합니다.</summary>
            <typeparam name="TResult">반환되는 System.Reactive.Linq.IQbservable&lt;T&gt;의 요소 형식입니다.</typeparam>
            <param name="expression">쿼리를 나타내는 식 트리입니다.</param>
            <returns>지정된 쿼리 식을 평가할 수 있는 IQbservable 개체입니다.</returns>
        </member>
        <member name="T:System.Reactive.Subjects.IConnectableObservable`1">
            <summary>기본 관찰 가능한 시퀀스에서 연결하고 분리할 수 있는 관찰 가능한 래퍼를 나타냅니다.</summary>
            <typeparam name="T">시퀀스의 요소 형식입니다. 이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식 또는 파생된 모든 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
        </member>
        <member name="M:System.Reactive.Subjects.IConnectableObservable`1.Connect">
            <summary>관찰 가능한 래퍼를 해당 소스에 연결합니다. 구독된 모든 관찰자는 연결이 수립되는 한 기본 관찰 가능한 시퀀스에서 값을 수신합니다.</summary>
            <returns>일회용은 관찰 가능한 래퍼를 소스에서 분리하는 데 사용되어 구독된 관찰자가 기본 관찰 가능한 시퀀스에서 값 수신을 중지합니다.</returns>
        </member>
        <member name="T:System.Reactive.Subjects.ISubject`1">
            <summary>관찰자뿐만 아니라 관찰 가능한 시퀀스인 개체를 나타냅니다.</summary>
            <typeparam name="T">주체에서 처리하는 요소의 유형입니다.</typeparam>
        </member>
        <member name="T:System.Reactive.Subjects.ISubject`2">
            <summary>관찰자뿐만 아니라 관찰 가능한 시퀀스인 개체를 나타냅니다.</summary>
            <typeparam name="TSource">주체에서 수신한 요소의 유형입니다. 이 형식 매개 변수는 반공변(contravariant)입니다. 즉, 지정한 형식이나 덜 파생된 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
            <typeparam name="TResult">주체에서 생성된 요소의 유형입니다. 이 형식 매개 변수는 공변(covariant)입니다. 즉, 지정한 형식 또는 파생된 모든 형식을 사용할 수 있습니다. 공분산 및 모순에 대한 자세한 내용은 Generics의 공분산 및 모순을 참조하세요.</typeparam>
        </member>
    </members>
</doc>