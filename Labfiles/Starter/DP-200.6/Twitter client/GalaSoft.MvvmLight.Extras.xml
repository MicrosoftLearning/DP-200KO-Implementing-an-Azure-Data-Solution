<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight.Extras</name>
    </assembly>
    <members>
        <member name="T:GalaSoft.MvvmLight.Ioc.ISimpleIoc">
            <summary>인스턴스를 등록하고 해결하는 데 필요한 기본 기능이 있는 매우 간단한 IOC 컨테이너입니다. 필요한 경우 이 클래스는 IServiceLocator 인터페이스를 구현하는 다른 정교한 IOC 컨테이너로 대체할 수 있습니다. 이 클래스에 대한 영감은 https://gist.github.com/716137에서 얻을 수 있지만 추가 기능으로 확장되었습니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.ContainsCreated``1">
            <summary>적어도 하나 이상 지정된 클래스의 인스턴스가 컨테이너에 이미 만들어졌는지 여부를 확인합니다.</summary>
            <typeparam name="TClass">쿼리되는 클래스입니다.</typeparam>
            <returns>적어도 하나 이상의 클래스 인스턴스가 이미 만들어진 경우 true, 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.ContainsCreated``1(System.String)">
            <summary>지정된 키가 있는 인스턴스가 컨테이너의 지정된 클래스에 대해 이미 만들어졌는지 확인합니다.</summary>
            <typeparam name="TClass">쿼리되는 클래스입니다.</typeparam>
            <param name="key">쿼리되는 키입니다.</param>
            <returns>지정된 키가 있는 인스턴스가 지정된 클래스에 이미 등록된 경우 사실입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.IsRegistered``1">
            <summary>지정된 형식 T가 이미 등록되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <typeparam name="T">메서드가 검사하는 형식입니다.</typeparam>
            <returns>형식이 등록된 경우true, 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.IsRegistered``1(System.String)">
            <summary>지정된 형식 T와 지정된 키가 이미 등록되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <typeparam name="T">메서드가 검사하는 형식입니다.</typeparam>
            <param name="key">메서드가 검사하는 키입니다.</param>
            <returns>형식 및 키가 등록된 경우 true, 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``2">
            <summary>지정된 인터페이스에 대해 지정된 형식을 등록합니다.</summary>
            <typeparam name="TInterface">인스턴스가 해결될 인터페이스입니다.</typeparam>
            <typeparam name="TClass">인스턴스를 만드는 데 사용해야 하는 형식입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``2(System.Boolean)">
            <summary>인스턴스를 즉시 생성할 수 있는 주어진 인터페이스에 대해 지정된 형식을 등록합니다.</summary>
            <typeparam name="TInterface">인스턴스가 해결될 인터페이스입니다.</typeparam>
            <typeparam name="TClass">인스턴스를 만드는 데 사용해야 하는 형식입니다.</typeparam>
            <param name="createInstanceImmediately">true이면 제공된 클래스의 기본 인스턴스를 강제로 생성합니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1">
            <summary>지정된 형식을 등록합니다.</summary>
            <typeparam name="TClass">인스턴스를 만드는 데 사용해야 하는 형식입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Boolean)">
            <summary>인스턴스를 즉시 만들 수 있는 지정된 형식을 등록합니다.</summary>
            <typeparam name="TClass">인스턴스를 만드는 데 사용해야 하는 형식입니다.</typeparam>
            <param name="createInstanceImmediately">true이면 제공된 클래스의 기본 인스턴스를 강제로 생성합니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0})">
            <summary>지정된 형식에 대해 지정된 인스턴스를 등록합니다.</summary>
            <typeparam name="TClass">등록 중인 형식입니다.</typeparam>
            <param name="factory">지정된 형식이 확인될 때 반환해야 하는 인스턴스를 만들 수 있는 팩터리 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0},System.Boolean)">
            <summary>인스턴스를 즉시 생성할 수 있는 지정된 형식을 등록합니다.</summary>
            <typeparam name="TClass">등록 중인 형식입니다.</typeparam>
            <param name="factory">지정된 형식이 확인될 때 반환해야 하는 인스턴스를 만들 수 있는 팩터리 메서드입니다.</param>
            <param name="createInstanceImmediately">true이면 제공된 클래스의 기본 인스턴스를 강제로 생성합니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0},System.String)">
            <summary>지정된 형식 및 지정된 키에 대해 지정된 인스턴스를 등록합니다.</summary>
            <typeparam name="TClass">등록 중인 형식입니다.</typeparam>
            <param name="factory">지정된 형식이 확인될 때 반환해야 하는 인스턴스를 만들 수 있는 팩터리 메서드입니다.</param>
            <param name="key">지정된 인스턴스가 등록된 키입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Register``1(System.Func{``0},System.String,System.Boolean)">
            <summary>인스턴스를 즉시 만들 수 있는 지정된 형식에 대해 지정된 인스턴스와 지정된 키를 등록합니다.</summary>
            <typeparam name="TClass">등록 중인 형식입니다.</typeparam>
            <param name="factory">지정된 형식이 확인될 때 반환해야 하는 인스턴스를 만들 수 있는 팩터리 메서드입니다.</param>
            <param name="key">지정된 인스턴스가 등록된 키입니다.</param>
            <param name="createInstanceImmediately">true이면 제공된 클래스의 기본 인스턴스를 강제로 생성합니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Reset">
            <summary>인스턴스를 원래 상태로 재설정합니다. 이렇게 하면 모든 등록이 삭제됩니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Unregister``1">
            <summary>캐시에서 클래스를 등록 취소하고 이전에 만든 모든 인스턴스를 제거합니다.</summary>
            <typeparam name="TClass">제거해야 하는 클래스입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Unregister``1(``0)">
            <summary>캐시에서 지정된 인스턴스를 제거합니다. 클래스 자체는 등록된 상태로 유지되며 다른 인스턴스를 만드는 데 사용할 수 있습니다.</summary>
            <typeparam name="TClass">제거할 인스턴스의 형식입니다.</typeparam>
            <param name="instance">제거해야 하는 인스턴스입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.ISimpleIoc.Unregister``1(System.String)">
            <summary>캐시에서 지정된 키에 해당하는 인스턴스를 제거합니다. 클래스 자체는 등록된 상태로 유지되며 다른 인스턴스를 만드는 데 사용할 수 있습니다.</summary>
            <typeparam name="TClass">제거할 인스턴스의 형식입니다.</typeparam>
            <param name="key">제거해야 하는 인스턴스에 해당하는 키입니다.</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Ioc.PreferredConstructorAttribute">
            <summary>SimpleIoc 컨테이너와 함께 사용할 경우 GetInstance가 호출될 때 인스턴스화하는 데 사용할 생성자를 지정합니다. 클래스에 생성자가 하나만 있는 경우 이 특성은 필요하지 않습니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Ioc.SimpleIoc">
            <summary>인스턴스를 등록하고 해결하는 데 필요한 기본 기능이 있는 매우 간단한 IOC 컨테이너입니다. 필요한 경우 이 클래스는 IServiceLocator 인터페이스를 구현하는 다른 정교한 IOC 컨테이너로 대체할 수 있습니다. 이 클래스에 대한 영감은 https://gist.github.com/716137에서 얻을 수 있지만 추가 기능으로 확장되었습니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Ioc.SimpleIoc.Default">
            <summary>이 클래스의 기본 인스턴스입니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.ContainsCreated``1">
            <summary>적어도 하나 이상 지정된 클래스의 인스턴스가 컨테이너에 이미 만들어졌는지 여부를 확인합니다.</summary>
            <typeparam name="TClass">쿼리되는 클래스입니다.</typeparam>
            <returns>적어도 하나 이상의 클래스 인스턴스가 이미 만들어진 경우 true, 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.ContainsCreated``1(System.String)">
            <summary>지정된 키가 있는 인스턴스가 컨테이너의 지정된 클래스에 대해 이미 만들어졌는지 확인합니다.</summary>
            <typeparam name="TClass">쿼리되는 클래스입니다.</typeparam>
            <param name="key">쿼리되는 키입니다.</param>
            <returns>지정된 키가 있는 인스턴스가 지정된 클래스에 이미 등록된 경우 사실입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.IsRegistered``1">
            <summary>지정된 형식 T가 이미 등록되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <typeparam name="T">메서드가 검사하는 형식입니다.</typeparam>
            <returns>형식이 등록된 경우true, 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.IsRegistered``1(System.String)">
            <summary>지정된 형식 T와 지정된 키가 이미 등록되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <typeparam name="T">메서드가 검사하는 형식입니다.</typeparam>
            <param name="key">메서드가 검사하는 키입니다.</param>
            <returns>형식 및 키가 등록된 경우 true, 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``2">
            <summary>지정된 인터페이스에 대해 지정된 형식을 등록합니다.</summary>
            <typeparam name="TInterface">인스턴스가 해결될 인터페이스입니다.</typeparam>
            <typeparam name="TClass">인스턴스를 만드는 데 사용해야 하는 형식입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``2(System.Boolean)">
            <summary>인스턴스를 즉시 생성할 수 있는 주어진 인터페이스에 대해 지정된 형식을 등록합니다.</summary>
            <typeparam name="TInterface">인스턴스가 해결될 인터페이스입니다.</typeparam>
            <typeparam name="TClass">인스턴스를 만드는 데 사용해야 하는 형식입니다.</typeparam>
            <param name="createInstanceImmediately">true이면 제공된 클래스의 기본 인스턴스를 강제로 생성합니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1">
            <summary>지정된 형식을 등록합니다.</summary>
            <typeparam name="TClass">인스턴스를 만드는 데 사용해야 하는 형식입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Boolean)">
            <summary>인스턴스를 즉시 만들 수 있는 지정된 형식을 등록합니다.</summary>
            <typeparam name="TClass">인스턴스를 만드는 데 사용해야 하는 형식입니다.</typeparam>
            <param name="createInstanceImmediately">true이면 제공된 클래스의 기본 인스턴스를 강제로 생성합니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0})">
            <summary>지정된 형식에 대해 지정된 인스턴스를 등록합니다.</summary>
            <typeparam name="TClass">등록 중인 형식입니다.</typeparam>
            <param name="factory">지정된 형식이 확인될 때 반환해야 하는 인스턴스를 만들 수 있는 팩터리 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.Boolean)">
            <summary>인스턴스를 즉시 생성할 수 있는 지정된 형식을 등록합니다.</summary>
            <typeparam name="TClass">등록 중인 형식입니다.</typeparam>
            <param name="factory">지정된 형식이 확인될 때 반환해야 하는 인스턴스를 만들 수 있는 팩터리 메서드입니다.</param>
            <param name="createInstanceImmediately">true이면 제공된 클래스의 기본 인스턴스를 강제로 생성합니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.String)">
            <summary>지정된 형식 및 지정된 키에 대해 지정된 인스턴스를 등록합니다.</summary>
            <typeparam name="TClass">등록 중인 형식입니다.</typeparam>
            <param name="factory">지정된 형식이 확인될 때 반환해야 하는 인스턴스를 만들 수 있는 팩터리 메서드입니다.</param>
            <param name="key">지정된 인스턴스가 등록된 키입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Register``1(System.Func{``0},System.String,System.Boolean)">
            <summary>인스턴스를 즉시 만들 수 있는 지정된 형식에 대해 지정된 인스턴스와 지정된 키를 등록합니다.</summary>
            <typeparam name="TClass">등록 중인 형식입니다.</typeparam>
            <param name="factory">지정된 형식이 확인될 때 반환해야 하는 인스턴스를 만들 수 있는 팩터리 메서드입니다.</param>
            <param name="key">지정된 인스턴스가 등록된 키입니다.</param>
            <param name="createInstanceImmediately">true이면 제공된 클래스의 기본 인스턴스를 강제로 생성합니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Reset">
            <summary>인스턴스를 원래 상태로 재설정합니다. 이렇게 하면 모든 등록이 삭제됩니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1">
            <summary>캐시에서 클래스를 등록 취소하고 이전에 만든 모든 인스턴스를 제거합니다.</summary>
            <typeparam name="TClass">제거해야 하는 클래스입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1(``0)">
            <summary>캐시에서 지정된 인스턴스를 제거합니다. 클래스 자체는 등록된 상태로 유지되며 다른 인스턴스를 만드는 데 사용할 수 있습니다.</summary>
            <typeparam name="TClass">제거할 인스턴스의 형식입니다.</typeparam>
            <param name="instance">제거해야 하는 인스턴스입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.Unregister``1(System.String)">
            <summary>캐시에서 지정된 키에 해당하는 인스턴스를 제거합니다. 클래스 자체는 등록된 상태로 유지되며 다른 인스턴스를 만드는 데 사용할 수 있습니다.</summary>
            <typeparam name="TClass">제거할 인스턴스의 형식입니다.</typeparam>
            <param name="key">제거해야 하는 인스턴스에 해당하는 키입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllCreatedInstances(System.Type)">
            <summary>캐시에서 사용할 수 있는 지정된 형식의 모든 생성된 인스턴스를 얻을 수 있는 방법을 제공합니다. 클래스 또는 팩터리 등록은 해당 인스턴스를 자동으로 만들지 않습니다! 인스턴스를 만들려면 인스턴스 즉각 생성을 true로 설정한 상태에서 크래스나 팩터리를 등록하거나 GetAllCreatedInstances를 호출하기 전에 GetInstance 메서드를 호출합니다. 또는 등록된 모든 클래스에 대해 기본 인스턴스를 자동으로 만드는 GetAllInstances 메서드를 사용합니다.</summary>
            <param name="serviceType">모든 인스턴스를 반환해야 하는 클래스입니다.</param>
            <returns>지정된 형식에 대해 이미 생성된 모든 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllCreatedInstances``1">
            <summary>캐시에서 사용할 수 있는 지정된 형식의 모든 생성된 인스턴스를 얻을 수 있는 방법을 제공합니다. 클래스 또는 팩터리 등록은 해당 인스턴스를 자동으로 만들지 않습니다! 인스턴스를 만들려면 인스턴스 즉각 생성을 true로 설정한 상태에서 크래스나 팩터리를 등록하거나 GetAllCreatedInstances를 호출하기 전에 GetInstance 메서드를 호출합니다. 또는 등록된 모든 클래스에 대해 기본 인스턴스를 자동으로 만드는 GetAllInstances 메서드를 사용합니다.</summary>
            <typeparam name="TService">모든 인스턴스를 반환해야 하는 클래스입니다.</typeparam>
            <returns>지정된 형식에 대해 이미 생성된 모든 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetService(System.Type)">
            <summary>지정된 형식의 서비스 개체를 가져옵니다.</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">이 메서드를 호출하기 전에 형식 serviceType이 등록되지 않은 경우.</exception>
            <returns><paramref name="serviceType" /> 형식의 서비스 개체입니다.</returns>
            <param name="serviceType">가져올 서비스 개체의 형식을 지정하는 개체입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllInstances(System.Type)">
            <summary>캐시에서 사용할 수 있는 지정된 형식의 모든 생성된 인스턴스를 얻을 수 있는 방법을 제공합니다. 이 메서드를 호출하면 등록된 모든 클래스에 대한 기본 인스턴스가 자동으로 만들어집니다.</summary>
            <param name="serviceType">모든 인스턴스를 반환해야 하는 클래스입니다.</param>
            <returns>지정된 형식의 모든 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetAllInstances``1">
            <summary>캐시에서 사용할 수 있는 지정된 형식의 모든 생성된 인스턴스를 얻을 수 있는 방법을 제공합니다. 이 메서드를 호출하면 등록된 모든 클래스에 대한 기본 인스턴스가 자동으로 만들어집니다.</summary>
            <typeparam name="TService">모든 인스턴스를 반환해야 하는 클래스입니다.</typeparam>
            <returns>지정된 형식의 모든 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance(System.Type)">
            <summary>지정된 형식의 인스턴스를 얻는 방법을 제공합니다. 이전에 인스턴스가 인스턴스화되지 않은 경우 새 인스턴스가 만들어집니다. 인스턴스가 이미 생성된 경우 동일한 인스턴스가 반환됩니다.</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">이 메서드를 호출하기 전에 형식 serviceType이 등록되지 않은 경우.</exception>
            <param name="serviceType">인스턴스를 반환해야 하는 클래스입니다.</param>
            <returns>지정된 형식의 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching(System.Type)">
            <summary>지정된 형식의 인스턴스를 얻는 방법을 제공합니다. 이 메서드는 항상 새 인스턴스를 반환하고 IOC 컨테이너에 캐시하지 않습니다.</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">이 메서드를 호출하기 전에 형식 serviceType이 등록되지 않은 경우.</exception>
            <param name="serviceType">인스턴스를 반환해야 하는 클래스입니다.</param>
            <returns>지정된 형식의 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance(System.Type,System.String)">
            <summary>지정된 키에 해당하는 지정된 형식의 인스턴스를 얻을 수 있는 방법을 제공합니다. 이전에 이 키로 인스턴스가인스턴스화되지 않은 경우 새 인스턴스가 만들어집니다. 동일한 키로 인스턴스를 이미 만든 경우 동일한 인스턴스가 반환됩니다.</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">이 메서드를 호출하기 전에 형식 serviceType이 등록되지 않은 경우.</exception>
            <param name="serviceType">인스턴스를 반환해야 하는 클래스입니다.</param>
            <param name="key">이 인스턴스를 고유하게 식별하는 키입니다.</param>
            <returns>지정된 형식 및 키에 해당하는 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching(System.Type,System.String)">
            <summary>지정된 형식의 인스턴스를 얻는 방법을 제공합니다. 이 메서드는 항상 새 인스턴스를 반환하고 IOC 컨테이너에 캐시하지 않습니다.</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">이 메서드를 호출하기 전에 형식 serviceType이 등록되지 않은 경우.</exception>
            <param name="serviceType">인스턴스를 반환해야 하는 클래스입니다.</param>
            <param name="key">이 인스턴스를 고유하게 식별하는 키입니다.</param>
            <returns>지정된 형식 및 키에 해당하는 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance``1">
            <summary>지정된 형식의 인스턴스를 얻는 방법을 제공합니다. 이전에 인스턴스가 인스턴스화되지 않은 경우 새 인스턴스가 만들어집니다. 인스턴스가 이미 생성된 경우 동일한 인스턴스가 반환됩니다.</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">이 메서드를 호출하기 전에 형식 TService가 등록되지 않은 경우</exception>
            <typeparam name="TService">인스턴스를 반환해야 하는 클래스입니다.</typeparam>
            <returns>지정된 형식의 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching``1">
            <summary>지정된 형식의 인스턴스를 얻는 방법을 제공합니다. 이 메서드는 항상 새 인스턴스를 반환하고 IOC 컨테이너에 캐시하지 않습니다.</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">이 메서드를 호출하기 전에 형식 TService가 등록되지 않은 경우</exception>
            <typeparam name="TService">인스턴스를 반환해야 하는 클래스입니다.</typeparam>
            <returns>지정된 형식의 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstance``1(System.String)">
            <summary>지정된 키에 해당하는 지정된 형식의 인스턴스를 얻을 수 있는 방법을 제공합니다. 이전에 이 키로 인스턴스가인스턴스화되지 않은 경우 새 인스턴스가 만들어집니다. 동일한 키로 인스턴스를 이미 만든 경우 동일한 인스턴스가 반환됩니다.</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">이 메서드를 호출하기 전에 형식 TService가 등록되지 않은 경우</exception>
            <typeparam name="TService">인스턴스를 반환해야 하는 클래스입니다.</typeparam>
            <param name="key">이 인스턴스를 고유하게 식별하는 키입니다.</param>
            <returns>지정된 형식 및 키에 해당하는 인스턴스입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Ioc.SimpleIoc.GetInstanceWithoutCaching``1(System.String)">
            <summary>지정된 형식의 인스턴스를 얻는 방법을 제공합니다. 이 메서드는 항상 새 인스턴스를 반환하고 IOC 컨테이너에 캐시하지 않습니다.</summary>
            <exception cref="T:Microsoft.Practices.ServiceLocation.ActivationException">이 메서드를 호출하기 전에 형식 TService가 등록되지 않은 경우</exception>
            <typeparam name="TService">인스턴스를 반환해야 하는 클래스입니다.</typeparam>
            <param name="key">이 인스턴스를 고유하게 식별하는 키입니다.</param>
            <returns>지정된 형식 및 키에 해당하는 인스턴스입니다.</returns>
        </member>
    </members>
</doc>