<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>System.Reactive.Core</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.PlatformServices.NamespaceDoc">
            <summary> <b>System.Reactive.PlatformServices</b> 네임스페이스에는 반응성 확장의 런타임 인프라에서 사용하는 인터페이스와 클래스가 포함되어 있습니다.  인터페이스와 클래스는 사용자 코드에서 직접 사용할 수 없으며 향후 제품 릴리스에서 변경될 수 있습니다.</summary>
        </member>
        <member name="T:System.ObservableExtensions">
            <summary>관찰 가능한 대리자를 구독하기 위한 정적 메서드 집합을 제공합니다.</summary>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0})">
            <summary>처리기를 지정하지 않고 관찰 가능한 시퀀스를 구독합니다. 이 방법은 부작용에 대해서만 관찰 가능한 시퀀스를 평가하는 데 사용할 수 있습니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스에서 구독을 취소하는 데 사용되는 IDisposable 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0})">
            <summary>요소 처리기를 통해 관찰 가능한 시퀀스를 구독합니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <returns>관찰 가능한 시퀀스에서 구독을 취소하는 데 사용되는 IDisposable 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>요소 처리기 및 예외 처리기를 통해 관찰 가능한 시퀀스를 구독합니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="onError">관찰 가능한 시퀀스의 예외적 종료 시 호출하는 작업입니다.</param>
            <returns>관찰 가능한 시퀀스에서 구독을 취소하는 데 사용되는 IDisposable 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="onNext"/> 또는 <paramref name="onError"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action)">
            <summary>요소 처리기 및 완료 처리기를 통해 관찰 가능한 시퀀스를 구독합니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="onCompleted">관찰 가능한 시퀀스가 정상적으로 종료될 때 호출하는 작업입니다.</param>
            <returns>관찰 가능한 시퀀스에서 구독을 취소하는 데 사용되는 IDisposable 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="onNext"/> 또는 <paramref name="onCompleted"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>요소 처리기, 예외 처리기 및 완료 처리기를 통해 관찰 가능한 시퀀스를 구독합니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="onError">관찰 가능한 시퀀스의 예외적 종료 시 호출하는 작업입니다.</param>
            <param name="onCompleted">관찰 가능한 시퀀스가 정상적으로 종료될 때 호출하는 작업입니다.</param>
            <returns>관찰 가능한 시퀀스에서 구독을 취소하는 데 사용되는 IDisposable 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/> 또는 <paramref name="onError"/> 또는 <paramref name="onCompleted"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.IObserver{``0},System.Threading.CancellationToken)">
            <summary>관찰자를 통해 관찰 가능한 시퀀스를 구독하고, CancelToken을 사용하여 구독 취소를 지원합니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="observer">시퀀스를 구독하는 관찰자입니다.</param>
            <param name="token">소스 시퀀스에서 구독을 취소하라는 신호를 받을 수 있는 CancelToken입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="observer"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Threading.CancellationToken)">
            <summary>처리기를 지정하지 않고 관찰 가능한 시퀀스를 구독하고, CancelToken을 사용하여 구독 취소를 지원합니다. 이 방법은 부작용에 대해서만 관찰 가능한 시퀀스를 평가하는 데 사용할 수 있습니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="token">소스 시퀀스에서 구독을 취소하라는 신호를 받을 수 있는 CancelToken입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>요소 처리기를 통해 관찰 가능한 시퀀스를 구독하고, CancelToken을 사용하여 구독 취소를 지원합니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="token">소스 시퀀스에서 구독을 취소하라는 신호를 받을 수 있는 CancelToken입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Threading.CancellationToken)">
            <summary>요소 처리기 및 예외 처리기를 통해 관찰 가능한 시퀀스를 구독하고, CancelToken을 사용하여 구독 취소를 지원합니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="onError">관찰 가능한 시퀀스의 예외적 종료 시 호출하는 작업입니다.</param>
            <param name="token">소스 시퀀스에서 구독을 취소하라는 신호를 받을 수 있는 CancelToken입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="onNext"/> 또는 <paramref name="onError"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action,System.Threading.CancellationToken)">
            <summary>요소 처리기 및 완료 처리기를 통해 관찰 가능한 시퀀스를 구독하고, CancelToken을 사용하여 구독 취소를 지원합니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="onCompleted">관찰 가능한 시퀀스가 정상적으로 종료될 때 호출하는 작업입니다.</param>
            <param name="token">소스 시퀀스에서 구독을 취소하라는 신호를 받을 수 있는 CancelToken입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="onNext"/> 또는 <paramref name="onCompleted"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,System.Threading.CancellationToken)">
            <summary>요소 처리기, 예외 처리기 및 완료 처리기를 통해 관찰 가능한 시퀀스를 구독하고, CancelToken을 사용하여 구독 취소를 지원합니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="onError">관찰 가능한 시퀀스의 예외적 종료 시 호출하는 작업입니다.</param>
            <param name="onCompleted">관찰 가능한 시퀀스가 정상적으로 종료될 때 호출하는 작업입니다.</param>
            <param name="token">소스 시퀀스에서 구독을 취소하라는 신호를 받을 수 있는 CancelToken입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/> 또는 <paramref name="onError"/> 또는 <paramref name="onCompleted"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.ObservableExtensions.SubscribeSafe``1(System.IObservable{``0},System.IObserver{``0})">
            <summary>지정된 소스를 구독하고 구독 메서드를 관찰자의 OnError 채널로 호출하는 동안 동기 예외를 다시 라우팅합니다. 이 메서드는 일반적으로 쿼리 연산자를 작성할 때 사용됩니다.</summary>
            <typeparam name="T">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 관찰 가능한 시퀀스입니다.</param>
            <param name="observer">관찰 가능한 시퀀스로 전달되고 예외 전파에 사용될 관찰자입니다.</param>
            <returns>관찰 가능한 시퀀스에서 구독을 취소하는 데 사용되는 IDisposable 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="observer"/>은(는) null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Observer">
            <summary>관찰자를 만들기 위한 정적 메서드 집합을 제공합니다.</summary>
        </member>
        <member name="M:System.Reactive.Observer.ToObserver``1(System.Action{System.Reactive.Notification{``0}})">
            <summary>알림 콜백에서 관찰자를 만듭니다.</summary>
            <typeparam name="T">관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="handler">알림을 처리하는 작업입니다.</param>
            <returns>수신하는 각 메시지에 해당하는 알림을 사용하여 지정된 처리기를 호출하는 관찰자 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.ToNotifier``1(System.IObserver{``0})">
            <summary>관찰자에서 알림 콜백을 만듭니다.</summary>
            <typeparam name="T">관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="observer">관찰자 개체입니다.</param>
            <returns>입력 알림을 기본 관찰자에게 전달하는 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0})">
            <summary>지정된 OnNext 작업에서 관찰자를 만듭니다.</summary>
            <typeparam name="T">관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="onNext">관찰자의 OnNext 작업 구현입니다.</param>
            <returns>지정된 작업을 사용하여 구현된 관찰자 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception})">
            <summary>지정된 OnNext 및 OnError 작업에서 관찰자를 만듭니다.</summary>
            <typeparam name="T">관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="onNext">관찰자의 OnNext 작업 구현입니다.</param>
            <param name="onError">관찰자의 OnError 작업 구현입니다.</param>
            <returns>지정된 작업을 사용하여 구현된 관찰자 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> 또는 <paramref name="onError"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action)">
            <summary>지정된 OnNext 및 OnCompleted 작업에서 관찰자를 만듭니다.</summary>
            <typeparam name="T">관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="onNext">관찰자의 OnNext 작업 구현입니다.</param>
            <param name="onCompleted">관찰자의 OnCompleted 작업 구현입니다.</param>
            <returns>지정된 작업을 사용하여 구현된 관찰자 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> 또는 <paramref name="onCompleted"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>지정된 OnNext, OnError 및 OnCompleted 작업에서 관찰자를 만듭니다.</summary>
            <typeparam name="T">관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="onNext">관찰자의 OnNext 작업 구현입니다.</param>
            <param name="onError">관찰자의 OnError 작업 구현입니다.</param>
            <param name="onCompleted">관찰자의 OnCompleted 작업 구현입니다.</param>
            <returns>지정된 작업을 사용하여 구현된 관찰자 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> <paramref name="onError"/> 또는 <paramref name="onCompleted"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.AsObserver``1(System.IObserver{``0})">
            <summary>관찰자의 신원을 숨깁니다.</summary>
            <typeparam name="T">소스 관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="observer">신원을 숨기는 관찰자입니다.</param>
            <returns>지정된 관찰자의 신원을 숨기는 관찰자입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.Checked``1(System.IObserver{``0})">
            <summary>관찰자에 대한 액세스에서 문법 위반을 확인합니다. 여기에는 여러 OnError 또는 OnCompleted 호출에 대한 검사뿐만 아니라 모든 관찰자 메서드에서 재진입이 포함됩니다. 위반이 감지되면 잘못된 작업 예외가 잘못된 관찰자 메서드 호출에서 throw됩니다.</summary>
            <typeparam name="T">소스 관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="observer">콜백 호출의 문법 위반 여부를 확인해야 하는 관찰자입니다.</param>
            <returns>콜백 호출을 관찰자 문법에 대해 검사하고 검사가 통과되면 콜백호출을 지정된 관찰자에게 전달하는 관찰자입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0})">
            <summary>여러 스레드에서 콜백 메서드를 동시에 호출할 수 없도록 관찰자에 대한 액세스를 동기화합니다. 이 오버로드는 관찰자에 대한 액세스를 조정할 때 유용합니다. 동일한 스레드에서 재진입 관찰자 콜백이 계속 가능합니다.</summary>
            <typeparam name="T">소스 관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="observer">콜백을 동기화해야 하는 관찰자입니다.</param>
            <returns>지정된 관찰자에게 콜백을 동기화된 방식으로 전달하는 관찰자입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
            <remarks><see cref="T:System.Threading.Monitor">모니터</see>는 동기화를 수행하는 데 사용되므로 동일한 스레드에서 재진입에 대한 보호가 없습니다. 따라서 관찰자 콜백이 중첩될 수 있으며 관찰자 문법에 따라 잘못된 동작입니다. 이 동작으로부터 보호하려면 두 번째 매개 변수에 대해 true를 전달하는 <see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Boolean)"/> 오버로드를 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Boolean)">
            <summary>호출 메서드를 동시에 호출할 수 없도록 관찰자에 대한 액세스를 동기화합니다. 이 오버로드는 관찰자에 대한 액세스를 조정할 때 유용합니다. <paramref name="preventReentrancy"/> 매개 변수는 동기화에 사용되는 잠금 유형을 구성합니다.</summary>
            <typeparam name="T">소스 관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="observer">콜백을 동기화해야 하는 관찰자입니다.</param>
            <param name="preventReentrancy">true로 설정되면 재진입 관찰자 콜백이 큐에 대기되고 순차적으로 관찰자에게 전달됩니다.</param>
            <returns>지정된 관찰자에게 콜백을 동기화된 방식으로 전달하는 관찰자입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
            <remarks><paramref name="preventReentrancy"/> 매개 변수가 false로 설정되면 동작은 동기화를 위해 <see cref="T:System.Threading.Monitor">모니터</see>를 사용하는 <see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0})"/> 오버로드와 동일합니다. <paramref name="preventReentrancy"/> 매개 변수가 true로 설정되면 재진입 호출이 이루어질 경우 <see cref="T:System.Reactive.Concurrency.AsyncLock"/>은(는) 지정된 관찰자에게 콜백을 큐업하는 데 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Object)">
            <summary><see cref="T:System.Threading.Monitor">모니터</see> 기반 잠금에서 사용할 지정된 게이트 개체를 사용하여 여러 스레드에서 콜백 메서드를 동시에 호출할 수 없도록 관찰자에 대한 액세스를 동기화합니다. 이 오버로드는 공통 게이트 개체에서 동기화하여 공유 상태에 액세스하는 여러 관찰자를 조정하는 경우에 유용합니다. 동일한 스레드에서 재진입 관찰자 콜백이 계속 가능합니다.</summary>
            <typeparam name="T">소스 관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="observer">콜백을 동기화해야 하는 관찰자입니다.</param>
            <param name="gate">각 관찰자 호출을 동기화하는 게이트 개체입니다.</param>
            <returns>지정된 관찰자에게 콜백을 동기화된 방식으로 전달하는 관찰자입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> 또는 <paramref name="gate"/>은(는) null입니다.</exception>
            <remarks><see cref="T:System.Threading.Monitor">모니터</see>는 동기화를 수행하는 데 사용되므로 동일한 스레드에서 재진입에 대한 보호가 없습니다. 따라서 관찰자 콜백이 중첩될 수 있으며 관찰자 문법에 따라 잘못된 동작입니다. 이 동작으로부터도 보호하려면 <see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Reactive.Concurrency.AsyncLock)"/> 오버로드를 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Reactive.Concurrency.AsyncLock)">
            <summary>지정된 비동기 잠금을 사용하여 동시 및 재진입 액세스로부터 보호하기 위해 콜백 메서드를 동시에 호출할 수 없도록 관찰자에 대한 액세스를 동기화합니다. 이 오버로드는 공통 비동기 잠금에서 동기화하여 공유 상태에 액세스하는 여러 관찰자를 조정하는 경우에 유용합니다.</summary>
            <typeparam name="T">소스 관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="observer">콜백을 동기화해야 하는 관찰자입니다.</param>
            <param name="asyncLock">각 관찰자 호출을 동기화하는 게이트 개체입니다.</param>
            <returns>지정된 관찰자에게 콜백을 동기화된 방식으로 전달하는 관찰자입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> 또는 <paramref name="asyncLock"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.NotifyOn``1(System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러에서 관찰자 메서드 호출을 예약합니다.</summary>
            <typeparam name="T">소스 관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="observer">메시지를 예약할 관찰자입니다.</param>
            <param name="scheduler">관찰자 메시지를 예약하는 스케줄러입니다.</param>
            <returns>지정된 스케줄러에서 메시지가 예약되는 관찰자입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.NotifyOn``1(System.IObserver{``0},System.Threading.SynchronizationContext)">
            <summary>지정된 동기화 컨텍스트에서 관찰자 메서드 호출을 예약합니다.</summary>
            <typeparam name="T">소스 관찰자가 수신한 요소의 유형입니다.</typeparam>
            <param name="observer">메시지를 예약할 관찰자입니다.</param>
            <param name="context">관찰자 메시지를 예약하기 위한 동기화 컨텍스트입니다.</param>
            <returns>지정된 동기화 컨텍스트에서 메시지가 예약되는 관찰자입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> 또는 <paramref name="context"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.ToProgress``1(System.IObserver{``0})">
            <summary>관찰자를 진행률 개체로 변환합니다.</summary>
            <typeparam name="T">소스 관찰자가 수신한 진행률 개체의 유형입니다.</typeparam>
            <param name="observer">변환할 관찰자입니다.</param>
            <returns>보고서 메시지가 관찰자의 OnNext 메시지에 해당하는 진행률 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.ToProgress``1(System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 진행률 보고 메서드를 호출하여 관찰자를 진행률 개체로 변환합니다.</summary>
            <typeparam name="T">소스 관찰자가 수신한 진행률 개체의 유형입니다.</typeparam>
            <param name="observer">변환할 관찰자입니다.</param>
            <param name="scheduler">진행 상황을 보고하는 스케줄러입니다.</param>
            <returns>보고서 메시지가 관찰자의 OnNext 메시지에 해당하는 진행률 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Observer.ToObserver``1(System.IProgress{``0})">
            <summary>진행률 개체를 관찰자로 변환합니다.</summary>
            <typeparam name="T">진행률 보가 수신한 진행률 개체의 유형입니다.</typeparam>
            <param name="progress">변환할 진행률 개체입니다.</param>
            <returns>OnNext 메시지가 진행 개체의 보고서 메시지에 해당하는 관찰자입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="progress"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.AnonymousObservable`1">
            <summary>클래스는 Subscribe 메서드의 대리자 기반 구현에서 IObservable&lt;T&gt; 인스턴스를 만듭니다.</summary>
            <typeparam name="T">시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="T:System.Reactive.ObservableBase`1">
            <summary>IObservable&lt;T&gt; 인터페이스의 구현을 위한 추상 기본 클래스입니다.</summary>
            <remarks>관찰 가능한 시퀀스를 만들기 위해 명명된 형식이 필요하지 않은 경우(예: 재사용 가능한 형식이 아닌 인스턴스가 필요함) Observable.Create 메서드를 사용하여 지정된 구독 동작이 있는 관찰 가능한 시퀀스를 만듭니다.</remarks>
            <typeparam name="T">시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.ObservableBase`1.Subscribe(System.IObserver{`0})">
            <summary>지정된 관찰자를 통해 관찰 가능한 시퀀스를 구독합니다.</summary>
            <param name="observer">관찰 가능한 시퀀스에서 알림을 받게 될 관찰자입니다.</param>
            <returns>관찰자의 관찰 가능한 시퀀스에 대한 구독을 나타내는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.ObservableBase`1.SubscribeCore(System.IObserver{`0})">
            <summary>관찰 가능한 시퀀스에 대한 핵심 구독 논리를 사용하여 이 메서드를 구현합니다.</summary>
            <param name="observer">알림을 보낼 관찰자입니다.</param>
            <returns>관찰자의 관찰 가능한 시퀀스에 대한 구독을 나타내는 일회용 개체입니다.</returns>
        </member>
        <member name="M:System.Reactive.AnonymousObservable`1.#ctor(System.Func{System.IObserver{`0},System.IDisposable})">
            <summary>지정된 구독 함수에서 관찰 가능한 시퀀스 개체를 만듭니다.</summary>
            <param name="subscribe">메서드 구현을 구독합니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribe"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.AnonymousObservable`1.SubscribeCore(System.IObserver{`0})">
            <summary>생성자에 제공된 구독 함수를 호출합니다.</summary>
            <param name="observer">알림을 보낼 관찰자입니다.</param>
            <returns>관찰자의 관찰 가능한 시퀀스에 대한 구독을 나타내는 일회용 개체입니다.</returns>
        </member>
        <member name="T:System.Reactive.AnonymousObserver`1">
            <summary>클래스는 On* 메서드의 대리자 기반 구현에서 IObserver&lt;T&gt; 인스턴스를 만듭니다.</summary>
            <typeparam name="T">시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="T:System.Reactive.ObserverBase`1">
            <summary>IObserver&lt;T&gt; 인터페이스의 구현에 대한 추상 기본 클래스입니다.</summary>
            <remarks>이 기본 클래스는 OnError 및 OnCompleted가 터미널 메시지인 관찰자의 문법을 적용합니다.</remarks>
            <typeparam name="T">시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.#ctor">
            <summary>중지되지 않은 상태에서 새 관찰자를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnNext(`0)">
            <summary>시퀀스에서 새 요소를 관찰자에게 통보합니다.</summary>
            <param name="value">시퀀스의 다음 요소입니다.</param>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnNextCore(`0)">
            <summary>시퀀스에서 새 요소의 회수에 반응하는 이 메서드를 구현합니다.</summary>
            <param name="value">시퀀스의 다음 요소입니다.</param>
            <remarks>이 메서드는 관찰자가 아직 중지되지 않은 경우에만 호출됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnError(System.Exception)">
            <summary>관찰자에게 예외가 발생했음을 통보합니다.</summary>
            <param name="error">발생한 오류입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="error"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnErrorCore(System.Exception)">
            <summary>이 메서드를 구현하여 예외 발생에 반응합니다.</summary>
            <param name="error">발생한 오류입니다.</param>
            <remarks>이 메서드는 관찰자가 아직 중지되지 않은 경우에만 호출되며 이에 대한 결과로 관찰자가 중지됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnCompleted">
            <summary>시퀀스의 끝을 관찰자에게 통보합니다.</summary>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.OnCompletedCore">
            <summary>이 메서드를 구현하여 시퀀스의 끝에 반응합니다.</summary>
            <remarks>이 메서드는 관찰자가 아직 중지되지 않은 경우에만 호출되며 이에 대한 결과로 관찰자가 중지됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.Dispose">
            <summary>관찰자를 삭제하여 중지된 상태로 전환합니다.</summary>
        </member>
        <member name="M:System.Reactive.ObserverBase`1.Dispose(System.Boolean)">
            <summary>IDisposable의 핵심 구현입니다.</summary>
            <param name="disposing">IDisposable.Dispose 메서드에 의해 Dispose 호출이 트리거된 경우 true입니다. 종료자에 의해 트리거된 경우 false입니다.</param>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>지정된 OnNext, OnError 및 OnCompleted 작업에서 관찰자를 만듭니다.</summary>
            <param name="onNext">관찰자의 OnNext 작업 구현입니다.</param>
            <param name="onError">관찰자의 OnError 작업 구현입니다.</param>
            <param name="onCompleted">관찰자의 OnCompleted 작업 구현입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> <paramref name="onError"/> 또는 <paramref name="onCompleted"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0})">
            <summary>지정된 OnNext 작업에서 관찰자를 만듭니다.</summary>
            <param name="onNext">관찰자의 OnNext 작업 구현입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action{System.Exception})">
            <summary>지정된 OnNext 및 OnError 작업에서 관찰자를 만듭니다.</summary>
            <param name="onNext">관찰자의 OnNext 작업 구현입니다.</param>
            <param name="onError">관찰자의 OnError 작업 구현입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> 또는 <paramref name="onError"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action)">
            <summary>지정된 OnNext 및 OnCompleted 작업에서 관찰자를 만듭니다.</summary>
            <param name="onNext">관찰자의 OnNext 작업 구현입니다.</param>
            <param name="onCompleted">관찰자의 OnCompleted 작업 구현입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="onNext"/> 또는 <paramref name="onCompleted"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.OnNextCore(`0)">
            <summary>onNext 작업을 호출합니다.</summary>
            <param name="value">시퀀스의 다음 요소입니다.</param>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.OnErrorCore(System.Exception)">
            <summary>onError 작업을 호출합니다.</summary>
            <param name="error">발생한 오류입니다.</param>
        </member>
        <member name="M:System.Reactive.AnonymousObserver`1.OnCompletedCore">
            <summary>onCompleted 작업을 호출합니다.</summary>
        </member>
        <member name="T:System.Reactive.AnonymousSafeObserver`1">
            <summary>이 클래스는 ObserverBase, 익명 관찰자 및 SafeObserver의 논리를 하나의 클래스로 융합합니다. 관찰자를 보호해야 하는 경우 SafeObserver.Create에서 이 유형의 인스턴스를 만들 수 있습니다. 이 인스턴스는 입력이 익명 관찰자임을 감지할 때 만들 수 있으며, 이는 On* 처리기에 대한 대리자를 수락하는 Subscribe 확장 메서드를 사용할 때 최종 사용자가 일반적으로 사용합니다. 퓨전을 수행하여 호출 스택 깊이를 짧게 만들어 디버깅 및 일부 성능에 도움이 됩니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.AsyncLock">
            <summary>비동기 잠금입니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.AsyncLock.Wait(System.Action)">
            <summary>실행을 위해 작업을 큐에 대기합니다. 호출자가 잠금을 획득하고 소유자가 되면 큐가 처리됩니다. 잠금이 이미 소유되어 있는 경우 작업이 큐에 대기되고 소유자가 처리합니다.</summary>
            <param name="action">실행을 위한 큐에 대한 작업입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.AsyncLock.Dispose">
            <summary>큐의 작업 항목을 지우고 큐에 대기 중인 추가 작업을 삭제합니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ConcurrencyAbstractionLayer">
            <summary>(인프라) 동시성 추상화 계층입니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.ConcurrencyAbstractionLayer.Current">
            <summary>현재 CAL을 가져옵니다. CAL이 아직 설정되지 않은 경우 기본값으로 초기화됩니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.IConcurrencyAbstractionLayer">
            <summary>(인프라) 동시성 추상화 계층 인터페이스입니다.</summary>
            <remarks>이 형식은 Rx 인프라에서 사용되며 공개 사용 또는 구현을 위한 것이 아닙니다. 형식의 기능 및 사용법의 전달 호환성에 대해 보장하지 않습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartTimer(System.Action{System.Object},System.Object,System.TimeSpan)">
            <summary>지정된 상대 시간에 실행 메서드를 큐에 대기합니다.</summary>
            <param name="action">실행할 메서드입니다.</param>
            <param name="state">메서드에 전달할 상태입니다.</param>
            <param name="dueTime">메서드를 실행할 시간입니다.</param>
            <returns>타이머를 중지하는 데 사용할 수 있는 일회용 개체입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartPeriodicTimer(System.Action,System.TimeSpan)">
            <summary>지정된 기간을 기준으로 주기적인 실행을 위한 메서드를 큐에 대기합니다.</summary>
            <param name="action">실행 방법; 재진입하는 데 안전해야 합니다.</param>
            <param name="period">주기적으로 메서드를 실행하는 기간입니다.</param>
            <returns>타이머를 중지하는 데 사용할 수 있는 일회용 개체입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.QueueUserWorkItem(System.Action{System.Object},System.Object)">
            <summary>실행을 위한 메서드를 큐에 대기합니다.</summary>
            <param name="action">실행할 메서드입니다.</param>
            <param name="state">메서드에 전달할 상태입니다.</param>
            <returns>큐에 대기된 메서드를 중지하는 데 사용할 수 있는 일회용 개체입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.Sleep(System.TimeSpan)">
            <summary>절전 작업 차단.</summary>
            <param name="timeout">절전 시간.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartStopwatch">
            <summary>새 스톱워치 개체를 시작합니다.</summary>
            <returns>새 스톱워치 개체, 요청 시 시작됩니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartThread(System.Action{System.Object},System.Object)">
            <summary>새 장기 실행 스레드를 시작합니다.</summary>
            <param name="action">실행할 메서드입니다.</param>
            <param name="state">메서드에 전달할 상태입니다.</param>
        </member>
        <member name="P:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.SupportsLongRunning">
            <summary>장기 실행 일정이 지원되는지 여부를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.Scheduler">
            <summary>일반적으로 사용되는 스케줄러에 액세스할 수 있는 정적 속성 집합을 제공합니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.DisableOptimizations(System.Reactive.Concurrency.IScheduler)">
            <summary>인터페이스 기반 최적화(예: 장기 실행 스케줄링)없이 원래 스케줄러를 나타내는 스케줄러를 반환합니다.</summary>
            <param name="scheduler">스케줄러는 모든 최적화를 비활성화합니다.</param>
            <returns>원래 스케줄러에 프록시하지만 최적화가 활성화되지 않았습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.DisableOptimizations(System.Reactive.Concurrency.IScheduler,System.Type[])">
            <summary>지정된 인터페이스 기반 최적화 집합(예: 장기 실행 스케줄링)없이 원래 스케줄러를 나타내는 스케줄러를 반환합니다.</summary>
            <param name="scheduler">스케줄러에 대해 지정된 최적화를 사용하지 않도록 설정합니다.</param>
            <param name="optimizationInterfaces">비활성화해야 하는 최적화 인터페이스의 유형입니다.</param>
            <returns>원래 스케줄러에 프록시하지만 지정된 최적화가 활성화되지 않았습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="optimizationInterfaces"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Catch``1(System.Reactive.Concurrency.IScheduler,System.Func{``0,System.Boolean})">
            <summary>원래 스케줄러를 래핑하는 스케줄러를 반환하여 예약된 작업에 대한 예외 처리를 추가합니다.</summary>
            <typeparam name="TException">확인할 예외의 유형입니다.</typeparam>
            <param name="scheduler">예외 필터를 적용하는 스케줄러입니다.</param>
            <param name="handler">예외가 발견되면 실행되는 처리기입니다. 처리기가 false를 반환하면 예외가 다시 throw됩니다.</param>
            <returns>원래 스케줄러 주위의 래퍼가 예외 처리를 적용합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="handler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>스케줄러의 기능을 동적으로 검색하여 정기적인 작업을 예약합니다. 스케줄러가 정기적인 일정을 지원하는 경우 요청은 정기적인 일정 구현으로 전달됩니다. 스케줄러가 스톱워치 기능을 제공하는 경우, 시간 미끄러짐을 해결하기 위해 스톱워치와 재귀 스케줄링을 사용하여 주기적인 작업이 에뮬레이트됩니다. 그렇지 않으면 주기적인 작업이 재귀 스케줄링을 사용하여 에뮬레이트됩니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">정기적인 작업을 실행하는 스케줄러입니다.</param>
            <param name="state">첫 번째 반복시 작업에 전달된 초기 상태입니다.</param>
            <param name="period">주기적으로 작업을 실행하는 기간입니다.</param>
            <param name="action">실행할 작업으로, 잠재적으로 상태를 업데이트할 수 있습니다.</param>
            <returns>예약된 되풀이 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 사용).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Action{``0})">
            <summary>스케줄러의 기능을 동적으로 검색하여 정기적인 작업을 예약합니다. 스케줄러가 정기적인 일정을 지원하는 경우 요청은 정기적인 일정 구현으로 전달됩니다. 스케줄러가 스톱워치 기능을 제공하는 경우, 시간 미끄러짐을 해결하기 위해 스톱워치와 재귀 스케줄링을 사용하여 주기적인 작업이 에뮬레이트됩니다. 그렇지 않으면 주기적인 작업이 재귀 스케줄링을 사용하여 에뮬레이트됩니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">작업을 실행할 스케줄러입니다.</param>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="period">주기적으로 작업을 실행하는 기간입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 되풀이 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 사용).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action)">
            <summary>스케줄러의 기능을 동적으로 검색하여 정기적인 작업을 예약합니다. 스케줄러가 정기적인 일정을 지원하는 경우 요청은 정기적인 일정 구현으로 전달됩니다. 스케줄러가 스톱워치 기능을 제공하는 경우, 시간 미끄러짐을 해결하기 위해 스톱워치와 재귀 스케줄링을 사용하여 주기적인 작업이 에뮬레이트됩니다. 그렇지 않으면 주기적인 작업이 재귀 스케줄링을 사용하여 에뮬레이트됩니다.</summary>
            <param name="scheduler">작업을 실행할 스케줄러입니다.</param>
            <param name="period">주기적으로 작업을 실행하는 기간입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 되풀이 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 사용).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.StartStopwatch(System.Reactive.Concurrency.IScheduler)">
            <summary>스케줄러의 기능을 동적으로 검색하여 새 스톱워치 개체를 시작합니다. 스케줄러가 정기적인 일정을 지원하는 경우 요청은 정기적인 일정 구현으로 전달됩니다. 그렇지 않으면 스톱워치는 스케줄러의 절대 시간 개념을 사용하여 에뮬레이트됩니다.</summary>
            <param name="scheduler">스톱워치를 가져오는 스케줄러입니다.</param>
            <returns>새 스톱워치 개체, 요청 시 시작됩니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
            <remarks>결과 스톱워치 개체에는 단조롭지 않은 동작이 있을 수 있습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.AsLongRunning(System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러의 ISchedulerLongRunning 구현을 반환하거나 이러한 구현을 사용할 수 없는 경우 null을 반환합니다.</summary>
            <param name="scheduler">ISchedulerLongRunning 구현을 가져오는 스케줄러입니다.</param>
            <returns>해당하는 경우 스케줄러의 ISchedulerLongRunning 구현 가능, 그렇지 않으면 null입니다.</returns>
            <remarks>이 도우미 메서드는 쿼리 연산자 작성자가 스케줄러 서비스의 인터셉션 또는 재정의를 허용하는 필수 IServiceProvider 패턴을 사용하여 스케줄러 서비스를 검색할 수 있도록 합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.AsStopwatchProvider(System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러의 IStopwatchProvider 구현을 반환하거나 이러한 구현을 사용할 수 없는 경우 null을 반환합니다.</summary>
            <param name="scheduler">IStopwatchProvider 구현을 가져오는 스케줄러입니다.</param>
            <returns>해당하는 경우 스케줄러의 IStopwatchProvider 구현 가능, 그렇지 않으면 null입니다.</returns>
            <remarks>
            <para>이 도우미 메서드는 쿼리 연산자 작성자가 스케줄러 서비스의 인터셉션 또는 재정의를 허용하는 필수 IServiceProvider 패턴을 사용하여 스케줄러 서비스를 검색할 수 있도록 합니다.</para>
            <para>스톱워치가 필요한 경우을(를) 사용하는 것이 좋지만 스케줄러의 클럭에 따라 에뮬레이션 스톱워치를 사용하는 것이 허용됩니다. 이 방법이 스톱워치 공급자 스케줄러 서비스를 가장 잘 사용하는 데 권장되며, 이 기능을 찾지 못하면 호출자가 스톱워치를 사용하지 않는 것으로 돌아갑니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.AsPeriodic(System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러의 IStopwatchProvider 구현을 반환하거나 이러한 구현을 사용할 수 없는 경우 null을 반환합니다.</summary>
            <param name="scheduler">IStopwatchProvider 구현을 가져오는 스케줄러입니다.</param>
            <returns>해당하는 경우 스케줄러의 IStopwatchProvider 구현 가능, 그렇지 않으면 null입니다.</returns>
            <remarks>
            <para>이 도우미 메서드는 쿼리 연산자 작성자가 스케줄러 서비스의 인터셉션 또는 재정의를 허용하는 필수 IServiceProvider 패턴을 사용하여 스케줄러 서비스를 검색할 수 있도록 합니다.</para>
            <para>주기적인 일정이 필요하고 다른 스케줄러 서비스를 사용하여 주기적인 동작을 에뮬레이션하는 것이 바람직한 경우 IScheduler에 대한 Scheduler.SchedulePeriodic 확장 메서드를 사용하는 것이 좋습니다. 이 방법이 주기적인 일정 서비스를 가장 잘 사용하는 데 권장되며, 이 기능을 찾지 못하면 호출자가 주기적인 일정 서비스를 사용하지 않는 것으로 돌아갑니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Yield(System.Reactive.Concurrency.IScheduler)">
            <summary>스케줄러의 현재 작업 항목을 스케줄러의 다른 작업 항목으로 실행합니다. 호출자는 Yield를 호출하여 현재 작업 항목의 나머지 부분(연속이라고 함)을 예약하는 결과를 기다려야 합니다.</summary>
            <param name="scheduler">작업을 산출하는 스케줄러입니다.</param>
            <returns>지속적인 일정을 예약하기 위해 대기하는 스케줄러 작업 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Yield(System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken)">
            <summary>스케줄러의 현재 작업 항목을 스케줄러의 다른 작업 항목으로 실행합니다. 호출자는 Yield를 호출하여 현재 작업 항목의 나머지 부분(연속이라고 함)을 예약하는 결과를 기다려야 합니다.</summary>
            <param name="scheduler">작업을 산출하는 스케줄러입니다.</param>
            <param name="cancellationToken">지속적인 작업을 취소할 수 있는 취소 토큰입니다.</param>
            <returns>지속적인 일정을 예약하기 위해 대기하는 스케줄러 작업 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Sleep(System.Reactive.Concurrency.IScheduler,System.TimeSpan)">
            <summary>지정된 기간 동안 스케줄러에서 현재 작업 항목의 실행을 일시 중단합니다. 호출자는 지정된 기간 이후에 현재 작업 항목의 나머지 부분(연속이라고 함)을 예약하기 위해 Sleep을 호출한 결과를 기다려야 합니다.</summary>
            <param name="scheduler">작업을 산출하는 스케줄러입니다.</param>
            <param name="dueTime">연속이 실행되어야 하는 시간입니다.</param>
            <returns>지속적인 일정을 예약하기 위해 대기하는 스케줄러 작업 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Sleep(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>지정된 기간 동안 스케줄러에서 현재 작업 항목의 실행을 일시 중단합니다. 호출자는 지정된 기간 이후에 현재 작업 항목의 나머지 부분(연속이라고 함)을 예약하기 위해 Sleep을 호출한 결과를 기다려야 합니다.</summary>
            <param name="scheduler">작업을 산출하는 스케줄러입니다.</param>
            <param name="dueTime">연속이 실행되어야 하는 시간입니다.</param>
            <param name="cancellationToken">지속적인 작업을 취소할 수 있는 취소 토큰입니다.</param>
            <returns>지속적인 일정을 예약하기 위해 대기하는 스케줄러 작업 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Sleep(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset)">
            <summary>지정된 기한 까지 스케줄러에서 현재 작업 항목의 실행을 일시 중단합니다. 호출자는 지정된 기한 에 현재 작업 항목의 나머지 부분(연속이라고 함)을 예약하기 위해 Sleep을 호출한 결과를 기다려야 합니다.</summary>
            <param name="scheduler">작업을 산출하는 스케줄러입니다.</param>
            <param name="dueTime">연속이 실행되어야 하는 시간입니다.</param>
            <returns>지속적인 일정을 예약하기 위해 대기하는 스케줄러 작업 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Sleep(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>지정된 기한 까지 스케줄러에서 현재 작업 항목의 실행을 일시 중단합니다. 호출자는 지정된 기한 에 현재 작업 항목의 나머지 부분(연속이라고 함)을 예약하기 위해 Sleep을 호출한 결과를 기다려야 합니다.</summary>
            <param name="scheduler">작업을 산출하는 스케줄러입니다.</param>
            <param name="dueTime">연속이 실행되어야 하는 시간입니다.</param>
            <param name="cancellationToken">지속적인 작업을 취소할 수 있는 취소 토큰입니다.</param>
            <returns>지속적인 일정을 예약하기 위해 대기하는 스케줄러 작업 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="state">비동기 메서드에 전달할 상태입니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="state">비동기 메서드에 전달할 상태입니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="state">비동기 메서드에 전달할 상태입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="state">비동기 메서드에 전달할 상태입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="state">비동기 메서드에 전달할 상태입니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="state">비동기 메서드에 전달할 상태입니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleAsync(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>일정은 비동기 메서드를 사용하여 작동하므로 명령적 코딩 스타일에서 공동 일정을 수립할 수 있습니다.</summary>
            <param name="scheduler">스케줄러에서 작업을 예약합니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <param name="action">협의적 일정 수립 및 취소 시점 거부 동안 Yield 및 Sleep 작업을 사용하여 작업을 실행하는 비동기식 메서드입니다.</param>
            <returns>협의적 취소 지점에서 또는 비동기 메서드로 전달된 취소 토큰을 통해 미해결 작업을 취소할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Normalize(System.TimeSpan)">
            <summary>지정된 TimeSpan 값을 양수 값으로 정규화합니다.</summary>
            <param name="timeSpan">정규화할 TimeSpan 값입니다.</param>
            <returns>0 또는 양수인 경우 지정된 TimeSpan 값입니다. 그렇지 않으면 TimeSpan.Zero입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.Action{System.Action})">
            <summary>작업을 재귀적으로 실행하도록 예약합니다.</summary>
            <param name="scheduler">재귀 작업을 실행하려면 스케줄러를 켜야 합니다.</param>
            <param name="action">재귀적으로 실행하는 작업입니다. 작업에 전달된 매개 변수는 작업의 재귀 일정을 트리거하는 데 사용됩니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.Action{``0,System.Action{``0}})">
            <summary>작업을 재귀적으로 실행하도록 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">재귀 작업을 실행하려면 스케줄러를 켜야 합니다.</param>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">재귀적으로 실행하는 작업입니다. 작업에 전달된 마지막 매개 변수는 재귀적 호출 상태를 전달하는 작업의 재귀 스케줄링을 트리거하는 데 사용됩니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action{System.Action{System.TimeSpan}})">
            <summary>지정된 상대적 기한 시간 이후에 재귀적으로 실행될 작업을 예약합니다.</summary>
            <param name="scheduler">재귀 작업을 실행하려면 스케줄러를 켜야 합니다.</param>
            <param name="action">재귀적으로 실행하는 작업입니다. 작업에 전달된 매개 변수는 지정된 상대 시간에 작업의 재귀 스케줄링을 트리거하는 데 사용됩니다.</param>
            <param name="dueTime">처음으로 작업을 실행하는 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Action{``0,System.Action{``0,System.TimeSpan}})">
            <summary>지정된 상대적 기한 시간 이후에 재귀적으로 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">재귀 작업을 실행하려면 스케줄러를 켜야 합니다.</param>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">재귀적으로 실행하는 작업입니다. 작업에 전달된 마지막 매개 변수는 재귀적 기한 시간 및 호출 상태를 전달하는 작업의 재귀 스케줄링을 트리거하는 데 사용됩니다.</param>
            <param name="dueTime">처음으로 작업을 실행하는 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Action{System.Action{System.DateTimeOffset}})">
            <summary>지정된 절대 기한 시간에 재귀적으로 실행될 작업을 예약합니다.</summary>
            <param name="scheduler">재귀 작업을 실행하려면 스케줄러를 켜야 합니다.</param>
            <param name="action">재귀적으로 실행하는 작업입니다. 작업에 전달된 매개 변수는 지정된 절대 시간에 작업의 재귀 스케줄링을 트리거하는 데 사용됩니다.</param>
            <param name="dueTime">처음으로 작업을 실행할 수 있는 절대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Action{``0,System.Action{``0,System.DateTimeOffset}})">
            <summary>지정된 절대 기한 시간에 재귀적으로 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="scheduler">재귀 작업을 실행하려면 스케줄러를 켜야 합니다.</param>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">재귀적으로 실행하는 작업입니다. 작업에 전달된 마지막 매개 변수는 재귀적 기한 시간 및 호출 상태를 전달하는 작업의 재귀 스케줄링을 트리거하는 데 사용됩니다.</param>
            <param name="dueTime">처음으로 작업을 실행할 수 있는 절대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.Action)">
            <summary>실행될 작업을 예약합니다.</summary>
            <param name="scheduler">작업을 실행할 스케줄러입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action)">
            <summary>지정된 상대 기한 시간 이후에 실행될 작업을 예약합니다.</summary>
            <param name="scheduler">작업을 실행할 스케줄러입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Action)">
            <summary>지정된 절대 기한 시간에 실행될 작업을 예약합니다.</summary>
            <param name="scheduler">작업을 실행할 스케줄러입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleLongRunning(System.Reactive.Concurrency.ISchedulerLongRunning,System.Action{System.Reactive.Disposables.ICancelable})">
            <summary>실행될 작업을 예약합니다.</summary>
            <param name="scheduler">작업을 실행할 스케줄러입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.Now">
            <summary>로컬 머신의 시스템 클럭에 따라 현재 시간을 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.Immediate">
            <summary>현재 스레드에서 즉시 작동을 예약하는 스케줄러를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.CurrentThread">
            <summary>현재 스레드에서 가능한 한 빨리 작동되도록 예약하는 스케줄러를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.Default">
            <summary>플랫폼의 기본 스케줄러에서 작업을 예약하는 스케줄러를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.ThreadPool">
            <summary>스레드 풀에서 작업을 예약하는 스케줄러를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.NewThread">
            <summary>기본 스레드 만들기 옵션을 사용하여 새 스레드에서 작업을 예약하는 스케줄러를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.Scheduler.TaskPool">
            <summary>기본 TaskScheduler를 사용하여 TPL(작업 병렬 라이브러리) 태스크 풀에서 작업을 예약하는 스케줄러를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.LocalScheduler">
            <summary>시간 기반 작업에 로컬 시스템 클럭을 사용하여 머신 로컬 스케줄러에 대한 추상 기본 클래스입니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.MAXERRORRATIO">
            <summary>타이머 드리프트에 대한 최대 오류 비율입니다. 매일 드리프트가 10s인 머신의 경우 10E-4 순서로 되어 있으므로 여기에서 추가 마진을 허용합니다. 이 값은 단기 큐에 대한 작업을 다시 평가하는 장기 큐 타이머의 조기 도달을 계산하는 데 사용됩니다. 예: -------------------------------...---------------------*-----$ ^ ^ | | early due 0.999 1.0 또한 적어도 LONGTOSHORT 기반으로 early와 due 사이의 간격을 두므로 단기로 작업을 전환하고 목적지 스케줄러에 대한 예의로서 큐 등을 관리 할 수 있는 충분한 시간을 갖습니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_gate">
            <summary>게이트는 큐를 보호하고 일정 결정 및 시스템 클럭 변경 관리를 동기화합니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_longTerm">
            <summary>장기 작업 큐입니다. 큐에 삽입할 때 계산된 SHORTTERM을 초과하는 작업을 포함합니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_nextLongTermTimer">
            <summary>장기 큐에서 첫 번째 항목을 다시 평가하고 디스패치하는 장기 타이머용 일회용 리소스입니다. 직렬 일회용 리소스는 &quot;current 삭제 및 new 할당” 논리를 용이하게 하는 데 사용됩니다 일회용 자체는 삭제되지 않습니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_nextLongTermWorkItem">
            <summary>현재 장기 타이머가 실행되는 장기 큐의 헤드에 있는 항목입니다. 큐의 변경 내용을 검색하고 현재 타이머를 계속 사용할지 여부를 결정하는 데 사용됩니다(이전 장기 작업이 큐에 추가되지 않음).</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_shortTerm">
            <summary>단기 작업 큐입니다. 작업 항목의 마이그레이션을 일으키는 장기 큐의 재평가 시 또는 큐에 삽입할 때 곧 계산되는 작업을 포함합니다. 이 큐는 시스템 클럭 변경이 발생할 경우 단기 항목을 장기 큐로 다시 재배치할 수 있도록 유지됩니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.s_shortTermWork">
            <summary>현재 단기 작업 스케줄 호출의 모든 일회용 핸들 세트를 사용하면 시스템 클럭 변경 시 이러한 호출을 취소 할 수 있습니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.SHORTTERM">
            <summary>항목이 단기 작업으로 간주되거나 장기에서 단기로 이동하는 임계값입니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.LONGTOSHORT">
            <summary>단기 작업에 대해 큐가 다시 평가되기 전에 장기 타이머가 발생하기 위한 최소 임계값입니다. 이 값은 타이머가 발생하도록 하기 위해 SHORTTERM보다 작게 선택되며 단기 큐로 전환하기 위해 작업할 수 있습니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.RETRYSHORT">
            <summary>단기 타이머가 절대 기한 시간에 비해 너무 일찍 발생된 시기를 결정하는 데 사용되는 임계값입니다. 이렇게 하면 운영 체제에서 시간 조정 시 발생할 수 있는 예약된 작업의 조기 완료를 마지막으로 방지할 수 있습니다(GetSystemTimeAdjustment 참조).</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.LocalScheduler.MAXSUPPORTEDTIMER">
            <summary><see cref="T:System.Threading.Timer"/>에서 지원하는 가장 긴 간격입니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.Enqueue``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>타이머 큐 또는 단기 작업 목록에서 절대 시간 예약 작업을 큐에 삽입합니다.</summary>
            <param name="scheduler">작업을 실행하는 스케줄러입니다. 일반적으로 “이(this)”는 호출자의 관점(LocalScheduler.Schedule)에 따르지만 모든 Rx 로컬 스케줄러에서 단일(정적) 타이머 큐가 있기 때문에 매개 변수가 유지됩니다.</param>
            <param name="state">작업에 전달할 상태입니다.</param>
            <param name="dueTime">작업을 실행할 수 있는 절대 시간입니다. 타이머 큐는 지정된 시간에 가깝도록 작업을 실행해야 하며 시스템 클럭 변경도 고려해야 합니다.</param>
            <param name="action">실행할 작업은 스케줄러로 재귀될 수 있습니다.</param>
            <returns>일회용 개체는 작업이 실행되지 않도록 합니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.ScheduleShortTermWork(System.Reactive.Concurrency.LocalScheduler.WorkItem)">
            <summary>단기적으로 예정된 작업을 예약합니다. 이렇게 하면 짧은 TimeSpan 값에 대한 기본 스케줄러에 대한 상대적인 스케줄링 호출이 발생합니다. 그 동안 시스템 클럭이 변경되면 단기 작업을 취소하고 다시 평가하려고 시도합니다.</summary>
            <param name="item">단기적으로 예약하는 작업 항목입니다. 발신자는 작업이 실제로 단기인지 결정할 책임이 있습니다.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.ExecuteNextShortTermWorkItem(System.Reactive.Concurrency.IScheduler,System.IDisposable)">
            <summary>콜백하여 다음 단기 작업 항목을 처리합니다.</summary>
            <param name="scheduler">기본 스케줄러에서 제공하는 재귀 스케줄러입니다.</param>
            <param name="cancel">타이머가 트리거된 작업을 식별하는 데 일회용이 사용됩니다(사용 코드 참조).</param>
            <returns>빈 일회용입니다. 재귀 작업 취소는 원래 WorkItem을 통해 유선으로 연결됩니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.ScheduleLongTermWork(System.Reactive.Concurrency.LocalScheduler.WorkItem)">
            <summary>장기적으로 예정된 작업을 예약합니다. 이렇게 하면 단기 작업 목록으로 전환하기 위해 큐에 대기되는 작업이 발생합니다.</summary>
            <param name="item">장기적으로 예약하는 작업 항목입니다. 발신자는 작업이 실제로 장기적인지 결정할 책임이 있습니다.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.UpdateLongTermProcessingTimer">
            <summary>장기 큐의 헤드에서 단기 작업 목록으로 작업을 전환하는 일을 담당하는 장기 타이머를 업데이트합니다.</summary>
            <remarks>스케줄러 잠금 아래에서 호출해야 합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.EvaluateLongTermQueue(System.Object)">
            <summary>장기 큐를 평가하고 단기 작업을 단기 목록으로 전환하고 그에 따라 새 장기 처리 타이머를 조정합니다.</summary>
            <param name="state">무시합니다.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.SystemClockChanged(System.Object,System.Reactive.PlatformServices.SystemClockChangedEventArgs)">
            <summary>내부 스케줄링 큐를 조정하고 다시 평가하기 위해 시스템 클럭 변경이 관찰될 때 콜백이 호출됩니다.</summary>
            <param name="args">현재 사용되지 않습니다.</param>
            <param name="sender">현재 사용되지 않습니다.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.StartStopwatch">
            <summary>새 스톱워치 개체를 시작합니다.</summary>
            <returns>새 스톱워치 개체, 요청 시 시작됩니다.</returns>
            <remarks>플랫폼별 스케줄러 구현은 보다 효율적인 IStopwatch 구현(사용 가능한 경우)을 제공하기 위해 IStopwatchProvider를 다시 구현해야 합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.LocalScheduler.GetService(System.Type)">
            <summary>인터페이스 유형별로 스케줄러 서비스를 검색합니다. 기본 클래스 구현은 파생 클래스에서 구현한 각 스케줄러 인터페이스에 대해 요청된 서비스를 반환합니다. 서비스 검색을 보다 자세히 제어하려면 파생 형식이 이 메서드를 재정의할 수 있습니다.</summary>
            <param name="serviceType">검색할 스케줄러 서비스 인터페이스 유형입니다.</param>
            <returns>요청된 서비스를 구현하는 개체(가능한 경우), 그렇지 않으면 null입니다.</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.LocalScheduler.Now">
            <summary>현재 시간에 대한 스케줄러의 개념을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.LocalScheduler.WorkItem">
            <summary>절대 시간 스케줄러에서 작업 항목을 나타냅니다.</summary>
            <remarks>이 형식은 ScheduledItem과 매우 유사하지만 대상 스케줄러의 사용자 지정을 허용하기 위해 다른 호출 서명이 필요합니다(예: 재귀 스케줄링 컨텍스트에서 호출되는 경우 ExecuteNextShortTermWorkItem 참조).</remarks>
        </member>
        <member name="T:System.Reactive.Concurrency.LocalScheduler.WorkItem`1">
            <summary>스케줄러 호출 상태를 통해 닫히는 작업 항목을 나타냅니다. 서브타이핑은 스케줄러 큐에 대한 공통 형식을 갖도록 사용됩니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.CurrentThreadScheduler">
            <summary>현재 스레드에서 작업 단위를 예약하는 개체를 나타냅니다.</summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.CurrentThread">이 정적 속성을 통해 노출된 이 형식의 Singleton 인스턴스입니다.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.CurrentThreadScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.Instance">
            <summary>현재 스레드 스케줄러의 싱글톤 인스턴스를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.ScheduleRequired">
            <summary>호출자가 Schedule 메서드를 호출해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.IsScheduleRequired">
            <summary>호출자가 Schedule 메서드를 호출해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ImmediateScheduler">
            <summary>현재 스레드에서 즉시 실행되도록 작업 단위를 예약하는 개체를 나타냅니다.</summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.Immediate">이 정적 속성을 통해 노출된 이 형식의 Singleton 인스턴스입니다.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="P:System.Reactive.Concurrency.ImmediateScheduler.Instance">
            <summary>즉각적인 스케줄러의 싱글톤 인스턴스를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ScheduledItem`1">
            <summary>예약된 작업 항목에 대한 추상 기본 클래스입니다.</summary>
            <typeparam name="TAbsolute">절대 시간 표현 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.#ctor(`0,System.Collections.Generic.IComparer{`0})">
            <summary>지정된 시간에 실행할 새 예약된 작업 항목을 만듭니다.</summary>
            <param name="dueTime">작업 항목을 실행해야 하는 절대 시간입니다.</param>
            <param name="comparer">비교자는 예약된 시간을 기준으로 작업 항목을 비교하는 데 사용됩니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Invoke">
            <summary>작업 항목을 호출합니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.InvokeCore">
            <summary>이 메서드를 구현하여 작업 항목 호출을 수행하고 일회용 개체를 반환하여 딥 취소(deep cancellation)를 수행합니다.</summary>
            <returns>작업 항목 및/또는 파생된 작업 항목을 취소 하는 데 사용되는 일회용 개체입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.CompareTo(System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>작업 항목을 절대 시간 값을 기준으로 다른 작업 항목과 비교합니다.</summary>
            <param name="other">현재 작업 항목을 비교할 작업 항목입니다.</param>
            <returns>이 항목과 지정된 작업 항목 간의 상대 순서입니다.</returns>
            <remarks>부등식 연산자가 오버로드되어 IComparable 구현과 일치하는 결과가 제공됩니다. 등식 연산자는 기존 참조 동일성 의미 체계를 구현합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_LessThan(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>먼저 지정된 ScheduledItem&lt;TAbsolute&gt; 개체가 두 번째로 지정된 ScheduledItem&lt;TAbsolute&gt; 개체 앞에 예정되어 있는지 여부를 결정합니다.</summary>
            <param name="left">비교할 첫 번째 개체입니다.</param>
            <param name="right">비교할 두 번째 개체입니다.</param>
            <returns>왼쪽의 DueTime 값이 오른쪽의 DueTime 값보다 빠른 경우 true, 그렇지 않으면 false입니다.</returns>
            <remarks>이 연산자는 IComparable 구현과 일치하는 결과를 제공합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_LessThanOrEqual(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>먼저 지정된 ScheduledItem&lt;TAbsolute&gt; 개체가 두 번째로 지정된 ScheduledItem&lt;TAbsolute&gt; 개체 앞에 또는 이 개체와 동시에 예정되어 있는지 여부를 결정합니다.</summary>
            <param name="left">비교할 첫 번째 개체입니다.</param>
            <param name="right">비교할 두 번째 개체입니다.</param>
            <returns>왼쪽의 DueTime 값이 오른쪽의 DueTime 값보다 빠르거나 이 값과 동시인 경우 true, 그렇지 않으면 false입니다.</returns>
            <remarks>이 연산자는 IComparable 구현과 일치하는 결과를 제공합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_GreaterThan(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>먼저 지정된 ScheduledItem&lt;TAbsolute&gt; 개체가 두 번째로 지정된 ScheduledItem&lt;TAbsolute&gt; 개체 뒤에 예정되어 있는지 여부를 결정합니다.</summary>
            <param name="left">비교할 첫 번째 개체입니다.</param>
            <param name="right">비교할 두 번째 개체입니다.</param>
            <returns>왼쪽의 DueTime 값이 오른쪽의 DueTime 값보다 늦은 경우 true, 그렇지 않으면 false입니다.</returns>
            <remarks>이 연산자는 IComparable 구현과 일치하는 결과를 제공합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_GreaterThanOrEqual(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>먼저 지정된 ScheduledItem&lt;TAbsolute&gt; 개체가 두 번째로 지정된 ScheduledItem&lt;TAbsolute&gt; 개체 뒤에 또는 이 개체와 동시에 예정되어 있는지 여부를 결정합니다.</summary>
            <param name="left">비교할 첫 번째 개체입니다.</param>
            <param name="right">비교할 두 번째 개체입니다.</param>
            <returns>왼쪽의 DueTime 값이 오른쪽의 DueTime 값보다 늦거나 이 값과 동시인 경우 true, 그렇지 않으면 거짓입니다.</returns>
            <remarks>이 연산자는 IComparable 구현과 일치하는 결과를 제공합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_Equality(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>지정된 두 개의 ScheduledItem&lt;TAbsolute, TValue&gt; 개체가 같은지 여부를 결정합니다.</summary>
            <param name="left">비교할 첫 번째 개체입니다.</param>
            <param name="right">비교할 두 번째 개체입니다.</param>
            <returns>두 ScheduledItem&lt;TAbsolute, TValue&gt;이 같으면 true, 그렇지 않으면 false입니다.</returns>
            <remarks>이 연산자는 IComparable 구현과 일치하는 결과를 제공하지 않습니다. 대신 참조 동일성이 구현됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_Inequality(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>지정된 두 개의 ScheduledItem&lt;TAbsolute, TValue&gt; 개체가 같지 않은지 여부를 결정합니다.</summary>
            <param name="left">비교할 첫 번째 개체입니다.</param>
            <param name="right">비교할 두 번째 개체입니다.</param>
            <returns>두 ScheduledItem&lt;TAbsolute, TValue&gt;이 같지 않은 경우 true, 그렇지 않으면 false입니다.</returns>
            <remarks>이 연산자는 IComparable 구현과 일치하는 결과를 제공하지 않습니다. 대신 참조 동일성이 구현됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Equals(System.Object)">
            <summary>ScheduledItem&lt;TAbsolute&gt; 개체가 지정된 개체와 같은지 여부를 결정합니다.</summary>
            <param name="obj">현재 ScheduledItem&lt;TAbsolute&gt; 개체와 비교할 개체입니다.</param>
            <returns>obj 매개 변수가 ScheduledItem&lt;TAbsolute&gt; 개체이고 현재 ScheduledItem&lt;TAbsolute&gt; 개체와 같으면 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.GetHashCode">
            <summary>현재 ScheduledItem&lt;TAbsolute&gt; 개체에 대한 해시 코드를 반환합니다.</summary>
            <returns>32비트 서명된 정수 해시 코드입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Cancel">
            <summary>가능한 한 빨리 InvokeCore에서 반환된 리소스를 삭제하여 작업 항목을 취소합니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.ScheduledItem`1.DueTime">
            <summary>항목이 호출 예정인 절대 시간을 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.ScheduledItem`1.IsCanceled">
            <summary>작업 항목이 취소 요청을 받았는지 여부를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ScheduledItem`2">
            <summary>IScheduler.Schedule 메서드 호출의 구체화를 기반으로 예약된 작업 항목을 나타냅니다.</summary>
            <typeparam name="TAbsolute">절대 시간 표현 형식입니다.</typeparam>
            <typeparam name="TValue">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`2.#ctor(System.Reactive.Concurrency.IScheduler,`1,System.Func{System.Reactive.Concurrency.IScheduler,`1,System.IDisposable},`0,System.Collections.Generic.IComparer{`0})">
            <summary>구체화된 작업 항목을 만듭니다.</summary>
            <param name="scheduler">예약된 작업을 호출하는 재귀 스케줄러입니다.</param>
            <param name="state">예약된 작업에 전달할 상태입니다.</param>
            <param name="action">예약된 작업입니다.</param>
            <param name="dueTime">예약된 작업을 실행할 시간입니다.</param>
            <param name="comparer">비교자는 예약된 시간을 기준으로 작업 항목을 비교하는 데 사용됩니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> <paramref name="action"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`2.#ctor(System.Reactive.Concurrency.IScheduler,`1,System.Func{System.Reactive.Concurrency.IScheduler,`1,System.IDisposable},`0)">
            <summary>구체화된 작업 항목을 만듭니다.</summary>
            <param name="scheduler">예약된 작업을 호출하는 재귀 스케줄러입니다.</param>
            <param name="state">예약된 작업에 전달할 상태입니다.</param>
            <param name="action">예약된 작업입니다.</param>
            <param name="dueTime">예약된 작업을 실행할 시간입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ScheduledItem`2.InvokeCore">
            <summary>제공된 재귀 스케줄러 및 상태를 통해 예약된 작업을 호출합니다.</summary>
            <returns>예약된 작업에서 반환되는 취소 리소스입니다.</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.SchedulerOperation">
            <summary>대기 가능한 스케줄러 작업을 나타냅니다. 개체를 기다리면 시작 스케줄러의 작업 대기열에 연속이 다시 게시됩니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerOperation.ConfigureAwait(System.Boolean)">
            <summary>연속이 발신 동기화 컨텍스트에서 실행되는지 여부를 제어합니다(기본적으로 false).</summary>
            <param name="continueOnCapturedContext">캡처된 동기화 컨텍스트에서 연속이 실행되면 true, 그렇지 않으면 false(기본값)입니다.</param>
            <returns>구성된 await 동작이 있는 스케줄러 작업 개체입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerOperation.GetAwaiter">
            <summary>연속을 다시 게시하는 데 사용되는 스케줄러 작업의 대기자를 가져옵니다.</summary>
            <returns>스케줄러 작업의 대기자입니다.</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.SchedulerOperationAwaiter">
            <summary>(인프라) C# await 및 Visual Basic Await 식에 대해 생성된 코드에서 사용하는 스케줄러 작업 대기자 형식입니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerOperationAwaiter.GetResult">
            <summary>스케줄러 작업을 완료하고 취소가 요청된 경우 OperationCanceledException를 throw합니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerOperationAwaiter.OnCompleted(System.Action)">
            <summary>스케줄러 작업을 통해 연속을 등록합니다.</summary>
            <param name="continuation">발신 스케줄러에서 실행되도록 계속합니다.</param>
        </member>
        <member name="P:System.Reactive.Concurrency.SchedulerOperationAwaiter.IsCompleted">
            <summary>스케줄러 작업이 완료되었는지 여부를 나타냅니다. 취소가 이미 요청되지 않은 경우 false를 반환합니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.SchedulerQueue`1">
            <summary>절대 시간별로 정렬된 예약된 항목을 유지 관리하는 효율적인 스케줄러 큐입니다.</summary>
            <typeparam name="TAbsolute">절대 시간 표현 형식입니다.</typeparam>
            <remarks>이 형식은 스레드에서 안전하지 않습니다. 사용자는 적절한 동기화를 확인해야 합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.#ctor">
            <summary>기본 초기 용량이 있는 새 스케줄러 큐를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.#ctor(System.Int32)">
            <summary>지정된 초기 용량으로 새 스케줄러 큐를 만듭니다.</summary>
            <param name="capacity">스케줄러 큐의 초기 용량입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Enqueue(System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>예약할 지정된 작업 항목을 큐에 삽입합니다.</summary>
            <param name="scheduledItem">예약할 작업 항목입니다.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Remove(System.Reactive.Concurrency.ScheduledItem{`0})">
            <summary>스케줄러 큐에서 지정된 작업 항목을 제거합니다.</summary>
            <param name="scheduledItem">스케줄러 큐에서 제거할 작업 항목입니다.</param>
            <returns>항목이 발견된 경우 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Dequeue">
            <summary>스케줄러 큐에서 다음 작업 항목을 큐에서 제거합니다.</summary>
            <returns>스케줄러 큐의 다음 작업 항목입니다(제거됨).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Peek">
            <summary>스케줄러 큐의 다음 작업 항목을 집어냅니다.</summary>
            <returns>스케줄러 큐의 다음 작업 항목입니다(제거되지 않음).</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.SchedulerQueue`1.Count">
            <summary>스케줄러 큐에서 예약된 항목 수를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.Synchronization">
            <summary>관찰 가능한 시퀀스에 대한 기본 동기화 및 일정 서비스를 제공합니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러에서 구독 및 구독 취소 논리를 실행하기 위해 소스 시퀀스를 래핑합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="scheduler">스케줄러에서 구독 및 구독 취소 작업을 수행합니다.</param>
            <returns>구독 및 구독 취소가 지정된 스케줄러에서 발생하는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <remarks>소스 시퀀스를 구독하고 소스 시퀀스에 대한 구독을 삭제하는 부작용만 지정된 스케줄러에서 실행됩니다. 지정된 스케줄러에서 관찰자 콜백을 호출하려면(예: 콜백 처리를 전용 스레드로 오프로드하려면)을을(를) 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>지정된 동기화 컨텍스트에서 구독 및 구독 취소 논리를 실행하기 위해 소스 시퀀스를 래핑합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="context">동기화 컨텍스트를 사용하여 구독 및 구독 취소 작업을 수행할 수 있습니다.</param>
            <returns>지정된 동기화 컨텍스트에서 구독 및 구독 취소가 발생하는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="context"/>은(는) null입니다.</exception>
            <remarks>소스 시퀀스를 구독하고 소스 시퀀스에 대한 구독을 삭제하는 부작용만 지정된 동기화 컨텍스트에서 실행됩니다. 지정된 동기화 컨텍스트에서 관찰자 콜백을 호출하기 위해(예: 동기화 컨텍스트로 표시되는 UI 스레드에 콜백을 게시하려면)을(를) 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러에서 관찰자 콜백을 실행하기 위해 소스 시퀀스를 래핑합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="scheduler">스케줄러를 사용하여 관찰자에게 알립니다.</param>
            <returns>지정된 스케줄러에서 관찰이 이루어지는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>지정된 동기화 컨텍스트에서 관찰자 콜백을 실행하기 위해 소스 시퀀스를 래핑합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="context">관찰자에게 알리는 동기화 컨텍스트입니다.</param>
            <returns>지정된 동기화 컨텍스트에서 관찰이 발생하는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="context"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.Synchronize``1(System.IObservable{``0})">
            <summary>관찰자 콜백이 제대로 직렬화되도록 소스 시퀀스를 래핑합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <returns>관찰자에 대한 나가는 호출이 동기화되는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.Synchronization.Synchronize``1(System.IObservable{``0},System.Object)">
            <summary>지정된 게이트 개체를 사용하여 관찰자 콜백이 동기화되도록 소스 시퀀스를 래핑합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="gate">각 관찰자 호출을 동기화하는 게이트 개체입니다.</param>
            <returns>지정된 게이트 개체에서 관찰자에 대해 나가는 호출이 동기화되는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="gate"/>은(는) null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Producer`1">
            <summary>쿼리 연산자의 구현을 위한 기본 클래스로, Observable.Create를 사용에 대한 성능상의 이점을 제공합니다.</summary>
            <typeparam name="TSource">결과 시퀀스의 요소의 형식입니다.</typeparam>
        </member>
        <member name="T:System.Reactive.IProducer`1">
            <summary>분산 주석이 있는 인터페이스를 사용하면 SubscribeSafe에서 기능을 검색할 때 더 나은 형식 검사를 수행할 수 있습니다.</summary>
            <typeparam name="TSource">결과 시퀀스의 요소의 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Producer`1.Subscribe(System.IObserver{`0})">
            <summary>공개적으로 표시되는 구독 메서드입니다.</summary>
            <param name="observer">관찰자에 알림을 보낼 수 있습니다. 프로듀서의 구현은 관찰자에 올바른 메시지 문법을 보장해야 합니다.</param>
            <returns>구독을 취소할 수 있는 IDisposable입니다. 이렇게 하면 기본 싱크가 구독 취소에 대한 알림을 받게 되어 추가 메시지가 관찰자에게 전송되지 않습니다.</returns>
        </member>
        <member name="M:System.Reactive.Producer`1.Run(System.IObserver{`0},System.IDisposable,System.Action{System.IDisposable})">
            <summary>프로듀서 개체에 대한 새 구독을 호출한 쿼리 연산자의 핵심 구현입니다.</summary>
            <param name="observer">관찰자에 알림을 보낼 수 있습니다. 프로듀서의 구현은 관찰자에 올바른 메시지 문법을 보장해야 합니다.</param>
            <param name="cancel">실행(Run) 호출에서 반환된 구독 일회용 개체는 싱크로 전달될 수 있도록 전달되어 최종 메시지를 보낼 때(또는 다른 이유로 조기에) 구독을 삭제할 수 있습니다.</param>
            <param name="setSink">콜백은 싱크 개체를 구독자에게 전달하여 소비자가 삭제(Dispose) 호출을 싱크로 터널링하여 처리를 중지할 수 있도록 합니다.</param>
            <returns>운영자가 이벤트를 처리하는 데 사용하는 모든 리소스 및/또는 구독을 나타내는 일회용입니다.</returns>
            <remarks>이 메서드에 전달된 <paramref name="observer">관찰자</paramref>는 OnError 또는 OnCompleted 호출 시 자동 분리 동작을 사용하여 보호되지 않습니다.  구현은 적절한 리소스 처리를 보장하고 메시지 문법을 적용해야 합니다.</remarks>
        </member>
        <member name="T:System.Reactive.Sink`1">
            <summary>쿼리 연산자의 구현을 위한 기본 클래스로, 나가는 관찰자를 음소거하기 위해 삭제할 수 있는 경량 싱크를 제공합니다.</summary>
            <typeparam name="TSource">결과 시퀀스의 요소의 형식입니다.</typeparam>
            <remarks>싱크의 구현은 연결된 관찰자에 메시지 문법을 적용해야 합니다. 터미널 메시지를 보낼 때 관련 리소스의 취소를 트리거하고 나가는 관찰자를 음소거하기 위해 페어링 삭제(Dispose) 호출을 수행해야 합니다.</remarks>
        </member>
        <member name="T:System.Reactive.Concurrency.SynchronizationContextScheduler">
            <summary>제공된 작업 단위를 예약하는 개체를 나타냅니다. <seealso cref="T:System.Threading.SynchronizationContext"/>.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext)">
            <summary>제공된 <see cref="T:System.Threading.SynchronizationContext"/>작업 단위를 예약하는 개체를 만듭니다.</summary>
            <param name="context">작업 단위를 예약하는 동기화 컨텍스트입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext,System.Boolean)">
            <summary>제공된 <see cref="T:System.Threading.SynchronizationContext"/>작업 단위를 예약하는 개체를 만듭니다.</summary>
            <param name="context">작업 단위를 예약하는 동기화 컨텍스트입니다.</param>
            <param name="alwaysPost">호출자가 동일한 동기화 컨텍스트에 있는지 여부에 관계 없이 예약이 항상 동기화 컨텍스트에 게시되는지 여부를 구성합니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Concurrency.DefaultScheduler">
            <summary>플랫폼의 기본 스케줄러에서 작업 단위를 예약하는 개체를 나타냅니다.</summary>
            <seealso cref="P:System.Reactive.Concurrency.Scheduler.Default">이 정적 속성을 통해 노출된 이 형식의 Singleton 인스턴스입니다.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.DefaultScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.DefaultScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>System.Threading.Timer 개체를 사용하여 dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.DefaultScheduler.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>System.Threading.Timer 개체를 사용하여 주기적인 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">첫 번째 반복시 작업에 전달된 초기 상태입니다.</param>
            <param name="period">주기적으로 작업을 실행하는 기간입니다.</param>
            <param name="action">실행할 작업으로, 잠재적으로 상태를 업데이트할 수 있습니다.</param>
            <returns>예약된 되풀이 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 사용).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.DefaultScheduler.GetService(System.Type)">
            <summary>인터페이스 유형별로 스케줄러 서비스를 검색합니다.</summary>
            <param name="serviceType">검색할 스케줄러 서비스 인터페이스 유형입니다.</param>
            <returns>요청된 서비스를 구현하는 개체(가능한 경우), 그렇지 않으면 null입니다.</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.DefaultScheduler.Instance">
            <summary>기본 스케줄러의 싱글톤 인스턴스를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.AnonymousDisposable">
            <summary>작업 기반 일회용을 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.AnonymousDisposable.#ctor(System.Action)">
            <summary>삭제에 사용되는 지정된 작업으로 새 일회용을 구성합니다.</summary>
            <param name="dispose">삭제(Dispose)를 호출할 때 실행되는 삭제 작업입니다.</param>
        </member>
        <member name="M:System.Reactive.Disposables.AnonymousDisposable.Dispose">
            <summary>현재 인스턴스가 아직 삭제되지 않은 경우에만 삭제 작업을 호출합니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.AnonymousDisposable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.BooleanDisposable">
            <summary>삭제 상태를 확인할 수 있는 일회용 리소스를 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.BooleanDisposable.#ctor">
            <summary><see cref="T:System.Reactive.Disposables.BooleanDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.BooleanDisposable.Dispose">
            <summary><see cref="P:System.Reactive.Disposables.BooleanDisposable.IsDisposed"/> 속성을 통해 관찰자가 될 수 있는 삭제할 상태를 설정합니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.BooleanDisposable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.CancellationDisposable">
            <summary>연결된 리소스가 있는 일회용 리소스를 나타냅니다. <seealso cref="T:System.Threading.CancellationToken"/> 삭제 시 취소 요청된 상태로 설정됩니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CancellationDisposable.#ctor(System.Threading.CancellationTokenSource)">
            <summary>기존 개체를 사용하는 <see cref="T:System.Reactive.Disposables.CancellationDisposable"/> 클래스의 새 인스턴스를 초기화합니다. <seealso cref="T:System.Threading.CancellationTokenSource"/>.</summary>
            <param name="cts"><seealso cref="T:System.Threading.CancellationTokenSource"/> 취소에 사용됩니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cts"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CancellationDisposable.#ctor">
            <summary>새 개체를 사용하는 <see cref="T:System.Reactive.Disposables.CancellationDisposable"/> 클래스의 새 인스턴스를 초기화합니다. <seealso cref="T:System.Threading.CancellationTokenSource"/>.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CancellationDisposable.Dispose">
            <summary>기본을 취소합니다. <seealso cref="T:System.Threading.CancellationTokenSource"/>.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.CancellationDisposable.Token">
            <summary>CancellationDisposable에서 사용하는을(를) 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.CancellationDisposable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.CompositeDisposable">
            <summary>함께 삭제되는 일회용 리소스 그룹을 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor">
            <summary>처음에 일회용이 포함되지 않은 경우 <see cref="T:System.Reactive.Disposables.CompositeDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.Int32)">
            <summary>지정된 수의 일회용으로 <see cref="T:System.Reactive.Disposables.CompositeDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="capacity">새 CompositeDisposable이 처음에 저장할 수 있는 일회용의 수입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.IDisposable[])">
            <summary>일회용 그룹에서 <see cref="T:System.Reactive.Disposables.CompositeDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="disposables">함께 삭제할 일회용입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposables"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>일회용 그룹에서 <see cref="T:System.Reactive.Disposables.CompositeDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="disposables">함께 삭제할 일회용입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposables"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Add(System.IDisposable)">
            <summary>CompositeDisposable에 일회용을 추가하거나 CompositeDisposable이 삭제된 경우 일회용을 삭제합니다.</summary>
            <param name="item">추가할 일회용입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Remove(System.IDisposable)">
            <summary>CompositeDisposable에서 일회용의 첫 번째 발생을 제거하고 삭제합니다.</summary>
            <param name="item">제거할 일회용입니다.</param>
            <returns>발견되면 true, 그렇지 않으면 false입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Dispose">
            <summary>그룹의 모든 일회용을 삭제하고 그룹에서 제거합니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Clear">
            <summary>CompositeDisposable에서 모든 일회용을 제거하고 삭제하지만 CompositeDisposable을 삭제하지는 않습니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.Contains(System.IDisposable)">
            <summary>CompositeDisposable에 특정 일회용이 포함되어 있는지 여부를 결정합니다.</summary>
            <param name="item">검색할 일회용입니다.</param>
            <returns>일회용이 발견된 경우 true, 그렇지 않으면 false입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
            <summary>특정 배열 인덱스에서 시작하여 CompositeDisposable 배열에 포함된 일회용을 복사합니다.</summary>
            <param name="array">포함된 일회용을 복사할 배열입니다.</param>
            <param name="arrayIndex">그룹의 첫 번째 일회용을 복사할 대상 인덱스입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> 0보다 적습니다. -or- <paramref name="arrayIndex"/>은(는) 배열 길이보다 크거나 같습니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.GetEnumerator">
            <summary>CompositeDisposable을 통해 반복하는 열거자를 반환합니다.</summary>
            <returns>일회용을 반복하는 열거자입니다.</returns>
        </member>
        <member name="M:System.Reactive.Disposables.CompositeDisposable.System#Collections#IEnumerable#GetEnumerator">
            <summary>CompositeDisposable을 통해 반복하는 열거자를 반환합니다.</summary>
            <returns>일회용을 반복하는 열거자입니다.</returns>
        </member>
        <member name="P:System.Reactive.Disposables.CompositeDisposable.Count">
            <summary>CompositeDisposable에 포함된 일회용의 수를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.CompositeDisposable.IsReadOnly">
            <summary>항상 false를 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.CompositeDisposable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.ContextDisposable">
            <summary>삭제 호출이 게시되도록 지정된 일회용 리소스를 나타냅니다. <seealso cref="T:System.Threading.SynchronizationContext"/>.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.ContextDisposable.#ctor(System.Threading.SynchronizationContext,System.IDisposable)">
            <summary>지정된 일회용 리소스를 삭제할 지정된 <see cref="T:System.Reactive.Disposables.ContextDisposable"/>을(를) 사용하는 <see cref="T:System.Reactive.Disposables.ContextDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="context">삭제를 수행할 컨텍스트입니다.</param>
            <param name="disposable">삭제(Dispose) 작업이 지정된 동기화 컨텍스트에서 실행될 일회용입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> 또는 <paramref name="disposable"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.ContextDisposable.Dispose">
            <summary>제공된 <see cref="T:System.Threading.SynchronizationContext"/>에서 기본 일회용을 삭제합니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ContextDisposable.Context">
            <summary>제공된 <see cref="T:System.Threading.SynchronizationContext"/>을(를) 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ContextDisposable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.DefaultDisposable">
            <summary>삭제에 대해 아무 것도 하지 않는 일회용을 나타냅니다.</summary>
        </member>
        <member name="F:System.Reactive.Disposables.DefaultDisposable.Instance">
            <summary>싱글톤 기본 일회용입니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.DefaultDisposable.Dispose">
            <summary>아무 것도 하지 않습니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.Disposable">
            <summary>일회용을 만들기 위한 정적 메서드 집합을 제공합니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.Disposable.Create(System.Action)">
            <summary>삭제할 때 지정된 작업을 호출하는 일회용 개체를 만듭니다.</summary>
            <param name="dispose"><see cref="M:System.IDisposable.Dispose"/>에 대한 첫 번째 호출 중에 실행할 작업입니다. 이 작업은 최대 한 번 실행되도록 보장됩니다.</param>
            <returns>삭제 시 지정된 작업을 실행하는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dispose"/> null입니다.</exception>
        </member>
        <member name="P:System.Reactive.Disposables.Disposable.Empty">
            <summary>삭제할 때 아무 것도 하지 않는 일회용을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.MultipleAssignmentDisposable">
            <summary>기본 일회용 리소스를 다른 일회용 리소스로 교환할 수 있는 일회용 리소스를 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.MultipleAssignmentDisposable.#ctor">
            <summary>현재 기본 일회용 없이 <see cref="T:System.Reactive.Disposables.MultipleAssignmentDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.MultipleAssignmentDisposable.Dispose">
            <summary>기본 일회용 제품 및 향후 모든 교체품을 폐기합니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.MultipleAssignmentDisposable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.MultipleAssignmentDisposable.Disposable">
            <summary>기본 일회용 제품을 얻거나 설정합니다. 폐기 후 이 속성을 얻은 결과는 정의되지 않습니다.</summary>
            <remarks>MutableDisposable이 이미 삭제된 경우 이 속성에 할당하면 지정된 일회용 개체가 즉시 삭제됩니다.</remarks>
        </member>
        <member name="T:System.Reactive.Disposables.RefCountDisposable">
            <summary>모든 <see cref="M:System.Reactive.Disposables.RefCountDisposable.GetDisposable">종속 일회용 개체</see>가 삭제되었을 때 기본 일회용 리소스만 삭제하는 일회용 리소스를 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.RefCountDisposable.#ctor(System.IDisposable)">
            <summary>지정된 일회용으로 <see cref="T:System.Reactive.Disposables.RefCountDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="disposable">기본 일회용입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposable"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.RefCountDisposable.GetDisposable">
            <summary>삭제로 인해 기본 일회용에서 참조카운트가 줄어들 때 종속 일회용을 반환합니다.</summary>
            <returns>기본 일회용의 수명을 관리하는 참조 카운트에 기여하는 종속 일회용 입니다.</returns>
        </member>
        <member name="M:System.Reactive.Disposables.RefCountDisposable.Dispose">
            <summary>모든 종속 일회용이 삭제된 경우에만 기본 일회용을 삭제합니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.RefCountDisposable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.ScheduledDisposable">
            <summary>삭제 호출이 예약되도록 지정된 일회용 리소스를 나타냅니다. <seealso cref="T:System.Reactive.Concurrency.IScheduler"/>.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.ScheduledDisposable.#ctor(System.Reactive.Concurrency.IScheduler,System.IDisposable)">
            <summary>일회용을 삭제할을(를) 사용하는 <see cref="T:System.Reactive.Disposables.ScheduledDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="scheduler">일회용 리소스를 삭제할 스케줄러입니다.</param>
            <param name="disposable">지정된 스케줄러에서 삭제할 일회용 리소스입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="disposable"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Disposables.ScheduledDisposable.Dispose">
            <summary>래핑된 일회용을 제공된 스케줄러에서 폐기합니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ScheduledDisposable.Scheduler">
            <summary>일회용 리소스가 삭제될 스케줄러를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ScheduledDisposable.Disposable">
            <summary>기본 일회용을 가져옵니다. 삭제 후 결과는 정의되지 않습니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.ScheduledDisposable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Disposables.SerialDisposable">
            <summary>기본 일회용 리소스를 다른 일회용 리소스로 대체할 수 있는 일회용 리소스를 나타내므로 이전 기본 일회용 리소스가 자동으로 삭제됩니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.SerialDisposable.#ctor">
            <summary><see cref="T:System.Reactive.Disposables.SerialDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.SerialDisposable.Dispose">
            <summary>기본 일회용 제품 및 향후 모든 교체품을 폐기합니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.SerialDisposable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.SerialDisposable.Disposable">
            <summary>기본 일회용 제품을 얻거나 설정합니다.</summary>
            <remarks>SerialDisposable이 이미 삭제된 경우 이 속성에 할당하면 지정된 일회용 개체가 즉시 삭제됩니다. 이 속성을 할당하면 이전 일회용 개체가 삭제됩니다.</remarks>
        </member>
        <member name="T:System.Reactive.Disposables.SingleAssignmentDisposable">
            <summary>기본 일회용 리소스의 단일 할당만 허용하는 일회용 리소스를 나타냅니다. 기본 일회용 리소스가 이미 설정된 경우 기본 일회용 리소스를 설정하려는 향후 시도가을(를) throw합니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.SingleAssignmentDisposable.#ctor">
            <summary><see cref="T:System.Reactive.Disposables.SingleAssignmentDisposable"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:System.Reactive.Disposables.SingleAssignmentDisposable.Dispose">
            <summary>기본 일회용을 삭제합니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.SingleAssignmentDisposable.IsDisposed">
            <summary>개체가 삭제되는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Disposables.SingleAssignmentDisposable.Disposable">
            <summary>기본 일회용 제품을 얻거나 설정합니다. 폐기 후 이 속성을 얻은 결과는 정의되지 않습니다.</summary>
            <exception cref="T:System.InvalidOperationException">SingleAssignmentDisposable이 이미 할당된 경우 throw됩니다.</exception>
        </member>
        <member name="T:System.Reactive.PlatformServices.IExceptionServices">
            <summary>(인프라) 예외를 다시 throw하는 서비스입니다.</summary>
            <remarks>이 형식은 Rx 인프라에서 사용되며 공개 사용 또는 구현을 위한 것이 아닙니다. 형식의 기능 및 사용법의 전달 호환성에 대해 보장하지 않습니다.</remarks>
        </member>
        <member name="M:System.Reactive.PlatformServices.IExceptionServices.Rethrow(System.Exception)">
            <summary>지정된 예외를 다시 throw합니다.</summary>
            <param name="exception">다시 throw할 예외입니다.</param>
        </member>
        <member name="T:System.Reactive.PlatformServices.HostLifecycleService">
            <summary>(인프라) 호스트의 수명 주기 관리 서비스에 대한 액세스를 제공합니다.</summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.HostLifecycleService.AddRef">
            <summary>호스트 수명 주기 관리자에 대한 참조를 추가하여 알림을 보냅니다.</summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.HostLifecycleService.Release">
            <summary>호스트 수명 주기 관리자에 대한 참조를 제거하고 제거된 참조가 마지막 참조인 경우 알림 전송을 중지합니다.</summary>
        </member>
        <member name="E:System.Reactive.PlatformServices.HostLifecycleService.Suspending">
            <summary>호스트가 애플리케이션을 일시 중단할 때 발생하는 이벤트입니다.</summary>
        </member>
        <member name="E:System.Reactive.PlatformServices.HostLifecycleService.Resuming">
            <summary>호스트가 애플리케이션을 다시 시작할 때 발생하는 이벤트입니다.</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.IHostLifecycleNotifications">
            <summary>(인프라) 호스트의 수명 주기 이벤트에 대한 알림을 제공합니다.</summary>
        </member>
        <member name="E:System.Reactive.PlatformServices.IHostLifecycleNotifications.Suspending">
            <summary>호스트가 일시 중단될 때 발생하는 이벤트입니다.</summary>
        </member>
        <member name="E:System.Reactive.PlatformServices.IHostLifecycleNotifications.Resuming">
            <summary>호스트가 다시 시작될 때 발생하는 이벤트입니다.</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.HostSuspendingEventArgs">
            <summary>(인프라) 호스트 일시 중단 이벤트에 대한 이벤트 인수입니다.</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.HostResumingEventArgs">
            <summary>(인프라) 호스트 재개 이벤트에 대한 이벤트 인수입니다.</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.IPlatformEnlightenmentProvider">
            <summary>(인프라) 계몽(enlightenment) 공급자를 위한 인터페이스.</summary>
            <remarks>이 형식은 Rx 인프라에서 사용되며 공개 사용 또는 구현을 위한 것이 아닙니다. 형식의 기능 및 사용법의 전달 호환성에 대해 보장하지 않습니다.</remarks>
        </member>
        <member name="M:System.Reactive.PlatformServices.IPlatformEnlightenmentProvider.GetService``1(System.Object[])">
            <summary>(인프라) 지정된 서비스를 얻으려고 시도합니다.</summary>
            <typeparam name="T">서비스 유형입니다.</typeparam>
            <param name="args">선택적 인수 집합입니다.</param>
            <returns>서비스 인스턴스 또는 찾을 수 없는 경우 null입니다.</returns>
        </member>
        <member name="T:System.Reactive.PlatformServices.PlatformEnlightenmentProvider">
            <summary>(인프라) 플랫폼별 프레임워크 이해를 위한 공급자입니다.</summary>
            <remarks>이 형식은 Rx 인프라에서 사용되며 공개 사용 또는 구현을 위한 것이 아닙니다.</remarks>
        </member>
        <member name="P:System.Reactive.PlatformServices.PlatformEnlightenmentProvider.Current">
            <summary>(인프라) 현재 계몽 공급자를 가져옵니다. 아직 로드되지 않은 경우 이 속성에 액세스하면 공급자 확인이 트리거됩니다.</summary>
            <remarks>이 번호는 Rx 인프라에서 사용되며 공개 사용 또는 구현을 위한 것이 아닙니다.</remarks>
        </member>
        <member name="T:System.Reactive.PlatformServices.SystemClock">
            <summary>(인프라) 로컬 시스템 클럭 서비스에 대한 액세스를 제공합니다.</summary>
            <remarks>이 형식은 Rx 인프라에서 사용되며 공개 사용 또는 구현을 위한 것이 아닙니다. 형식의 기능 및 사용법의 전달 호환성에 대해 보장하지 않습니다.</remarks>
        </member>
        <member name="M:System.Reactive.PlatformServices.SystemClock.AddRef">
            <summary>시스템 클럭 모니터에 참조를 추가하여 알림을 보냅니다.</summary>
            <exception cref="T:System.NotSupportedException">시스템에서 클럭 변경 알림 전송을 지원하지 않는 경우 throw됩니다.</exception>
        </member>
        <member name="M:System.Reactive.PlatformServices.SystemClock.Release">
            <summary>시스템 클럭 모니터에 대한 참조를 제거하여 제거된 참조가 마지막 참조인 경우 알림 전송을 중지합니다.</summary>
        </member>
        <member name="P:System.Reactive.PlatformServices.SystemClock.UtcNow">
            <summary>로컬 시스템 클럭 시간을 가져옵니다.</summary>
        </member>
        <member name="E:System.Reactive.PlatformServices.SystemClock.SystemClockChanged">
            <summary>시스템 클럭 변경이 감지될 때 발생하는 이벤트입니다(AddRef 호출에서 표시한 대로 관심 있는 경우).</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.ISystemClock">
            <summary>(인프라) 로컬 시스템 클럭에 대한 액세스를 제공합니다.</summary>
            <remarks>이 형식은 Rx 인프라에서 사용되며 공개 사용 또는 구현을 위한 것이 아닙니다. 형식의 기능 및 사용법의 전달 호환성에 대해 보장하지 않습니다.</remarks>
        </member>
        <member name="P:System.Reactive.PlatformServices.ISystemClock.UtcNow">
            <summary>현재 시간을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.INotifySystemClockChanged">
            <summary>(인프라) 시스템 클럭 변경에 대해 로컬 스케줄러에 알리는 메커니즘을 제공합니다.</summary>
            <remarks>이 형식은 Rx 인프라에서 사용되며 공개 사용 또는 구현을 위한 것이 아닙니다. 형식의 기능 및 사용법의 전달 호환성에 대해 보장하지 않습니다.</remarks>
        </member>
        <member name="E:System.Reactive.PlatformServices.INotifySystemClockChanged.SystemClockChanged">
            <summary>시스템 클럭 변경이 감지되면 발생하는 이벤트입니다.</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.SystemClockChangedEventArgs">
            <summary>(인프라) 시스템 클럭 변경 알림에 대한 이벤트 인수입니다.</summary>
            <remarks>이 형식은 Rx 인프라에서 사용되며 공개 사용 또는 구현을 위한 것이 아닙니다. 형식의 기능 및 사용법의 전달 호환성에 대해 보장하지 않습니다.</remarks>
        </member>
        <member name="M:System.Reactive.PlatformServices.SystemClockChangedEventArgs.#ctor">
            <summary>알 수 없는 이전 및 새 시간으로 새 시스템 클럭 알림 개체를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.SystemClockChangedEventArgs.#ctor(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>지정된 이전 및 새 시간을 가진 새 시스템 클럭 알림 개체를 만듭니다.</summary>
            <param name="oldTime">시스템 클럭이 변경되기 전의 시간 또는 알 수 없는 경우 DateTimeOffset.MinValue입니다.</param>
            <param name="newTime">시스템 클럭이 변경된 후의 시간 또는 알 수 없는 경우 DateTimeOffset.MaxValue입니다.</param>
        </member>
        <member name="P:System.Reactive.PlatformServices.SystemClockChangedEventArgs.OldTime">
            <summary>시스템 클럭이 변경되기 전의 시간 또는 알 수 없는 경우 DateTimeOffset.MinValue를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.PlatformServices.SystemClockChangedEventArgs.NewTime">
            <summary>시스템 클럭이 변경된 후의 시간 또는 알 수 없는 경우 DateTimeOffset.MaxValue를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.DefaultSystemClock">
            <summary>(인프라) 로컬 시스템 클럭에 대한 액세스를 제공합니다.</summary>
        </member>
        <member name="P:System.Reactive.PlatformServices.DefaultSystemClock.UtcNow">
            <summary>현재 시간을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor">
            <summary>(인프라) 주기적인 타이머를 기반으로 시스템 클럭 변경 사항을 모니터링합니다.</summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor.#ctor(System.TimeSpan)">
            <summary>지정된 폴링 빈도로 시스템 클럭 변경에 대한 새 모니터를 만듭니다.</summary>
            <param name="period">시스템 클럭 변경에 대한 폴링 빈도입니다.</param>
        </member>
        <member name="E:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor.SystemClockChanged">
            <summary>시스템 클럭 변경이 감지되면 발생하는 이벤트입니다.</summary>
        </member>
        <member name="T:System.Reactive.NotificationKind">
            <summary>알림 유형을 나타냅니다.</summary>
        </member>
        <member name="F:System.Reactive.NotificationKind.OnNext">
            <summary>OnNext 알림을 나타냅니다.</summary>
        </member>
        <member name="F:System.Reactive.NotificationKind.OnError">
            <summary>OnError 알림을 나타냅니다.</summary>
        </member>
        <member name="F:System.Reactive.NotificationKind.OnCompleted">
            <summary>OnCompleted 알림을 나타냅니다.</summary>
        </member>
        <member name="T:System.Reactive.Notification`1">
            <summary>관찰자에 대한 알림을 나타냅니다.</summary>
            <typeparam name="T">관찰자가 수신한 요소의 유형입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Notification`1.#ctor">
            <summary>파생 형식에서 사용하는 기본 생성자입니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.Equals(System.Reactive.Notification{`0})">
            <summary>현재 알림&lt;T&gt; 개체에 지정된 알림&lt;T&gt; 값과 동일한 관찰자 메시지 페이로드가 있는지 여부를 결정합니다.</summary>
            <param name="other">현재 알림&lt;T&gt; 개체와 비교할 개체입니다.</param>
            <returns>두 알림&lt;T&gt; 개체가 동일한 관찰자 메시지 페이로드를 가지는 경우 true, 그렇지 않으면 false입니다.</returns>
            <remarks>알림 동일성&lt;T&gt; 개체는 알림 종류, 값 또는 예외(해당하는 경우)를 비롯해 나타나는 관찰자 메시지 페이로드의 동일성에 기반합니다. 즉, 동일한 관찰자 메서드 호출을 나타내지 않더라도 두 알림&lt;T&gt; 개체가 동일할 수 있지만 종류는 동일하고 관측자 메소드에 전달되는 파라미터가 동일합니다. 두 알림&lt;T&gt; 개체가 동일한 관찰자 메서드 호출을 나타내는지 여부를 판별하기 원할 경우, 대신 Object.ReferenceEquals ID 동일성을 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Notification`1.op_Equality(System.Reactive.Notification{`0},System.Reactive.Notification{`0})">
            <summary>지정된 두 알림&lt;T&gt; 개체에 동일한 관찰자 메시지 페이로드가 있는지 여부를 결정합니다.</summary>
            <param name="left">비교할 첫 번째 알림&lt;T&gt; 또는 null입니다.</param>
            <param name="right">비교할 두 번째 알림&lt;T&gt; 또는 null입니다.</param>
            <returns>첫 번째 알림&lt;T&gt; 값에 두 번째 알림&lt;T&gt; 값과 동일한 관찰자 메시지 페이로드가 있는 경우 true, 그렇지 않으면 false입니다.</returns>
            <remarks>알림 동일성&lt;T&gt; 개체는 알림 종류, 값 또는 예외(해당하는 경우)를 비롯해 나타나는 관찰자 메시지 페이로드의 동일성에 기반합니다. 즉, 동일한 관찰자 메서드 호출을 나타내지 않더라도 두 알림&lt;T&gt; 개체가 동일할 수 있지만 종류는 동일하고 관측자 메소드에 전달되는 파라미터가 동일합니다. 두 알림&lt;T&gt; 개체가 동일한 관찰자 메서드 호출을 나타내는지 여부를 판별하기 원할 경우, 대신 Object.ReferenceEquals ID 동일성을 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Notification`1.op_Inequality(System.Reactive.Notification{`0},System.Reactive.Notification{`0})">
            <summary>지정된 두 알림&lt;T&gt; 개체에 다른 관찰자 메시지 페이로드가 있는지 여부를 결정합니다.</summary>
            <param name="left">비교할 첫 번째 알림&lt;T&gt; 또는 null입니다.</param>
            <param name="right">비교할 두 번째 알림&lt;T&gt; 또는 null입니다.</param>
            <returns>첫 번째 알림&lt;T&gt; 값에 다른 관찰자 메시지 페이로드가 두 번째 알림&lt;T&gt; 값으로 있는 경우 true, 그렇지 않으면 false입니다.</returns>
            <remarks>알림 동일성&lt;T&gt; 개체는 알림 종류, 값 또는 예외(해당하는 경우)를 비롯해 나타나는 관찰자 메시지 페이로드의 동일성에 기반합니다. 즉, 동일한 관찰자 메서드 호출을 나타내지 않더라도 두 알림&lt;T&gt; 개체가 동일할 수 있지만 종류는 동일하고 관측자 메소드에 전달되는 파라미터가 동일합니다. 두 알림&lt;T&gt; 개체가 동일한 관찰자 메서드 호출을 나타내는지 여부를 판별하기 원할 경우, 대신 Object.ReferenceEquals ID 동일성을 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Notification`1.Equals(System.Object)">
            <summary>지정된 System.Object가 현재 개체와 동일한지 여부를 판별합니다.</summary>
            <param name="obj">System.Object를 현재 알림&lt;T&gt;과 비교할 수 있습니다.</param>
            <returns>지정된 System.Object가 현재 알림&lt;T&gt;과 같으면 true, 그렇지 않으면 false입니다.</returns>
            <remarks>알림 동일성&lt;T&gt; 개체는 알림 종류, 값 또는 예외(해당하는 경우)를 비롯해 나타나는 관찰자 메시지 페이로드의 동일성에 기반합니다. 즉, 동일한 관찰자 메서드 호출을 나타내지 않더라도 두 알림&lt;T&gt; 개체가 동일할 수 있지만 종류는 동일하고 관측자 메소드에 전달되는 파라미터가 동일합니다. 두 알림&lt;T&gt; 개체가 동일한 관찰자 메서드 호출을 나타내는지 여부를 판별하기 원할 경우, 대신 Object.ReferenceEquals ID 동일성을 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept(System.IObserver{`0})">
            <summary>알림에 해당하는 관찰자의 메서드를 호출합니다.</summary>
            <param name="observer">알림을 호출하는 관찰자입니다.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept``1(System.Reactive.IObserver{`0,``0})">
            <summary>알림에 해당하는 관찰자의 메서드를 호출하고 생성된 결과를 반환합니다.</summary>
            <typeparam name="TResult">관찰자의 알림 처리기에서 반환된 결과 유형입니다.</typeparam>
            <param name="observer">알림을 호출하는 관찰자입니다.</param>
            <returns>관찰에 의해 생성된 결과입니다.</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>알림에 해당하는 대리자를 호출합니다.</summary>
            <param name="onNext">OnNext 알림을 호출하도록 위임합니다.</param>
            <param name="onError">OnError 알림을 호출하도록 위임합니다.</param>
            <param name="onCompleted">OnCompleted 알림을 호출하도록 위임합니다.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>알림에 해당하는 대리자를 호출하고 생성된 결과를 반환합니다.</summary>
            <typeparam name="TResult">알림 처리기 대리자에서 반환되는 결과 유형입니다.</typeparam>
            <param name="onNext">OnNext 알림을 호출하도록 위임합니다.</param>
            <param name="onError">OnError 알림을 호출하도록 위임합니다.</param>
            <param name="onCompleted">OnCompleted 알림을 호출하도록 위임합니다.</param>
            <returns>관찰에 의해 생성된 결과입니다.</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.ToObservable">
            <summary>즉각적인 스케줄러를 사용하여 단일 알림으로 관찰 가능한 시퀀스를 반환합니다.</summary>
            <returns>구독 시 알림의 동작을 표시하는 관찰 가능한 시퀀스입니다.</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.ToObservable(System.Reactive.Concurrency.IScheduler)">
            <summary>단일 알림으로 관찰 가능한 시퀀스를 반환합니다.</summary>
            <param name="scheduler">알림 호출을 보낼 스케줄러입니다.</param>
            <returns>구독 시 알림의 동작을 표시하는 관찰 가능한 시퀀스입니다.</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.Value">
            <summary>OnNext 알림의 값을 반환하거나 예외를 throw합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.HasValue">
            <summary>알림에 값이 있는지 여부를 나타내는 값을 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.Exception">
            <summary>OnError 알림 예외를 반환하거나 null을 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.Kind">
            <summary>표시되는 알림 종류를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Notification`1.OnNextNotification">
            <summary>관찰자에 대한 OnNext 알림을 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.#ctor(`0)">
            <summary>새 값에 대한 알림을 생성합니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.GetHashCode">
            <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Equals(System.Reactive.Notification{`0})">
            <summary>이 인스턴스와 지정된 개체가 동일한지 여부를 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.ToString">
            <summary>클래스의 문자열 표현을 반환합니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept(System.IObserver{`0})">
            <summary>알림에 해당하는 관찰자의 메서드를 호출합니다.</summary>
            <param name="observer">알림을 호출하는 관찰자입니다.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept``1(System.Reactive.IObserver{`0,``0})">
            <summary>알림에 해당하는 관찰자의 메서드를 호출하고 생성된 결과를 반환합니다.</summary>
            <param name="observer">알림을 호출하는 관찰자입니다.</param>
            <returns>관찰에 의해 생성된 결과입니다.</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>알림에 해당하는 대리자를 호출합니다.</summary>
            <param name="onNext">OnNext 알림을 호출하도록 위임합니다.</param>
            <param name="onError">OnError 알림을 호출하도록 위임합니다.</param>
            <param name="onCompleted">OnCompleted 알림을 호출하도록 위임합니다.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnNextNotification.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>알림에 해당하는 대리자를 호출하고 생성된 결과를 반환합니다.</summary>
            <param name="onNext">OnNext 알림을 호출하도록 위임합니다.</param>
            <param name="onError">OnError 알림을 호출하도록 위임합니다.</param>
            <param name="onCompleted">OnCompleted 알림을 호출하도록 위임합니다.</param>
            <returns>관찰에 의해 생성된 결과입니다.</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.Value">
            <summary>OnNext 알림의 값을 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.Exception">
            <summary>null을 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.HasValue">
            <summary>true를 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnNextNotification.Kind">
            <summary>NotificationKind.OnNext를 반환합니다.</summary>
        </member>
        <member name="T:System.Reactive.Notification`1.OnErrorNotification">
            <summary>관찰자에 대한 OnError 알림을 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.#ctor(System.Exception)">
            <summary>예외에 대한 알림을 생성합니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.GetHashCode">
            <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Equals(System.Reactive.Notification{`0})">
            <summary>이 인스턴스와 다른 인스턴스가 동일한지 여부를 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.ToString">
            <summary>클래스의 문자열 표현을 반환합니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept(System.IObserver{`0})">
            <summary>알림에 해당하는 관찰자의 메서드를 호출합니다.</summary>
            <param name="observer">알림을 호출하는 관찰자입니다.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept``1(System.Reactive.IObserver{`0,``0})">
            <summary>알림에 해당하는 관찰자의 메서드를 호출하고 생성된 결과를 반환합니다.</summary>
            <param name="observer">알림을 호출하는 관찰자입니다.</param>
            <returns>관찰에 의해 생성된 결과입니다.</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>알림에 해당하는 대리자를 호출합니다.</summary>
            <param name="onNext">OnNext 알림을 호출하도록 위임합니다.</param>
            <param name="onError">OnError 알림을 호출하도록 위임합니다.</param>
            <param name="onCompleted">OnCompleted 알림을 호출하도록 위임합니다.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnErrorNotification.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>알림에 해당하는 대리자를 호출하고 생성된 결과를 반환합니다.</summary>
            <param name="onNext">OnNext 알림을 호출하도록 위임합니다.</param>
            <param name="onError">OnError 알림을 호출하도록 위임합니다.</param>
            <param name="onCompleted">OnCompleted 알림을 호출하도록 위임합니다.</param>
            <returns>관찰에 의해 생성된 결과입니다.</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.Value">
            <summary>예외를 throw합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.Exception">
            <summary>예외를 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.HasValue">
            <summary>False를 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnErrorNotification.Kind">
            <summary>NotificationKind.OnError를 반환합니다.</summary>
        </member>
        <member name="T:System.Reactive.Notification`1.OnCompletedNotification">
            <summary>관찰자에 대한 OnCompleted 알림을 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.#ctor">
            <summary>시퀀스의 끝에 대한 알림을 생성합니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.GetHashCode">
            <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Equals(System.Reactive.Notification{`0})">
            <summary>이 인스턴스와 다른 인스턴스가 동일한지 여부를 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.ToString">
            <summary>클래스의 문자열 표현을 반환합니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept(System.IObserver{`0})">
            <summary>알림에 해당하는 관찰자의 메서드를 호출합니다.</summary>
            <param name="observer">알림을 호출하는 관찰자입니다.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept``1(System.Reactive.IObserver{`0,``0})">
            <summary>알림에 해당하는 관찰자의 메서드를 호출하고 생성된 결과를 반환합니다.</summary>
            <param name="observer">알림을 호출하는 관찰자입니다.</param>
            <returns>관찰에 의해 생성된 결과입니다.</returns>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>알림에 해당하는 대리자를 호출합니다.</summary>
            <param name="onNext">OnNext 알림을 호출하도록 위임합니다.</param>
            <param name="onError">OnError 알림을 호출하도록 위임합니다.</param>
            <param name="onCompleted">OnCompleted 알림을 호출하도록 위임합니다.</param>
        </member>
        <member name="M:System.Reactive.Notification`1.OnCompletedNotification.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
            <summary>알림에 해당하는 대리자를 호출하고 생성된 결과를 반환합니다.</summary>
            <param name="onNext">OnNext 알림을 호출하도록 위임합니다.</param>
            <param name="onError">OnError 알림을 호출하도록 위임합니다.</param>
            <param name="onCompleted">OnCompleted 알림을 호출하도록 위임합니다.</param>
            <returns>관찰에 의해 생성된 결과입니다.</returns>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Value">
            <summary>InvalidOperationException를 throw합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Exception">
            <summary>null을 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.HasValue">
            <summary>False를 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Kind">
            <summary>NotificationKind.OnCompleted를 반환합니다.</summary>
        </member>
        <member name="T:System.Reactive.Notification">
            <summary>알림을 생성하기 위한 정적 메서드 집합을 제공합니다.</summary>
        </member>
        <member name="M:System.Reactive.Notification.CreateOnNext``1(``0)">
            <summary>관찰자에게 OnNext 알림을 나타내는 개체를 만듭니다.</summary>
            <typeparam name="T">관찰자가 수신한 요소의 유형입니다. 알림을 관찰 가능한 시퀀스로 비구체화하면 이 형식이 시퀀스의 요소 형식으로 사용됩니다.</typeparam>
            <param name="value">알림에 포함된 값입니다.</param>
            <returns>값을 포함하는 OnNext 알림입니다.</returns>
        </member>
        <member name="M:System.Reactive.Notification.CreateOnError``1(System.Exception)">
            <summary>관찰자에게 OnError 알림을 나타내는 개체를 만듭니다.</summary>
            <typeparam name="T">관찰자가 수신한 요소의 유형입니다. 알림을 관찰 가능한 시퀀스로 비구체화하면 이 형식이 시퀀스의 요소 형식으로 사용됩니다.</typeparam>
            <param name="error">알림에 포함된 예외입니다.</param>
            <returns>예외가 포함된 OnError 알림입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="error"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Notification.CreateOnCompleted``1">
            <summary>관찰자에게 OnCompleted 알림을 나타내는 개체를 만듭니다.</summary>
            <typeparam name="T">관찰자가 수신한 요소의 유형입니다. 알림을 관찰 가능한 시퀀스로 비구체화하면 이 형식이 시퀀스의 요소 형식으로 사용됩니다.</typeparam>
            <returns>OnCompleted 알림입니다.</returns>
        </member>
        <member name="T:System.Reactive.Unit">
            <summary>단일 값을 가진 형식을 나타냅니다. 이 형식은 종종 보이드 반환 메서드(C#) 또는 하위 프로시저(Visual Basic)의 성공적인 완료를 나타내는 데 사용됩니다.</summary>
        </member>
        <member name="M:System.Reactive.Unit.Equals(System.Reactive.Unit)">
            <summary>지정된 단위 값이 현재 값과 동일한지 여부를 결정합니다. 단위에는 단일 값이 있으므로 항상 true를 반환합니다.</summary>
            <param name="other">현재 단위 값과 비교할 개체입니다.</param>
            <returns>단위에는 단일 값이 있으므로 항상 true를 반환합니다.</returns>
        </member>
        <member name="M:System.Reactive.Unit.Equals(System.Object)">
            <summary>지정된 System.Object가 현재 단위와 동일한지 여부를 결정합니다.</summary>
            <param name="obj">현재 단위와 비교할 System.Object입니다.</param>
            <returns>지정된 System.Object가 단위 값인 경우 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:System.Reactive.Unit.GetHashCode">
            <summary>현재 단위 값에 대한 해시 코드를 반환합니다.</summary>
            <returns>현재 단위 값에 대한 해시 코드입니다.</returns>
        </member>
        <member name="M:System.Reactive.Unit.ToString">
            <summary>현재 단위 값의 문자열 표현을 반환합니다.</summary>
            <returns>현재 단위 값의 문자열 표현입니다.</returns>
        </member>
        <member name="M:System.Reactive.Unit.op_Equality(System.Reactive.Unit,System.Reactive.Unit)">
            <summary>지정된 두 단위 값이 같은지 여부를 결정합니다. 단위에는 단일 값이 있으므로 항상 true를 반환합니다.</summary>
            <param name="first">비교할 첫 번째 단위 값입니다.</param>
            <param name="second">비교할 두 번째 단위 값입니다.</param>
            <returns>단위에는 단일 값이 있으므로 항상 true를 반환합니다.</returns>
        </member>
        <member name="M:System.Reactive.Unit.op_Inequality(System.Reactive.Unit,System.Reactive.Unit)">
            <summary>지정된 두 단위 값이 같지 않은지 여부를 결정합니다. 단위에는 단일 값이 있으므로 항상 false를 반환합니다.</summary>
            <param name="first">비교할 첫 번째 단위 값입니다.</param>
            <param name="second">비교할 두 번째 단위 값입니다.</param>
            <returns>단위에는 단일 값이 있으므로 항상 false를 반환합니다.</returns>
        </member>
        <member name="P:System.Reactive.Unit.Default">
            <summary>단일 단위 값을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Strings_Core">
            <summary>국부화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.ResourceManager">
            <summary>이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.Culture">
            <summary>이 강력하게 형식이 지정된 리소스 클래스를 사용하는 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을 재정의합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.CANT_OBTAIN_SCHEDULER">
            <summary>스케줄러 사용과 유사한 국부화된 문자열을 찾습니다. {0} 속성은 API 표면의 리팩터링 및 플랫폼별 종속성 제거로 인해 더 이상 지원되지 않습니다. 대상 플랫폼에 System.Reactive.PlatformServices를 포함하고 대신 {0}스케줄러 유형을 사용하세요.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.COMPLETED_NO_VALUE">
            <summary>“OnCompleted 알림에는 값이 없습니다”와 유사한 국부화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.DISPOSABLE_ALREADY_ASSIGNED">
            <summary>“일회용은 이미 할당되었습니다”와 유사한 국부화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.FAILED_CLOCK_MONITORING">
            <summary>“시스템 클럭 변경 모니터링을 시작하지 못했습니다”와 유사한 국부화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.HEAP_EMPTY">
            <summary>“힙이 비어 있습니다”와 유사한 국부화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.REENTRANCY_DETECTED">
            <summary>“재진입이 감지되었습니다”와 유사한 국부화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.OBSERVER_TERMINATED">
            <summary>“관찰자가 이미 종료되었습니다”와 유사한 국부화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Core.SCHEDULER_OPERATION_ALREADY_AWAITED">
            <summary>“이 스케줄러 작업을 이미 기다리고 있었습니다”와 유사한 국부화된 문자열을 찾습니다.</summary>
        </member>
    </members>
</doc>