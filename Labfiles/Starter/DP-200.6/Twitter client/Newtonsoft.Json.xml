<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Newtonsoft.Json</name>
    </assembly>
    <members>
        <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
            <summary>BSON Oid(개체 ID)를 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>Oid의 값을 가져오거나 설정합니다.</summary>
            <value>Oid의 값입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">Oid 값입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonReader">
            <summary>직렬화된 JSON 데이터에 대한 캐시되지 않은 정방향 전용 빠른 액세스를 제공하는 판독기를 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>이진 데이터 읽기가 잘못된 Json.NET 3.5 작성 바이너리와 호환되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>이진 데이터 읽기가 잘못된 Json.NET 3.5 작성 바이너리와 호환되는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>루트 개체를 JSON 배열로 읽을지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>루트 개체를 JSON 배열로 읽으면 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>BSON의 <see cref="T:System.DateTime"/> 값을 판독할 때 사용하는을(를) 가져오거나 설정합니다.</summary>
            <value>BSON의 <see cref="T:System.DateTime"/> 값을 판독할 때 사용하는 <see cref="T:System.DateTimeKind" />입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonReader"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="stream">스트림입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonReader"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="reader">판독기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonReader"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="stream">스트림입니다.</param>
            <param name="readRootValueAsArray"><c>true</c>로 설정하면 루트 개체가 JSON 배열로 판독됩니다.</param>
            <param name="dateTimeKindHandling">BSON의 <see cref="T:System.DateTime"/> 값을 판독할 때 사용하는 <see cref="T:System.DateTimeKind" />입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonReader"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="reader">판독기입니다.</param>
            <param name="readRootValueAsArray"><c>true</c>로 설정하면 루트 개체가 JSON 배열로 판독됩니다.</param>
            <param name="dateTimeKindHandling">BSON의 <see cref="T:System.DateTime"/> 값을 판독할 때 사용하는 <see cref="T:System.DateTimeKind" />입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>스트림에서 다음 JSON 토큰을 읽습니다.</summary>
            <returns>다음 토큰을 성공적으로 읽은 경우 <c>true</c> 입니다. 읽을 토큰이 더 이상 없는 경우 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
            <summary><see cref="T:Newtonsoft.Json.JsonReader.State"/>을(를) 닫힘으로 변경합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonWriter">
            <summary>JSON 데이터를 빠르고, 캐시되지 않고, 전달 전용으로 생성하는 방법을 제공하는 작성자를 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>BSON에 <see cref="T:System.DateTimeKind" /> 값을 쓸 때 사용하는을 가져오거나 설정합니다. <see cref="F:System.DateTimeKind.Unspecified" />으로 설정되면 변환이 발생하지 않습니다.</summary>
            <value>BSON에 <see cref="T:System.DateTime"/> 값을 작성할 때 사용하는 <see cref="T:System.DateTimeKind" />입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonWriter"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="stream">스트림입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary><see cref="T:Newtonsoft.Json.Bson.BsonWriter"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="writer">작성기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>버퍼에 있는 모든 것을 기본 스트림으로 플러시하고 기본 스트림을 플러시합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>끝을 작성합니다.</summary>
            <param name="token">토큰입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>지정된 텍스트를 포함하는 주석 <code>/*...*/을</code>작성합니다.</summary>
            <param name="text">주석 안에 배치할 텍스트입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>지정된 이름으로 생성자의 시작을 작성합니다.</summary>
            <param name="name">생성자의 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>원시 JSON을 작성합니다.</summary>
            <param name="json">작성할 원시 JSON입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>값이 예상되는 원시 JSON을 작성하고 작성자의 상태를 업데이트합니다.</summary>
            <param name="json">작성할 원시 JSON입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>JSON 배열의 시작을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>JSON 개체의 시작 부분을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>JSON 개체에 이름/값 쌍의 속성 이름을 작성합니다.</summary>
            <param name="name">속성의 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>이 스트림과 기본 스트림을 닫습니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary><see cref="T:System.Object"/>값을 작성합니다. 값을 단일 JSON 토큰으로 작성할 수 없는 경우 오류가 발생합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Object"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>null 값을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>정의되지 않은 값을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary><see cref="T:System.String"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.String"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary><see cref="T:System.Int32"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int32"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary><see cref="T:System.UInt32"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt32"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary><see cref="T:System.Int64"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int64"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary><see cref="T:System.UInt64"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt64"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary><see cref="T:System.Single"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Single"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary><see cref="T:System.Double"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Double"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary><see cref="T:System.Boolean"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Boolean"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary><see cref="T:System.Int16"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int16"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary><see cref="T:System.UInt16"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt16"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary><see cref="T:System.Char"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Char"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary><see cref="T:System.Byte"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Byte"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary><see cref="T:System.SByte"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.SByte"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary><see cref="T:System.Decimal"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Decimal"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary><see cref="T:System.DateTime"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.DateTime"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary><see cref="T:System.DateTimeOffset"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.DateTimeOffset"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary><see cref="T:System.Byte"/>[] 값을 작성합니다.</summary>
            <param name="value"><see cref="T:System.Byte"/>작성할 <see cref="T:System.Byte"/>[] 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary><see cref="T:System.Guid"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Guid"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary><see cref="T:System.TimeSpan"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.TimeSpan"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary><see cref="T:System.Uri"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Uri"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>BSON 개체 ID를 나타내는 <see cref="T:System.Byte"/>[] 값을 작성합니다.</summary>
            <param name="value">작성할 개체 ID 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>BSON 정규식을 작성합니다.</summary>
            <param name="pattern">정규식 패턴입니다.</param>
            <param name="options">정규식 옵션입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.ConstructorHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에서 역직렬화 하는 동안 개체를 초기화할 때 생성자가 사용되는 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
            <summary>먼저 공용 기본 생성자를 사용한 다음 매개 변수화된 단일 생성자, 비공용 기본 생성자로 대체합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>Json.NET은 매개 변수화된 생성자로 대체하기 전에 비공용 기본 생성자를 사용합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
            <summary>기본 64 문자열 값에서/으로 이진 값을 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>JSON 및 BSON에서 <see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/>을(를) 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>사용자 지정 개체 만들기</summary>
            <typeparam name="T">변환할 개체 유형입니다.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>그런 다음 직렬화기에 의해 채워질 개체를 만듭니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>만들어진 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>이 <see cref="T:Newtonsoft.Json.JsonConverter"/>이(가) JSON을 작성할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>이 <see cref="T:Newtonsoft.Json.JsonConverter"/>이(가) JSON을 작성할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
            <summary>JSON 측에서 <see cref="T:System.Data.DataSet"/>을(를) 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 값 형식을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="valueType">값의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 값 형식을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
            <summary>JSON 측에서 <see cref="T:System.Data.DataTable"/>을(를) 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 값 형식을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="valueType">값의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 값 형식을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>JSON에서/으로 <see cref="T:System.DateTime"/>를 변환하기 위한 기본 클래스를 제공합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
            <summary>F# 구별된 공용 구조체 형식을 JSON에서 또는 JSON으로 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
            <summary>엔터티 프레임워크 EntityKey를 JSON에서 또는 JSON으로 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
            <summary>ExpandoObject를 JSON에서 또는 JSON으로 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>이 <see cref="T:Newtonsoft.Json.JsonConverter"/>이(가) JSON을 작성할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>이 <see cref="T:Newtonsoft.Json.JsonConverter"/>이(가) JSON을 작성할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>ISO 8601 날짜 형식(예: 2008-04-12T12:53Z)에서/으로  <see cref="T:System.DateTime"/>를 변환합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>JSON에서 또는 JSON으로 날짜를 변환할 때 사용되는 날짜 시간 스타일을 가져오거나 설정합니다.</summary>
            <value>JSON에서 또는 JSON으로 날짜를 변환할 때 사용되는 날짜 시간 스타일입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>JSON에서 또는 JSON으로 날짜를 변환할 때 사용되는 날짜 시간 형식을 가져오거나 설정합니다.</summary>
            <value>JSON에서 또는 JSON으로 날짜를 변환할 때 사용되는 날짜 시간 형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>JSON에서 또는 JSON으로 날짜를 변환할 때 사용되는 문화권을 가져오거나 설정합니다.</summary>
            <value>JSON에서 또는 JSON으로 날짜를 변환할 때 사용되는 문화권입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>JavaScript 날짜 생성자(예 : 새 날짜(52231943))에서/로 <see cref="T:System.DateTime"/>를 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">변환되는 JSON의 기존 속성 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>JSON 측에서 <see cref="T:System.Collections.Generic.KeyValuePair`2"/>을(를) 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.RegexConverter">
            <summary>JSON 및 BSON에서 <see cref="T:System.Text.RegularExpressions.Regex"/>을(를) 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>이름 문자열 값에서/으로 <see cref="T:System.Enum"/>를 변환합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>작성된 열거형 텍스트가 카멜 케이스를 사용해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>작성된 열거형 텍스트가 카멜 케이스가 될 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>정수 값이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>정수가 허용되는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary><see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="camelCaseText">작성된 열거형 텍스트가 카멜 케이스가 될 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.VersionConverter">
            <summary>문자열에서 또는 문자열로 <see cref="T:System.Version"/>를 변환합니다(예: &quot;1.2.3.4&quot;).</summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">변환되는 JSON의 기존 속성 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>JSON에서 또는 JSON으로 XML을 변환합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>JSON 구조에 여러 루트 요소가 있는 경우 XML로 역직렬화할 때 삽입할 루트 요소의 이름을 가져오거나 설정합니다.</summary>
            <value>역직렬화 루트 요소의 이름입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>Json.NET 배열 특성을 작성할지 여부를 나타내는 플래그를 가져오거나 설정합니다. 이 특성은 작성된 XML을 JSON으로 다시 변환할 때 배열을 보존하는 데 도움이 됩니다.</summary>
            <value>배열 특성을 XML에 작성하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>루트 JSON 개체를 작성할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>JSON 루트 개체를 생략하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>attributeName이 네임스페이스 특성인지 확인합니다.</summary>
            <param name="attributeName">테스트할 특성 이름입니다.</param>
            <param name="prefix">테스트할 특성이 하나 있는 경우 특성 이름 접두사입니다. 그렇지 않으면 빈 문자열입니다.</param>
            <returns>특성 이름이 네임스페이스 특성에 대한 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 값 형식을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="valueType">값의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 값 형식을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.FloatParseHandling">
            <summary>JSON 텍스트를 읽을 때 부동점 번호(예: 1.0 및 9.9)를 구문 분석하는 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
            <summary>부동 점 번호는 <see cref="F:Newtonsoft.Json.FloatParseHandling.Double"/>(으)로 구문 분석됩니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>부동 점 번호는 <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal"/>(으)로 구문 분석됩니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.DateFormatHandling">
            <summary>JSON 텍스트를 작성할 때 날짜 형식 지정 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>날짜는 ISO 8601 형식으로 작성됩니다(예: &quot;2012-03-21T05:40Z&quot;).</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>날짜는 Microsoft JSON 형식으로 작성됩니다(예: &quot;\/Date(1198908717056)\/&quot;).</summary>
        </member>
        <member name="T:Newtonsoft.Json.DateParseHandling">
            <summary>&quot;\/Date(1198908717056)\/&quot;및 &quot;2012-03-21T05:40Z&quot;와 같은 날짜 형식의 문자열이 JSON 텍스트를 읽을 때 구문 분석되는 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.None">
            <summary>날짜 형식의 문자열은 날짜 형식으로 구문 분석되지 않으며 문자열로 읽습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>날짜 형식의 문자열(예: &quot;\/Date(1198908717056)\/&quot;와 &quot;2012-03-21T05:40Z&quot;)은 <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime"/>(으)로 구문 분석됩니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>날짜 형식의 문자열(예: &quot;\/Date(1198908717056)\/&quot;와 &quot;2012-03-21T05:40Z&quot;)은 <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset"/>(으)로 구문 분석됩니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
            <summary>문자열과 <see cref="T:System.DateTime"/> 간에 변환할 때 시간 값을 처리하는 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>현지 시간으로 처리합니다. <see cref="T:System.DateTime"/> 개체가 협정 세계시(UTC)를 나타내는 경우 현지 시간으로 변환됩니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>UTC로 처리합니다. <see cref="T:System.DateTime"/> 개체가 현지 시간을 나타내는 경우 UTC로 변환됩니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary><see cref="T:System.DateTime"/>가 문자열로 변환되는 경우 현지 시간으로 처리합니다. 문자열을 <see cref="T:System.DateTime"/>(으)로 변환하는 경우 표준 시간대가 지정되면 현지 시간으로 변환합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>표준 시간대 정보는 변환할 때 보존되어야 합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.DefaultValueHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에 대한 기본값 처리 옵션을 지정합니다.</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" /> <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" /></example>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>개체를 직렬화할 때 멤버 값이 멤버의 기본값과 동일한 멤버를 포함합니다. 포함된 멤버는 JSON에 기록됩니다. 역직렬화할 때 아무런 효과가 없습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>JSON에 기록되지 않도록 개체를 직렬화할 때 멤버 값이 멤버의 기본값과 동일한 멤버를 무시합니다. 이 옵션은 모든 기본값(예: 개체 및 null 형식에 대한 <c>null</c>, 정수, 소수점 및 부동 소수점 수의 경우 <c>0</c>, 부울의 경우 <c>false</c>)을 무시합니다. 무시된 기본값은 <see cref="T:System.ComponentModel.DefaultValueAttribute"/>를 속성에 배치하여 변경할 수 있습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>기본값이 있지만 JSON이 없는 멤버는 역직렬화할 때 기본값으로 설정됩니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>개체를 직렬화할 때 멤버 값이 멤버의 기본값과 동일한 멤버를 무시하고 멤버를 역직렬화할 때 멤버를 기본값으로 설정합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatFormatHandling">
            <summary>특수 부동 소수점 수(예: <see cref="F:System.Double.NaN"/> <see cref="F:System.Double.PositiveInfinity"/> 및 <see cref="F:System.Double.NegativeInfinity"/> w/ <see cref="T:Newtonsoft.Json.JsonWriter"/>)를 작성할 때 부동 형식 처리 옵션을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
            <summary>JSON에서 특수 부동 소수점 값을 문자열로 작성합니다(예: &quot;NaN&quot;, &quot;Infinity&quot;, &quot;-Infinity&quot;).</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>JSON에서 특수 부동 소수점 값을 기호로 작성합니다(예: NaN, Infinity, -Infinity). 이렇게 하면 유효하지 않은 JSON이 생성됩니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>특수 부동 소수점 값을 JSON에서 속성의 기본값(예: <see cref="T:System.Double"/> 속성의 경우 0.0, <see cref="T:System.Nullable`1"/> 속성에 경우 null)으로 씁니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary><see cref="T:Newtonsoft.Json.JsonTextWriter"/>에 대한 서식 옵션을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>특별한 서식이 적용되지 않습니다. 이것이 기본값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary><see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation"/> 및 <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar"/> 설정에 따라 하위 개체를 들여쓰기합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.IArrayPool`1">
            <summary>풀된 배열을 사용하기 위한 인터페이스를 제공합니다.</summary>
            <typeparam name="T">배열 형식 콘텐츠입니다.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>풀에서 배열을 빌려옵니다. 이 배열은 더 이상 필요하지 않을 때 반환되어야 합니다.</summary>
            <param name="minimumLength">배열의 최소 필수 길이입니다. 반환된 배열이 더 길 수 있습니다.</param>
            <returns>풀에서 빌린 배열입니다. 이 배열은 더 이상 필요하지 않을 때 반환되어야 합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Return(`0[])">
            <summary>배열을 풀로 반환합니다.</summary>
            <param name="array">반환 중인 배열입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.IJsonLineInfo">
            <summary>클래스가 회선 및 위치 정보를 반환할 수 있도록 하는 인터페이스를 제공합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>클래스가 줄 정보를 반환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <returns>LineNumber 및 LinePosition을 제공할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>현재 줄 번호를 가져옵니다.</summary>
            <value>사용할 수 있는 줄 정보가 없는 경우 현재 줄 번호 또는 0(예: HasLineInfo는 false를 반환함).</value>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>현재 줄 위치를 가져옵니다.</summary>
            <value>사용할 수 있는 줄 정보가 없는 경우 현재 줄 위치 또는 0(예: HasLineInfo는 false를 반환함).</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonArrayAttribute">
            <summary>컬렉션을 직렬화하는 방법을 <see cref="T:Newtonsoft.Json.JsonSerializer"/>에 지시합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>컬렉션에서 null 항목이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>null 항목이 컬렉션에서 허용되는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonArrayAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>배열에 null 항목이 포함될 수 있는지 여부를 나타내는 플래그로 <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="allowNullItems">배열에 null 항목이 포함될 수 있는지 여부를 나타내는 플래그입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary><see cref="T:Newtonsoft.Json.JsonArrayAttribute"/>지정된 컨테이너 ID를 통해 <see cref="T:Newtonsoft.Json.JsonArrayAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="id">컨테이너 ID입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
            <summary>해당 개체를 역직렬화할 때 지정된 생성자를 사용하도록 <see cref="T:Newtonsoft.Json.JsonSerializer"/>에 설명합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonContainerAttribute">
            <summary>개체를 직렬화하는 방법을 <see cref="T:Newtonsoft.Json.JsonSerializer"/>에 설명합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>ID를 가져오거나 설정합니다.</summary>
            <value>ID입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>제목을 가져오거나 설정합니다.</summary>
            <value>제목입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>설명을 가져오거나 설정합니다.</summary>
            <value>설명입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>컬렉션의 항목 변환기를 가져옵니다.</summary>
            <value>컬렉션의 항목 변환기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>ItemConverterType에서 설명한 <see cref="T:Newtonsoft.Json.JsonConverter"/>을(를) 생성할 때 사용할 매개 변수 목록입니다. null이면 기본 생성자가 사용됩니다. Null이 아닌 경우, 숫자, 순서 및 이러한 매개 변수의 유형과 정확히 일치하는 <see cref="T:Newtonsoft.Json.JsonConverter"/>에 지정된 생성자가 있어야 합니다.</summary>
            <example>[JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
            <summary><see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>중 <see cref="T:System.Type"/>을(를) 가져오거나 설정합니다.</summary>
            <value><see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>의 <see cref="T:System.Type"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>NamingStrategyType에 의해 설명된 <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>을(를)생성할 때 사용할 매개 변수 목록입니다. null이면 기본 생성자가 사용됩니다. Null이 아닌 경우, 숫자, 순서 및 이러한 매개 변수의 유형과 정확히 일치하는 <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>에 지정된 생성자가 있어야 합니다.</summary>
            <example>[JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>개체 참조를 보존할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>개체 참조를 유지하면 <c>true</c>, 그렇지 않으면 <c>false</c>입니다. 기본값은 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>컬렉션의 항목 참조를 보존할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>컬렉션의 항목 개체 참조를 유지하면 <c>true</c>, 그렇지 않으면 <c>false</c>입니다. 기본값은 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>컬렉션 항목을 직렬화할 때 사용되는 참조 루프 처리를 가져오거나 설정합니다.</summary>
            <value>참조 루프 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>컬렉션 항목을 직렬화할 때 사용되는 형식 이름 처리를 가져오거나 설정합니다.</summary>
            <value>형식 이름 처리입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonContainerAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary><see cref="T:Newtonsoft.Json.JsonContainerAttribute"/>지정된 컨테이너 ID를 통해 <see cref="T:Newtonsoft.Json.JsonContainerAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="id">컨테이너 ID입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConvert">
            <summary>공통 언어 런타임 형식과 JSON 형식 간에 변환하는 메서드를 제공합니다.</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" /></example>
        </member>
        <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>기본 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을 만드는 함수를 가져오거나 설정합니다. 기본 설정은 <see cref="T:Newtonsoft.Json.JsonConvert"/>, <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1"/>, <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)"/> 및 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 직렬화 메서드에서 자동으로 사용됩니다. 기본 설정을 사용하지 않고 직렬화하려면 <see cref="T:Newtonsoft.Json.JsonSerializer"/>으로 <see cref="M:Newtonsoft.Json.JsonSerializer.Create"/>을 만듭니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.True">
            <summary>문자열로 JavaScript의 부울 값 true를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.False">
            <summary>문자열로 JavaScript의 부울 값 false를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Null">
            <summary>문자열로 JavaScript의 null을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
            <summary>문자열로 JavaScript의 undefined를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>문자열로 JavaScript의 양의 무한대를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>문자열로 JavaScript의 음의 무한대를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NaN">
            <summary>문자열로 JavaScript의 NaN을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary><see cref="T:System.DateTime"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.DateTime"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.DateFormatHandling"/>을 사용하여 <see cref="T:Newtonsoft.Json.DateFormatHandling"/>을 JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <param name="format">날짜가 변환되는 형식입니다.</param>
            <param name="timeZoneHandling">날짜가 문자열로 변환될 때 표준 시간대 처리입니다.</param>
            <returns><see cref="T:System.DateTime"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary><see cref="T:System.DateTimeOffset"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.DateTimeOffset"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.DateFormatHandling"/>을 사용하여 <see cref="T:Newtonsoft.Json.DateFormatHandling"/>을 JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <param name="format">날짜가 변환되는 형식입니다.</param>
            <returns><see cref="T:System.DateTimeOffset"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary><see cref="T:System.Boolean"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Boolean"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary><see cref="T:System.Char"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Char"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary><see cref="T:System.Enum"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Enum"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary><see cref="T:System.Int32"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Int32"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary><see cref="T:System.Int16"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Int16"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary><see cref="T:System.UInt16"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.UInt16"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary><see cref="T:System.UInt32"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.UInt32"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary><see cref="T:System.Int64"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Int64"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary><see cref="T:System.UInt64"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.UInt64"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary><see cref="T:System.Single"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Single"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary><see cref="T:System.Double"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Double"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary><see cref="T:System.Byte"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Byte"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary><see cref="T:System.SByte"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.SByte"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary><see cref="T:System.Decimal"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.SByte"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary><see cref="T:System.Guid"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Guid"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary><see cref="T:System.TimeSpan"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.TimeSpan"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary><see cref="T:System.Uri"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Uri"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary><see cref="T:System.String"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.String"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary><see cref="T:System.String"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <param name="delimiter">문자열 구분 기호 문자입니다.</param>
            <returns><see cref="T:System.String"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Newtonsoft.Json.StringEscapeHandling)">
            <summary><see cref="T:System.String"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <param name="delimiter">문자열 구분 기호 문자입니다.</param>
            <param name="stringEscapeHandling">문자열 이스케이프 처리입니다.</param>
            <returns><see cref="T:System.String"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary><see cref="T:System.Object"/>을(를) JSON 문자열 표현으로 변환합니다.</summary>
            <param name="value">변환할 값입니다.</param>
            <returns><see cref="T:System.Object"/>의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>지정된 개체를 JSON 문자열로 직렬화합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <returns>개체의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
            <summary>서식을 사용하여 지정된 개체를 JSON 문자열로 직렬화합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <returns>개체의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonConverter"/>의 컬렉션을 사용하여 지정된 개체를 JSON 문자열로 직렬화합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <param name="converters">직렬화하는 동안 사용되는 컬렉션 변환기입니다.</param>
            <returns>개체의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>서식 및 <see cref="T:Newtonsoft.Json.JsonConverter"/>의 컬렉션을 사용하여 지정된 개체를 JSON 문자열로 직렬화합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <param name="converters">직렬화하는 동안 사용되는 컬렉션 변환기입니다.</param>
            <returns>개체의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 지정된 개체를 JSON 문자열로 직렬화합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <param name="settings">개체를 직렬화하는 데 사용되는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <returns>개체의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>형식, 서식 및 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 지정된 개체를 JSON 문자열로 직렬화합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <param name="settings">개체를 직렬화하는 데 사용되는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <param name="type">직렬화되는 값의 형식입니다. 값 유형이 일치하지 않은 경우 형식 이름을 작성하기 위해 <see cref="T:Newtonsoft.Json.TypeNameHandling"/>이(가) Auto로 설정될 때 이 매개 변수가 사용됩니다. 형식 지정은 선택 사항입니다.</param>
            <returns>개체의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>서식 및 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 지정된 개체를 JSON 문자열로 직렬화합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <param name="settings">개체를 직렬화하는 데 사용되는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <returns>개체의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>형식, 서식 및 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 지정된 개체를 JSON 문자열로 직렬화합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <param name="settings">개체를 직렬화하는 데 사용되는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <param name="type">직렬화되는 값의 형식입니다. 값 유형이 일치하지 않은 경우 형식 이름을 작성하기 위해 <see cref="T:Newtonsoft.Json.TypeNameHandling"/>이(가) Auto로 설정될 때 이 매개 변수가 사용됩니다. 형식 지정은 선택 사항입니다.</param>
            <returns>개체의 JSON 문자열 표현입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
            <summary>지정된 개체를 JSON 문자열에 비동기적으로 직렬화합니다. 직렬화는 새 스레드에서 발생합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <returns>비동기 직렬화 작업을 나타내는 작업입니다. <c>TResult</c> 매개 변수의 값에는 개체의 JSON 문자열 표현이 포함됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)">
            <summary>서식을 사용하여 지정된 개체를 JSON 문자열에 비동기적으로 직렬화합니다. 직렬화는 새 스레드에서 발생합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <returns>비동기 직렬화 작업을 나타내는 작업입니다. <c>TResult</c> 매개 변수의 값에는 개체의 JSON 문자열 표현이 포함됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>서식 및 <see cref="T:Newtonsoft.Json.JsonConverter"/>의 컬렉션을 사용하여 지정된 개체를 JSON 문자열에 비동기적으로 직렬화합니다.  직렬화는 새 스레드에서 발생합니다.</summary>
            <param name="value">직렬화할 개체입니다.</param>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <param name="settings">개체를 직렬화하는 데 사용되는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <returns>비동기 직렬화 작업을 나타내는 작업입니다. <c>TResult</c> 매개 변수의 값에는 개체의 JSON 문자열 표현이 포함됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>JSON을 .NET 개체로 역직렬화합니다.</summary>
            <param name="value">직렬화하는 JSON입니다.</param>
            <returns>JSON 문자열에서 역직렬화된 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을 사용하여 JSON을 .NET 개체로 역직렬화합니다.</summary>
            <param name="value">직렬화하는 JSON입니다.</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>개체를 역직렬화하는 데 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <returns>JSON 문자열에서 역직렬화된 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>JSON을 지정된 .NET 유형으로 역직렬화합니다.</summary>
            <param name="value">직렬화하는 JSON입니다.</param>
            <param name="type"><see cref="T:System.Type"/>역직렬화되는 <see cref="T:System.Type"/> 개체입니다.</param>
            <returns>JSON 문자열에서 역직렬화된 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>JSON을 지정된 .NET 유형으로 역직렬화합니다.</summary>
            <typeparam name="T">직렬화할 개체의 형식입니다.</typeparam>
            <param name="value">직렬화하는 JSON입니다.</param>
            <returns>JSON 문자열에서 역직렬화된 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>JSON을 지정된 익명 유형으로 역직렬화합니다.</summary>
            <typeparam name="T">직렬화할 익명 형식입니다. 이는 일반적으로 지정할 수 없으며 매개 변수로 전달되는 익명 형식에서 추론해야 합니다.</typeparam>
            <param name="value">직렬화하는 JSON입니다.</param>
            <param name="anonymousTypeObject">익명 형식 개체입니다.</param>
            <returns>JSON 문자열에서 역직렬화된 익명 형식입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 JSON을 지정된 익명 유형으로 역직렬화합니다.</summary>
            <typeparam name="T">직렬화할 익명 형식입니다. 이는 일반적으로 지정할 수 없으며 매개 변수로 전달되는 익명 형식에서 추론해야 합니다.</typeparam>
            <param name="value">직렬화하는 JSON입니다.</param>
            <param name="anonymousTypeObject">익명 형식 개체입니다.</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>개체를 역직렬화하는 데 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <returns>JSON 문자열에서 역직렬화된 익명 형식입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonConverter"/>의 컬렉션을 사용하여 JSON을 지정된 .NET 형식으로 역직렬화합니다.</summary>
            <typeparam name="T">직렬화할 개체의 형식입니다.</typeparam>
            <param name="value">직렬화하는 JSON입니다.</param>
            <param name="converters">역직렬화하는 동안 사용할 변환기입니다.</param>
            <returns>JSON 문자열에서 역직렬화된 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 JSON을 지정된 .NET 유형으로 역직렬화합니다.</summary>
            <typeparam name="T">직렬화할 개체의 형식입니다.</typeparam>
            <param name="value">역직렬화할 개체입니다.</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>개체를 역직렬화하는 데 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <returns>JSON 문자열에서 역직렬화된 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonConverter"/>의 컬렉션을 사용하여 JSON을 지정된 .NET 형식으로 역직렬화합니다.</summary>
            <param name="value">직렬화하는 JSON입니다.</param>
            <param name="type">역직렬화할 개체의 형식입니다.</param>
            <param name="converters">역직렬화하는 동안 사용할 변환기입니다.</param>
            <returns>JSON 문자열에서 역직렬화된 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 JSON을 지정된 .NET 유형으로 역직렬화합니다.</summary>
            <param name="value">직렬화하는 JSON입니다.</param>
            <param name="type">직렬화할 개체의 형식입니다.</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>개체를 역직렬화하는 데 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <returns>JSON 문자열에서 역직렬화된 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
            <summary>비동기적으로 JSON을 지정된 .NET 유형으로 역직렬화합니다. 역직렬화는 새 스레드에서 발생합니다.</summary>
            <typeparam name="T">직렬화할 개체의 형식입니다.</typeparam>
            <param name="value">직렬화하는 JSON입니다.</param>
            <returns>비동기식 역직렬화 작업을 나타내는 작업입니다. <c>TResult</c> 매개 변수의 값에는 JSON 문자열의 역직렬화된 개체가 포함됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 JSON을 지정된 .NET 유형으로 비동기적으로 역직렬화합니다. 역직렬화는 새 스레드에서 발생합니다.</summary>
            <typeparam name="T">직렬화할 개체의 형식입니다.</typeparam>
            <param name="value">직렬화하는 JSON입니다.</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>개체를 역직렬화하는 데 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <returns>비동기식 역직렬화 작업을 나타내는 작업입니다. <c>TResult</c> 매개 변수의 값에는 JSON 문자열의 역직렬화된 개체가 포함됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
            <summary>비동기적으로 JSON을 지정된 .NET 유형으로 역직렬화합니다. 역직렬화는 새 스레드에서 발생합니다.</summary>
            <param name="value">직렬화하는 JSON입니다.</param>
            <returns>비동기식 역직렬화 작업을 나타내는 작업입니다. <c>TResult</c> 매개 변수의 값에는 JSON 문자열의 역직렬화된 개체가 포함됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 JSON을 지정된 .NET 유형으로 비동기적으로 역직렬화합니다. 역직렬화는 새 스레드에서 발생합니다.</summary>
            <param name="value">직렬화하는 JSON입니다.</param>
            <param name="type">직렬화할 개체의 형식입니다.</param>
            <param name="settings">개체를 역직렬화하는 데 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <returns>비동기식 역직렬화 작업을 나타내는 작업입니다. <c>TResult</c> 매개 변수의 값에는 JSON 문자열의 역직렬화된 개체가 포함됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>JSON 문자열의 값으로 개체를 채웁니다.</summary>
            <param name="value">값을 채우는 JSON입니다.</param>
            <param name="target">값을 채우는 대상 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을 사용하여 JSON 문자열의 값으로 개체를 채웁니다.</summary>
            <param name="value">값을 채우는 JSON입니다.</param>
            <param name="target">값을 채우는 대상 개체입니다.</param>
            <param name="settings">개체를 역직렬화하는 데 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 JSON 문자열의 값으로 개체를 비동기적으로 채웁니다.</summary>
            <param name="value">값을 채우는 JSON입니다.</param>
            <param name="target">값을 채우는 대상 개체입니다.</param>
            <param name="settings">개체를 역직렬화하는 데 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>입니다. null이면 기본 직렬화 설정이 사용됩니다.</param>
            <returns>비동기식 채움 작업을 나타내는 작업입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>XML 노드를 JSON 문자열로 직렬화합니다.</summary>
            <param name="node">직렬화할 노드입니다.</param>
            <returns>XmlNode의 JSON 문자열입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
            <summary>서식을 사용하여 XML 노드를 JSON 문자열로 직렬화합니다.</summary>
            <param name="node">직렬화할 노드입니다.</param>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <returns>XmlNode의 JSON 문자열입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>서식을 사용하여 XML 노드를 JSON 문자열로 직렬화하고 <paramref name="omitRootObject"/>가 <c>true</c>인 경우 루트 개체를 생략합니다.</summary>
            <param name="node">직렬화할 노드입니다.</param>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <param name="omitRootObject">루트 개체를 작성하는 것을 생략합니다.</param>
            <returns>XmlNode의 JSON 문자열입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>JSON 문자열에서 XmlNode를 역직렬화합니다.</summary>
            <param name="value">JSON 문자열입니다.</param>
            <returns>직렬화된 XmlNode입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary><paramref name="deserializeRootElementName"/>에서 지정한 루트 elment에 중첩된 JSON 문자열에서 XmlNode를 역직렬화합니다.</summary>
            <param name="value">JSON 문자열입니다.</param>
            <param name="deserializeRootElementName">역직렬화할 때 추가할 루트 요소의 이름입니다.</param>
            <returns>직렬화된 XmlNode입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary><paramref name="deserializeRootElementName"/>에서 지정한 루트 elment에 중첩된 JSON 문자열에서 XmlNode를 역직렬화하고 컬렉션에 대한 .NET 배열 특성을 작성합니다.</summary>
            <param name="value">JSON 문자열입니다.</param>
            <param name="deserializeRootElementName">역직렬화할 때 추가할 루트 요소의 이름입니다.</param>
            <param name="writeArrayAttribute">Json.NET 배열 특성을 작성할지 여부를 나타내는 플래그입니다. 이 특성은 작성된 XML을 JSON으로 다시 변환할 때 배열을 보존하는 데 도움이 됩니다.</param>
            <returns>직렬화된 XmlNode입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary><see cref="T:System.Xml.Linq.XNode"/>을(를) JSON 문자열로 직렬화합니다.</summary>
            <param name="node">JSON으로 변환할 노드입니다.</param>
            <returns>XNode의 JSON 문자열입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
            <summary>서식을 사용하여 <see cref="T:System.Xml.Linq.XNode"/>을(를) JSON 문자열로 직렬화합니다.</summary>
            <param name="node">JSON으로 변환할 노드입니다.</param>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <returns>XNode의 JSON 문자열입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>서식을 사용하여 <see cref="T:System.Xml.Linq.XNode"/>을(를) JSON 문자열로 직렬화하고 <paramref name="omitRootObject"/>가 <c>true</c>인 경우 루트 개체를 생략합니다.</summary>
            <param name="node">직렬화할 노드입니다.</param>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <param name="omitRootObject">루트 개체를 작성하는 것을 생략합니다.</param>
            <returns>XNode의 JSON 문자열입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary><see cref="T:System.Xml.Linq.XNode"/>을(를) JSON 문자열에서 직렬화합니다.</summary>
            <param name="value">JSON 문자열입니다.</param>
            <returns>역직렬화된 XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary><paramref name="deserializeRootElementName"/>에서 지정한 루트 elment에 중첩된 JSON 문자열에서 <see cref="T:System.Xml.Linq.XNode"/>을(를) 역직렬화합니다.</summary>
            <param name="value">JSON 문자열입니다.</param>
            <param name="deserializeRootElementName">역직렬화할 때 추가할 루트 요소의 이름입니다.</param>
            <returns>역직렬화된 XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary><paramref name="deserializeRootElementName"/>에서 지정한 루트 elment에 중첩된 JSON 문자열에서 <see cref="T:System.Xml.Linq.XNode"/>을(를) 역직렬화하고 컬렉션에 대한 .NET 배열 특성을 작성합니다.</summary>
            <param name="value">JSON 문자열입니다.</param>
            <param name="deserializeRootElementName">역직렬화할 때 추가할 루트 요소의 이름입니다.</param>
            <param name="writeArrayAttribute">Json.NET 배열 특성을 작성할지 여부를 나타내는 플래그입니다. 이 특성은 작성된 XML을 JSON으로 다시 변환할 때 배열을 보존하는 데 도움이 됩니다.</param>
            <returns>역직렬화된 XNode</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverter">
            <summary>JSON에서 JSON으로 개체를 변환합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 작성합니다.</summary>
            <param name="writer">작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체의 JSON 표현을 읽습니다.</summary>
            <param name="reader">판독할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType">개체의 형식입니다.</param>
            <param name="existingValue">판독한 개체의 기존 값입니다.</param>
            <param name="serializer">호출 직렬화기입니다.</param>
            <returns>개체 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>이 인스턴스가 지정된 개체 유형을 변환할 수 있는지 여부를 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>이 인스턴스가 지정된 개체 유형을 변환할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
            <summary>
            <para>JsonConverter에 의해 생성된 JSON의 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을 가져옵니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
            <returns>JsonConverter에 의해 생성된 JSON의 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
            <summary>이 <see cref="T:Newtonsoft.Json.JsonConverter"/>이(가) JSON을 판독할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>이 <see cref="T:Newtonsoft.Json.JsonConverter"/>이(가) JSON을 판독할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>이 <see cref="T:Newtonsoft.Json.JsonConverter"/>이(가) JSON을 작성할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>이 <see cref="T:Newtonsoft.Json.JsonConverter"/>이(가) JSON을 작성할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterAttribute">
            <summary>멤버 또는 클래스를 직렬화할 때 지정된 <see cref="T:Newtonsoft.Json.JsonSerializer"/>을 사용하도록 <see cref="T:Newtonsoft.Json.JsonConverter"/>에 설명합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary><see cref="T:System.Type"/>의 <see cref="T:Newtonsoft.Json.JsonConverter"/>을(를) 가져옵니다.</summary>
            <value><see cref="T:Newtonsoft.Json.JsonConverter"/>의 <see cref="T:System.Type"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
            <summary>ConverterType에 의해 설명된 <see cref="T:Newtonsoft.Json.JsonConverter"/>을(를)생성할 때 사용할 매개 변수 목록입니다. null이면 기본 생성자가 사용됩니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.JsonConverterAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="converterType"><see cref="T:Newtonsoft.Json.JsonConverter"/>의 유형입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary><see cref="T:Newtonsoft.Json.JsonConverterAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="converterType"><see cref="T:Newtonsoft.Json.JsonConverter"/>의 유형입니다.</param>
            <param name="converterParameters"><see cref="T:Newtonsoft.Json.JsonConverter"/>을(를) 생성할 때 사용할 매개 변수 목록입니다. null일 수 있습니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterCollection">
            <summary><see cref="T:Newtonsoft.Json.JsonConverter"/>의 컬렉션을 나타냅니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>컬렉션을 직렬화하는 방법을 <see cref="T:Newtonsoft.Json.JsonSerializer"/>에 지시합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary><see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/>지정된 컨테이너 ID를 통해 <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="id">컨테이너 ID입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonException">
            <summary>JSON 직렬화 또는 역직렬화 중에 오류가 발생할 때 발생하는 예외입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>지정된 오류 메시지와 함께 <see cref="T:Newtonsoft.Json.JsonException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="message">예외의 이유를 설명하는 오류 메시지입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>지정된 오류 메시지와 이 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:Newtonsoft.Json.JsonException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="message">예외의 이유를 설명하는 오류 메시지입니다.</param>
            <param name="innerException">내부 예외가 지정되지 않은 경우 현재 예외의 원인 또는 null 참조(Visual Basic의 없음)인 예외입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:Newtonsoft.Json.JsonException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="info">발생하는 예외에 대한 직렬화된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>입니다.</param>
            <param name="context">소스 또는 대상에 대한 컨텍스트 정보가 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext"/>입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 매개 변수는 null입니다.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">클래스 이름은 null이거나 <see cref="P:System.Exception.HResult"/>이(가) 제로(0)입니다.</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>클래스 멤버가 일치하지 않고 지정된 컬렉션에 일치하지 않는 속성을 역직렬화하고 직렬화하는 동안 값을 작성하도록 <see cref="T:Newtonsoft.Json.JsonSerializer"/>에 설명합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>개체를 직렬화할 때 확장 데이터를 쓸지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>개체를 직렬화할 때 확장 데이터를 쓰는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다. 기본값은 <c></c>true<c></c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>개체를 역직렬화할 때 확장 데이터를 읽을지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>개체를 역직렬화할 때 확장 데이터를 읽으면 <c>true</c>, 그렇지 않으면 <c>false</c>입니다. 기본값은 <c></c>true<c></c>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>공용 필드 또는 공용 읽기/쓰기 속성 값을 직렬화하지 않도록 <see cref="T:Newtonsoft.Json.JsonSerializer"/>에 설명합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonObjectAttribute">
            <summary>개체를 직렬화하는 방법을 <see cref="T:Newtonsoft.Json.JsonSerializer"/>에 설명합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>멤버 직렬화를 가져오거나 설정합니다.</summary>
            <value>멤버 직렬화입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>개체의 속성이 필요한지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>개체의 속성이 필요한지 여부를 나타내는 값입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
            <summary>지정된 멤버 직렬화를 통해 <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="memberSerialization">멤버 직렬화입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>지정된 컨테이너 ID를 통해 <see cref="T:Newtonsoft.Json.JsonObjectAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="id">컨테이너 ID입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
            <summary>항상 지정된 이름으로 멤버를 직렬화하도록 <see cref="T:Newtonsoft.Json.JsonSerializer"/>에 지시합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>속성의 컬렉션 항목을 직렬화할 때 사용되는 <see cref="T:Newtonsoft.Json.JsonConverter"/>을(를) 가져오거나 설정합니다.</summary>
            <value>컬렉션의 항목 <see cref="T:Newtonsoft.Json.JsonConverter"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>ItemConverterType에서 설명한 <see cref="T:Newtonsoft.Json.JsonConverter"/>을(를) 생성할 때 사용할 매개 변수 목록입니다. null이면 기본 생성자가 사용됩니다. Null이 아닌 경우, 숫자, 순서 및 이러한 매개 변수의 유형과 정확히 일치하는 <see cref="T:Newtonsoft.Json.JsonConverter"/>에 지정된 생성자가 있어야 합니다.</summary>
            <example>[JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary><see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>중 <see cref="T:System.Type"/>을(를) 가져오거나 설정합니다.</summary>
            <value><see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>의 <see cref="T:System.Type"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>NamingStrategyType에 의해 설명된 <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>을(를)생성할 때 사용할 매개 변수 목록입니다. null이면 기본 생성자가 사용됩니다. Null이 아닌 경우, 숫자, 순서 및 이러한 매개 변수의 유형과 정확히 일치하는 <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>에 지정된 생성자가 있어야 합니다.</summary>
            <example>[JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, &quot;Four&quot; })]</example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>이 속성을 직렬화할 때 사용되는 null 값 처리를 가져오거나 설정합니다.</summary>
            <value>Null 값 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>이 속성을 직렬화할 때 사용되는 기본값 처리를 가져오거나 설정합니다.</summary>
            <value>기본값 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>이 속성을 직렬화할 때 사용되는 참조 루프 처리를 가져오거나 설정합니다.</summary>
            <value>참조 루프 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>이 속성을 역직렬화할 때 사용되는 개체 만들기 처리를 가져오거나 설정합니다.</summary>
            <value>개체 만들기 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>이 속성을 직렬화할 때 사용되는 형식 이름 처리를 가져오거나 설정합니다.</summary>
            <value>형식 이름 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>이 속성의 값이 참조로 직렬화되는지 여부를 가져오거나 설정합니다.</summary>
            <value>이 속성의 값이 참조로 직렬화되는지 여부입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>멤버의 직렬화 순서를 가져오거나 설정합니다.</summary>
            <value>직렬화의 숫자 순서입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>이 속성이 필요한지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>이 속성이 필요한지 여부를 나타내는 값입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>속성의 이름을 가져오거나 설정합니다.</summary>
            <value>속성의 이름입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>속성의 컬렉션 항목을 직렬화할 때 사용되는 참조 루프 처리를 가져오거나 설정합니다.</summary>
            <value>컬렉션의 항목 참조 루프 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>속성의 컬렉션 항목을 직렬화할 때 사용되는 형식 이름 처리를 가져오거나 설정합니다.</summary>
            <value>컬렉션의 항목 유형 이름 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>이 속성의 컬렉션 항목이 참조로 직렬화되는지 여부를 가져오거나 설정합니다.</summary>
            <value>이 속성의 컬렉션 항목이 참조로 직렬화되는지 여부입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>지정된 이름으로 <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>직렬화된 JSON 데이터에 대한 캐시되지 않은 정방향 전용 빠른 액세스를 제공하는 판독기를 나타냅니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader.State">
            <summary>판독기의 상태를 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Start">
            <summary>Read 메서드가 호출되지 않았습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Complete">
            <summary>파일의 끝에 성공적으로 도달했습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Property">
            <summary>판독기는 속성에 있습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>판독기는 개체의 시작 부분에 있습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Object">
            <summary>판독기는 개체에 있습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>판독기는 배열의 시작 부분에 있습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Array">
            <summary>판독기는 배열에 있습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Closed">
            <summary>Close 메서드가 호출되었습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>판독기는 방금 값을 읽었습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>판독기는 생성자의 시작 부분에 있습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>생성자에 있는 판독기입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Error">
            <summary>읽기 작업이 계속되지 않도록 하는 오류가 발생했습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Finished">
            <summary>파일의 끝에 성공적으로 도달했습니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
            <summary>현재 판독기 상태를 가져옵니다.</summary>
            <value>현재 판독기 상태입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
            <summary>판독기가 닫혀있을 때 기본 스트림 또는 <see cref="T:System.IO.TextReader"/>을(를) 닫아야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>판독기가 닫혀있을 때 기본 스트림 또는 <see cref="T:System.IO.TextReader"/>을(를) 닫아야 하는 경우 true, 그렇지 않으면 false입니다. 기본값은 true입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>오류 없이 연속 스트림에서 여러 JSON 콘텐츠를 읽을 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>여러 JSON 콘텐츠 읽기를 지원하는 경우  true, 그렇지 않으면 false입니다. 기본값은 false입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>문자열의 값을 동봉하는 데 사용되는 따옴표 문자를 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>JSON을 읽을 때 <see cref="T:System.DateTime"/> 시간대가 처리되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>&quot;\/Date(1198908717056)\/&quot;및 &quot;2012-03-21T05:40Z&quot;와 같은 날짜 형식의 문자열이 JSON을 읽을 때 구문 분석되는 방법을 얻거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>JSON 텍스트를 읽을 때 부동점 번호(예: 1.0 및 9.9)를 구문 분석하는 방법을 얻거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>JSON을 읽을 때 사용자 지정 날짜 형식의 문자열이 구문 분석되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>JSON을 읽을 때 허용되는 최대 깊이를 얻거나 설정합니다. 이 깊이가 판독되면 <see cref="T:Newtonsoft.Json.JsonReaderException"/>이(가) 발생합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>현재 JSON 토큰의 형식을 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>현재 JSON 토큰의 텍스트 값을 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>현재 JSON 토큰에 대한 공통 언어 런타임(CLR) 형식을 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Depth">
            <summary>JSON 문서에서 현재 토큰의 깊이를 가져옵니다.</summary>
            <value>JSON 문서에서 현재 토큰의 깊이입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Path">
            <summary>현재 JSON 토큰의 경로를 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Culture">
            <summary>JSON을 읽을 때 사용되는 문화권을 얻거나 설정합니다. 기본값은 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor">
            <summary><see cref="T:System.IO.TextReader"/>이(가) 지정된 상태에서 <see cref="T:Newtonsoft.Json.JsonReader"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>스트림에서 다음 JSON 토큰을 읽습니다.</summary>
            <returns>다음 토큰을 성공적으로 읽은 경우 <c>true</c> 입니다. 읽을 토큰이 더 이상 없는 경우 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.String"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.String"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Byte"/>[](으)로 읽습니다.</summary>
            <returns><see cref="T:System.Byte"/>다음 JSON 토큰이 null인 경우 [] 또는 null 참조입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDouble">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBoolean">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Skip">
            <summary>현재 토큰의 하위 항목을 건너뜁니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
            <summary>현재 토큰을 설정합니다.</summary>
            <param name="newToken">새 토큰입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>현재 토큰과 값을 설정합니다.</summary>
            <param name="newToken">새 토큰입니다.</param>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>현재 토큰 유형을 기반으로 상태를 설정합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.System#IDisposable#Dispose">
            <summary>관리되지 않는 리소스의 해제, 릴리스 또는 재설정과 관련된 애플리케이션 정의 작업을 수행합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>관리되지 않는 릴리스 및 선택적으로 관리되는 리소스</summary>
            <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하는 것이 <c>true</c>, <c></c>관리되지 않는 리소스만 해제하면 <c>false</c>입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary><see cref="T:Newtonsoft.Json.JsonReader.State"/>을(를) 닫힘으로 변경합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>JSON 텍스트를 읽는 동안 오류가 발생할 때 발생하는 예외입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>오류가 발생한 위치를 나타내는 줄 번호를 가져옵니다.</summary>
            <value>오류가 발생한 위치를 나타내는 줄 번호입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>오류가 발생한 위치를 나타내는 선 위치를 가져옵니다.</summary>
            <value>오류가 발생한 위치를 나타내는 선 위치입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.Path">
            <summary>오류가 발생한 JSON에 대한 경로를 가져옵니다.</summary>
            <value>오류가 발생한 JSON에 대한 경로입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonReaderException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>지정된 오류 메시지와 함께 <see cref="T:Newtonsoft.Json.JsonReaderException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="message">예외의 이유를 설명하는 오류 메시지입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>지정된 오류 메시지와 이 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:Newtonsoft.Json.JsonReaderException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="message">예외의 이유를 설명하는 오류 메시지입니다.</param>
            <param name="innerException">내부 예외가 지정되지 않은 경우 현재 예외의 원인 또는 null 참조(Visual Basic의 없음)인 예외입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:Newtonsoft.Json.JsonReaderException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="info">발생하는 예외에 대한 직렬화된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>입니다.</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>소스 또는 대상에 대한 컨텍스트 정보가 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext"/>입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 매개 변수는 null입니다.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">클래스 이름은 null이거나 <see cref="P:System.Exception.HResult"/>이 제로(0)입니다.</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonRequiredAttribute">
            <summary>항상 멤버를 직렬화하도록 <see cref="T:Newtonsoft.Json.JsonSerializer"/>에 설명하고, 멤버에는 값이 필요합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>JSON 직렬화 또는 역직렬화 중에 오류가 발생할 때 발생하는 예외입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializationException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>지정된 오류 메시지와 함께 <see cref="T:Newtonsoft.Json.JsonSerializationException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="message">예외의 이유를 설명하는 오류 메시지입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>지정된 오류 메시지와 이 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:Newtonsoft.Json.JsonSerializationException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="message">예외의 이유를 설명하는 오류 메시지입니다.</param>
            <param name="innerException">내부 예외가 지정되지 않은 경우 현재 예외의 원인 또는 null 참조(Visual Basic의 없음)인 예외입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializationException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="info">발생하는 예외에 대한 직렬화된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>입니다.</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>소스 또는 대상에 대한 컨텍스트 정보가 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext"/>입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 매개 변수는 null입니다.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">클래스 이름은 null이거나 <see cref="P:System.Exception.HResult"/>이 제로(0)입니다.</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>JSON 형식에서 또는 JSON 형식으로 개체를 직렬화하고 역직렬화합니다. <see cref="T:Newtonsoft.Json.JsonSerializer"/>을 사용하면 개체가 JSON으로 인코딩되는 방법을 제어할 수 있습니다.</summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonSerializer.Error">
            <summary>직렬화 및 역직렬화 중에 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 오류가 발생할 때 발생합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>참조를 확인할 때 직렬화기에서 사용하는 <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/>을(를) 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
            <summary>형식 이름을 확인할 때 직렬화기에서 사용하는 <see cref="T:System.Runtime.Serialization.SerializationBinder"/>을(를) 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>추적 메시지를 작성할 때 직렬화기에서 사용하는 <see cref="T:System.Runtime.Serialization.SerializationBinder"/>을(를) 가져오거나 설정합니다.</summary>
            <value>추적 기록기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.EqualityComparer">
            <summary>참조를 비교할 때 직렬화기에서 사용하는 동일성 비교자를 가져오거나 설정합니다.</summary>
            <value>동일성 비교자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>직렬화기에서 형식 이름 쓰기 및 읽기를 처리하는 방법을 가져오거나 설정합니다.</summary>
            <remarks><see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> 애플리케이션이 외부 소스에서 JSON을 역직렬화할 때는 주의해서 사용해야 합니다. 유입되는 형식은 <c>TypeNameHandling.None</c>이 아닌 값으로 직렬화할 때 <see cref="T:System.Runtime.Serialization.SerializationBinder"/> 사용자 지정으로 유효성을 검사해야 합니다.</remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>Serializer에서 형식 이름 어셈블리를 작성하고 확인하는 방법을 가져오거나 설정합니다.</summary>
            <value>형식 이름 어셈블리 형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>직렬화기에 의해 개체 참조가 보존되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>참조 루프(예: 자체를 참조하는 클래스)가 처리되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>누락된 멤버(예: JSON에는 개체의 멤버가 아닌 속성이 포함되어 있음)가 역직렬화 중에 처리되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>직렬화 및 역직렬화 중에 null 값이 처리되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>직렬화 및 역직렬화 중에 null 기본값이 처리되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>역직렬화 중에 개체를 생성하는 방법을 가져오거나 설정합니다.</summary>
            <value>개체 만들기 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>역직렬화하는 동안 생성자가 사용되는 방법을 가져오거나 설정합니다.</summary>
            <value>생성자 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>역직렬화 중에 메타데이터 속성을 사용하는 방법을 가져오거나 설정합니다.</summary>
            <value>메타데이터 속성 처리.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
            <summary>직렬화하는 동안 사용되는 컬렉션 <see cref="T:Newtonsoft.Json.JsonConverter"/>을 가져옵니다.</summary>
            <value>직렬화하는 동안 사용되는 컬렉션 <see cref="T:Newtonsoft.Json.JsonConverter"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>.NET 개체를 JSON으로 그리고 그 역으로 직렬화할 때 직렬화기에서 사용하는 계약 확인자를 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Context">
            <summary>직렬화 콜백 메서드를 호출할 때 직렬화 에서 사용하는 <see cref="T:System.Runtime.Serialization.StreamingContext"/>을(를) 가져오거나 설정합니다.</summary>
            <value>컨텍스트입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>JSON 텍스트 출력의 서식이 지정되는 방법을 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>JSON 텍스트에 날짜를 쓰는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>직렬화 및 역직렬화 중에 <see cref="T:System.DateTime"/> 시간대가 처리되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>&quot;\/Date(1198908717056)\/&quot;및 &quot;2012-03-21T05:40Z&quot;와 같은 날짜 형식의 문자열이 JSON을 읽을 때 구문 분석되는 방법을 얻거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>JSON 텍스트를 읽을 때 부동점 번호(예: 1.0 및 9.9)를 구문 분석하는 방법을 얻거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>특수 부동 소수점 수(예: 및 <see cref="F:System.Double.NaN"/> <see cref="F:System.Double.PositiveInfinity"/> 및 <see cref="F:System.Double.NegativeInfinity"/>)를 JSON 텍스트로 작성하는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>JSON 텍스트를 작성할 때 문자열이 이스케이프되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>JSON 텍스트를 작성할 때 <see cref="T:System.DateTime"/> 및 <see cref="T:System.DateTimeOffset"/> 값을 포맷하는 방법과 JSON 텍스트르 판독할 때 예상된 데이터 형식을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
            <summary>JSON을 읽을 때 사용되는 문화권을 얻거나 설정합니다. 기본값은 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>JSON을 읽을 때 허용되는 최대 깊이를 얻거나 설정합니다. 이 깊이가 판독되면 <see cref="T:Newtonsoft.Json.JsonReaderException"/>이(가) 발생합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>개체를 역직렬화한 후 추가 JSON 콘텐츠에 대한 검사가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>개체를 직렬화한 후 추가 JSON 콘텐츠에 대한 검사가 있을 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create">
            <summary>새 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 인스턴스를 만듭니다. <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>은(는) <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>의 기본 설정을 사용하지 않습니다.</summary>
            <returns>새 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 인스턴스입니다. <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>은(는) <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>의 기본 설정을 사용하지 않습니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 새 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 인스턴스를 만듭니다. <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>은(는) <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>의 기본 설정을 사용하지 않습니다.</summary>
            <param name="settings"><see cref="T:Newtonsoft.Json.JsonSerializer"/>에 적용할 설정입니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하는 새 <see cref="T:Newtonsoft.Json.JsonSerializer"/>인스턴스입니다. <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>은(는) <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>의 기본 설정을 사용하지 않습니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>새 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 인스턴스를 만듭니다. <see cref="T:Newtonsoft.Json.JsonSerializer"/>(은)는 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>의 기본 설정을 사용합니다.</summary>
            <returns>새 <see cref="T:Newtonsoft.Json.JsonSerializer"/>인스턴스입니다. <see cref="T:Newtonsoft.Json.JsonSerializer"/>(은)는 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>의 기본 설정을 사용합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하여 새 <see cref="T:Newtonsoft.Json.JsonSerializer"/> 인스턴스를 만듭니다. <see cref="T:Newtonsoft.Json.JsonSerializer"/>은(는) 지정된 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 뿐만 아니라 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>의 기본 설정을 사용합니다.</summary>
            <param name="settings"><see cref="T:Newtonsoft.Json.JsonSerializer"/>에 적용할 설정입니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 사용하는 새 <see cref="T:Newtonsoft.Json.JsonSerializer"/>인스턴스입니다. <see cref="T:Newtonsoft.Json.JsonSerializer"/>은(는) 지정된 <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>을(를) 뿐만 아니라 <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>의 기본 설정을 사용합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>대상 개체에 JSON 값을 채웁니다.</summary>
            <param name="reader">리더 값에 JSON 구조를 포함하는 <see cref="T:System.IO.TextReader"/>입니다.</param>
            <param name="target">값을 채우는 대상 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
            <summary>대상 개체에 JSON 값을 채웁니다.</summary>
            <param name="reader">리더 값에 JSON 구조를 포함하는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="target">값을 채우는 대상 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에 포함된 JSON 구조를 역직렬화합니다. </summary>
            <param name="reader">역직렬화할 JSON 구조를 포함하는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <returns>역직렬화되는 <see cref="T:System.Object"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>지정된 <see cref="T:System.IO.StringReader"/>이(가) 지정된 형식의 인스턴스로 포함시킨 JSON 구조를 역직렬화합니다.</summary>
            <param name="reader">개체를 포함하는 <see cref="T:System.IO.TextReader"/>입니다.</param>
            <param name="objectType"><see cref="T:System.Type"/>역직렬화되는 <see cref="T:System.Type"/> 개체입니다.</param>
            <returns>역직렬화되는 <paramref name="objectType"/>의 인스턴스입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>이(가) 지정된 형식의 인스턴스로 포함시킨 JSON 구조를 역직렬화합니다.</summary>
            <param name="reader">개체를 포함하는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <typeparam name="T">역직렬화할 개체의 형식입니다.</typeparam>
            <returns>역직렬화되는 <typeparamref name="T"/>의 인스턴스입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>이(가) 지정된 형식의 인스턴스로 포함시킨 JSON 구조를 역직렬화합니다.</summary>
            <param name="reader">개체를 포함하는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="objectType"><see cref="T:System.Type"/>역직렬화되는 <see cref="T:System.Type"/> 개체입니다.</param>
            <returns>역직렬화되는 <paramref name="objectType"/>의 인스턴스입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>지정된 <see cref="T:System.Object"/>을(를) 직렬화하고 지정된 <see cref="T:System.IO.TextWriter"/>을(를) 사용하여 <c>스트림</c>에 JSON 구조를 작성합니다.</summary>
            <param name="textWriter">JSON 구조를 작성하는 데 사용하는 <see cref="T:System.IO.TextWriter"/>입니다.</param>
            <param name="value">직렬화하기 위한 <see cref="T:System.Object"/>입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>지정된 <see cref="T:System.Object"/>을(를) 직렬화하고 지정된 <see cref="T:System.IO.TextWriter"/>을(를) 사용하여 <c>스트림</c>에 JSON 구조를 작성합니다.</summary>
            <param name="jsonWriter">JSON 구조를 작성하는 데 사용하는 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">직렬화하기 위한 <see cref="T:System.Object"/>입니다.</param>
            <param name="objectType">직렬화되는 값의 형식입니다. 값 유형이 일치하지 않은 경우 형식 이름을 작성하기 위해 <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/>이(가) Auto로 설정될 때 이 매개 변수가 사용됩니다. 형식 지정은 선택 사항입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>지정된 <see cref="T:System.Object"/>을(를) 직렬화하고 지정된 <see cref="T:System.IO.TextWriter"/>을(를) 사용하여 <c>스트림</c>에 JSON 구조를 작성합니다.</summary>
            <param name="textWriter">JSON 구조를 작성하는 데 사용하는 <see cref="T:System.IO.TextWriter"/>입니다.</param>
            <param name="value">직렬화하기 위한 <see cref="T:System.Object"/>입니다.</param>
            <param name="objectType">직렬화되는 값의 형식입니다. 값 유형이 일치하지 않은 경우 형식 이름을 작성하기 위해 <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/>이(가) Auto로 설정될 때 이 매개 변수가 사용됩니다. 형식 지정은 선택 사항입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>지정된 <see cref="T:System.Object"/>을(를) 직렬화하고 지정된 <see cref="T:Newtonsoft.Json.JsonWriter"/>을(를) 사용하여 <c>스트림</c>에 JSON 구조를 작성합니다.</summary>
            <param name="jsonWriter">JSON 구조를 작성하는 데 사용하는 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="value">직렬화하기 위한 <see cref="T:System.Object"/>입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializerSettings">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 개체의 설정을 지정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>참조 루프(예: 자체를 참조하는 클래스)가 처리되는 방법을 가져오거나 설정합니다.</summary>
            <value>참조 루프 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>누락된 멤버(예: JSON에는 개체의 멤버가 아닌 속성이 포함)가 역직렬화 중에 처리되는 방법을 가져오거나 설정합니다.</summary>
            <value>부재 처리가 누락되었습니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>역직렬화 중에 개체를 생성하는 방법을 가져오거나 설정합니다.</summary>
            <value>개체 만들기 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>직렬화 및 역직렬화 중에 null 값이 처리되는 방법을 가져오거나 설정합니다.</summary>
            <value>Null 값 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>직렬화 및 역직렬화 중에 null 기본값이 처리되는 방법을 가져오거나 설정합니다.</summary>
            <value>기본값 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>직렬화하는 동안 사용될 <see cref="T:Newtonsoft.Json.JsonConverter"/> 컬렉션을 가져오거나 설정합니다.</summary>
            <value>변환기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>직렬화기에 의해 개체 참조가 보존되는 방법을 가져오거나 설정합니다.</summary>
            <value>보존 참조 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>직렬화기에서 형식 이름 쓰기 및 읽기를 처리하는 방법을 가져오거나 설정합니다.</summary>
            <remarks><see cref="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling"/> 애플리케이션이 외부 소스에서 JSON을 역직렬화할 때는 주의해서 사용해야 합니다. 유입되는 형식은 <c>TypeNameHandling.None</c>이 아닌 값으로 직렬화할 때 <see cref="T:System.Runtime.Serialization.SerializationBinder"/> 사용자 지정으로 유효성을 검사해야 합니다.</remarks>
            <value>형식 이름 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>역직렬화 중에 메타데이터 속성을 사용하는 방법을 가져오거나 설정합니다.</summary>
            <value>메타데이터 속성 처리.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>Serializer에서 형식 이름 어셈블리를 작성하고 확인하는 방법을 가져오거나 설정합니다.</summary>
            <value>형식 이름 어셈블리 형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>역직렬화하는 동안 생성자가 사용되는 방법을 가져오거나 설정합니다.</summary>
            <value>생성자 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>.NET 개체를 JSON으로 그리고 그 역으로 직렬화할 때 직렬화기에서 사용하는 계약 확인자를 가져옵니다.</summary>
            <value>계약 확인자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
            <summary>참조를 비교할 때 직렬화기에서 사용하는 동일성 비교자를 가져오거나 설정합니다.</summary>
            <value>동일성 비교자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>참조를 확인할 때 직렬화기에서 사용하는 <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/>을(를) 가져오거나 설정합니다.</summary>
            <value>참조 확인자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>참조를 확인할 때 직렬화기에서 사용하는 <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/>을(를) 생성하는 함수를 가져오거나 설정합니다.</summary>
            <value>참조를 확인할 때 직렬화기에서 사용하는 <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/>을(를) 생성하는 함수입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>추적 메시지를 <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter"/>작성할 때 직렬화기에서 사용하는 것을 가져오거나 설정합니다.</summary>
            <value>추적 기록기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>형식 이름을 확인할 때 직렬화기에서 사용하는 <see cref="T:System.Runtime.Serialization.SerializationBinder"/>을(를) 가져오거나 설정합니다.</summary>
            <value>바인더입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>직렬화 및 역직렬화 중에 호출된 오류 처리기를 가져오거나 설정합니다.</summary>
            <value>직렬화 및 역직렬화 중에 호출된 오류 처리기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>직렬화 콜백 메서드를 호출할 때 직렬화 에서 사용하는 <see cref="T:System.Runtime.Serialization.StreamingContext"/>을(를) 가져오거나 설정합니다.</summary>
            <value>컨텍스트입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>JSON 텍스트를 작성할 때 <see cref="T:System.DateTime"/> 및 <see cref="T:System.DateTimeOffset"/> 값을 포맷하는 방법과 JSON 텍스트르 판독할 때 예상된 데이터 형식을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>JSON을 읽을 때 허용되는 최대 깊이를 얻거나 설정합니다. 이 깊이가 판독되면 <see cref="T:Newtonsoft.Json.JsonReaderException"/>이(가) 발생합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>JSON 텍스트 출력의 서식이 지정되는 방법을 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>JSON 텍스트에 날짜를 쓰는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>직렬화 및 역직렬화 중에 <see cref="T:System.DateTime"/> 시간대가 처리되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>&quot;\/Date(1198908717056)\/&quot;및 &quot;2012-03-21T05:40Z&quot;와 같은 날짜 형식의 문자열이 JSON을 읽을 때 구문 분석되는 방법을 얻거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>특수 부동 소수점 수(예: 및 <see cref="F:System.Double.NaN"/> <see cref="F:System.Double.PositiveInfinity"/> 및 <see cref="F:System.Double.NegativeInfinity"/>)가 JSON으로 작성되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>JSON 텍스트를 읽을 때 부동점 번호(예: 1.0 및 9.9)를 구문 분석하는 방법을 얻거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>JSON 텍스트를 작성할 때 문자열이 이스케이프되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>JSON을 읽을 때 사용되는 문화권을 얻거나 설정합니다. 기본값은 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>개체를 역직렬화한 후 추가 콘텐츠에 대한 검사가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>개체를 역직렬화한 후 추가 콘텐츠에 대한 검사가 있을 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextReader">
            <summary>JSON 텍스트 데이터에 대한 캐시되지 않은 정방향 전용 빠른 액세스를 제공하는 판독기를 나타냅니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary><see cref="T:System.IO.TextReader"/>이(가) 지정된 상태에서 <see cref="T:Newtonsoft.Json.JsonReader"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="reader">읽을 XML 데이터를 포함하는 <c>TextReader</c>입니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.ArrayPool">
            <summary>판독기의 문자 버퍼 풀을 가져오거나 설정합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Read">
            <summary>스트림에서 다음 JSON 토큰을 읽습니다.</summary>
            <returns>다음 토큰을 성공적으로 읽은 경우 <c>true</c> 입니다. 읽을 토큰이 더 이상 없는 경우 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.String"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.String"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Byte"/>[](으)로 읽습니다.</summary>
            <returns><see cref="T:System.Byte"/>다음 JSON 토큰이 null인 경우 [] 또는 null 참조입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDouble">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Close">
            <summary>상태를 닫힘으로 변경합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>클래스가 줄 정보를 반환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <returns>LineNumber 및 LinePosition을 제공할 수 있는 경우 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>현재 줄 번호를 가져옵니다.</summary>
            <value>사용할 수 있는 줄 정보가 없는 경우 현재 줄 번호 또는 0(예: HasLineInfo는 false를 반환함).</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>현재 줄 위치를 가져옵니다.</summary>
            <value>사용할 수 있는 줄 정보가 ㅓㅄ는 경우 현재 줄 위치 또는 0(예: HasLineInfo는 false를 반환함).</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextWriter">
            <summary>JSON 데이터를 빠르고, 캐시되지 않고, 전달 전용으로 생성하는 방법을 제공하는 작성자를 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.ArrayPool">
            <summary>작성기의 문자 배열 풀을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary><see cref="T:Newtonsoft.Json.Formatting"/>이 <c>서식 들여쓰기</c>로 설정될 때 계층의 각 수준에 대해 쓸 IndentChars 수를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>따옴표 특성 값을 사용하는 문자를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary><see cref="T:Newtonsoft.Json.Formatting"/>이 <c>서식 들여쓰기</c>로 설정될 때 들여쓰기에 사용할 문자를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>개체 이름이 따옴표로 둘러싸일지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>지정된 <see cref="T:System.IO.TextWriter"/>을 사용하여 <c>JsonWriter</c> 클래스의 인스턴스를 만듭니다.</summary>
            <param name="textWriter">작성할 <c>TextWriter</c>입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>버퍼에 있는 모든 것을 기본 스트림으로 플러시하고 기본 스트림을 플러시합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
            <summary>이 스트림과 기본 스트림을 닫습니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>JSON 개체의 시작 부분을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>JSON 배열의 시작을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>지정된 이름으로 생성자의 시작을 작성합니다.</summary>
            <param name="name">생성자의 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>지정된 엔드 토큰을 작성합니다.</summary>
            <param name="token">작성할 엔드 토큰입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>JSON 개체에 이름/값 쌍의 속성 이름을 작성합니다.</summary>
            <param name="name">속성의 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>JSON 개체에 이름/값 쌍의 속성 이름을 작성합니다.</summary>
            <param name="name">속성의 이름입니다.</param>
            <param name="escape">JSON 속성 이름으로 작성될 때 텍스트를 이스케이프해야 하는지 여부를 나타내는 플래그입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>들여쓰기 문자를 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>JSON 값 구분 기호를 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>들여쓰기 공간을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary><see cref="T:System.Object"/>값을 작성합니다. 값을 단일 JSON 토큰으로 작성할 수 없는 경우 오류가 발생합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Object"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>null 값을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>정의되지 않은 값을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>원시 JSON을 작성합니다.</summary>
            <param name="json">작성할 원시 JSON입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary><see cref="T:System.String"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.String"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary><see cref="T:System.Int32"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int32"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary><see cref="T:System.UInt32"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt32"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary><see cref="T:System.Int64"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int64"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary><see cref="T:System.UInt64"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt64"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary><see cref="T:System.Single"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Single"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary><see cref="T:System.Double"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Double"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary><see cref="T:System.Boolean"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Boolean"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary><see cref="T:System.Int16"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int16"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary><see cref="T:System.UInt16"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt16"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary><see cref="T:System.Char"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Char"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary><see cref="T:System.Byte"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Byte"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary><see cref="T:System.SByte"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.SByte"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary><see cref="T:System.Decimal"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Decimal"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary><see cref="T:System.DateTime"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.DateTime"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary><see cref="T:System.Byte"/>[] 값을 작성합니다.</summary>
            <param name="value"><see cref="T:System.Byte"/>작성할 <see cref="T:System.Byte"/>[] 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary><see cref="T:System.DateTimeOffset"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.DateTimeOffset"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary><see cref="T:System.Guid"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Guid"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary><see cref="T:System.TimeSpan"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.TimeSpan"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary><see cref="T:System.Uri"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Uri"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>지정된 텍스트를 포함하는 주석 <code>/*...*/을</code>작성합니다.</summary>
            <param name="text">주석 안에 배치할 텍스트입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>지정된 공백을 작성합니다.</summary>
            <param name="ws">공백 문자의 문자열입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>JSON 토큰의 유형을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary><see cref="M:Newtonsoft.Json.JsonReader.Read"/> 메서드가 호출되지 않은 경우 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 이를 반환됩니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>개체 시작 토큰입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>배열 시작 토큰입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>생성자 시작 토큰입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>개체 속성 이름입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>주석입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Raw">
            <summary>원시 JSON입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>정수입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>플로트입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>문자열입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>부울입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>null 토큰입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>정의되지 않은 토큰입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>개체 끝 토큰입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>배열 끝 토큰입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>생성자 끝 토큰입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>날짜입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Bytes">
            <summary>바이트 데이터입니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonValidatingReader">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 유효성 검사를 제공하는 판독기를 나타냅니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>스키마 유효성 검사 오류를 수신하기 위한 이벤트 처리기를 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>현재 JSON 토큰의 텍스트 값을 가져옵니다.</summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>JSON 문서에서 현재 토큰의 깊이를 가져옵니다.</summary>
            <value>JSON 문서에서 현재 토큰의 깊이입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>현재 JSON 토큰의 경로를 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>문자열의 값을 동봉하는 데 사용되는 따옴표 문자를 가져옵니다.</summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>현재 JSON 토큰의 형식을 가져옵니다.</summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>현재 JSON 토큰에 대한 공통 언어 런타임(CLR) 형식을 가져옵니다.</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonValidatingReader"/>에서 반환된 콘텐츠의 유효성을 검사하는 <see cref="T:Newtonsoft.Json.JsonReader"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="reader">유효성 검사하는 동안 <see cref="T:Newtonsoft.Json.JsonReader"/>을 읽을 수 있습니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>스키마를 가져오거나 설정합니다.</summary>
            <value>스키마입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>이 <see cref="T:Newtonsoft.Json.JsonReader"/>을 생성하는 데 사용되는 <see cref="T:Newtonsoft.Json.JsonValidatingReader"/>을 가져옵니다.</summary>
            <value> 생성자에서 지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Byte"/>[](으)로 읽습니다.</summary>
            <returns><see cref="T:System.Byte"/>다음 JSON 토큰이 null인 경우 [] 또는 null 참조입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.String"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.String"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다. 이 메서드는 배열의 끝에 <c>null</c>을 반환합니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>스트림에서 다음 JSON 토큰을 <see cref="T:System.Nullable`1"/>(으)로 읽습니다.</summary>
            <returns><see cref="T:System.Nullable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>스트림에서 다음 JSON 토큰을 읽습니다.</summary>
            <returns>다음 토큰을 성공적으로 읽은 경우 <c>true</c> 입니다. 읽을 토큰이 더 이상 없는 경우 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>JSON 데이터를 빠르고, 캐시되지 않고, 전달 전용으로 생성하는 방법을 제공하는 작성자를 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>작성기가 닫혀 있을 때 기본 스트림 또는 <see cref="T:System.IO.TextReader"/>을 닫아야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>작성기가 닫혀 있을 때 기본 스트림 또는 <see cref="T:System.IO.TextReader"/>을 닫아야 하는 경우 true, 그렇지 않으면 false입니다. 기본값은 true입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Top">
            <summary>상단을 가져옵니다.</summary>
            <value>상단입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>작성기의 상태를 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Path">
            <summary>작성기의 경로를 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>JSON 텍스트 출력의 서식이 지정되는 방법을 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>JSON 텍스트에 날짜를 쓰는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>JSON 텍스트를 작성할 때 <see cref="T:System.DateTime"/> 시간대가 처리되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>JSON 텍스트를 작성할 때 문자열이 이스케이프되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>특수 부동 소수점 수(예: 및 <see cref="F:System.Double.NaN"/> <see cref="F:System.Double.PositiveInfinity"/> 및 <see cref="F:System.Double.NegativeInfinity"/>)가 JSON 텍스트에 작성되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>JSON 텍스트를 작성할 때 <see cref="T:System.DateTime"/> 및 <see cref="T:System.DateTimeOffset"/> 값이 서식 지정되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Culture">
            <summary>JSON을 읽을 때 사용되는 문화권을 가져오거나 설정합니다. 기본값은 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
            <summary><c>JsonWriter</c> 클래스의 인스턴스를 만듭니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>버퍼에 있는 모든 것을 기본 스트림으로 플러시하고 기본 스트림을 플러시합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>이 스트림과 기본 스트림을 닫습니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>JSON 개체의 시작 부분을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>JSON 개체의 끝 부분을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>JSON 배열의 시작을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>배열의 끝을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>지정된 이름으로 생성자의 시작을 작성합니다.</summary>
            <param name="name">생성자의 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>끝 생성자를 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>JSON 개체에 이름/값 쌍의 속성 이름을 작성합니다.</summary>
            <param name="name">속성의 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>JSON 개체에 이름/값 쌍의 속성 이름을 작성합니다.</summary>
            <param name="name">속성의 이름입니다.</param>
            <param name="escape">JSON 속성 이름으로 작성될 때 텍스트를 이스케이프해야 하는지 여부를 나타내는 플래그입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>현재 JSON 개체 또는 배열의 끝을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
            <summary>현재 <see cref="T:Newtonsoft.Json.JsonReader"/> 토큰과 해당 하위 항목을 작성합니다.</summary>
            <param name="reader">토큰을 읽을 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>현재 <see cref="T:Newtonsoft.Json.JsonReader"/> 토큰을 작성합니다.</summary>
            <param name="reader">토큰을 읽을 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="writeChildren">현재 토큰의 하위 항목을 작성해야 하는지 여부를 나타내는 플래그입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary><see cref="T:Newtonsoft.Json.JsonToken"/> 토큰과 해당 값을 작성합니다.</summary>
            <param name="token">작성할 <see cref="T:Newtonsoft.Json.JsonToken"/>입니다.</param>
            <param name="value">작성할 값입니다. 값은 연결된 값(예: <see cref="F:Newtonsoft.Json.JsonToken.PropertyName"/>에 대한 <see cref="T:System.String"/> 속성 이름)이 있는 토큰에만 필요합니다. null 값은 값이 없는 토큰에 대해 메서드에 전달할 수 있습니다(예: <see cref="F:Newtonsoft.Json.JsonToken.StartObject"/>).</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken)">
            <summary><see cref="T:Newtonsoft.Json.JsonToken"/> 토큰을 작성합니다.</summary>
            <param name="token">작성할 <see cref="T:Newtonsoft.Json.JsonToken"/>입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>지정된 엔드 토큰을 작성합니다.</summary>
            <param name="token">작성할 엔드 토큰입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>들여쓰기 문자를 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>JSON 값 구분 기호를 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>들여쓰기 공간을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>null 값을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>정의되지 않은 값을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>작성기의 상태를 변경하지 않고 원시 JSON을 작성합니다.</summary>
            <param name="json">작성할 원시 JSON입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>값이 예상되는 원시 JSON을 작성하고 작성자의 상태를 업데이트합니다.</summary>
            <param name="json">작성할 원시 JSON입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary><see cref="T:System.String"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.String"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary><see cref="T:System.Int32"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int32"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary><see cref="T:System.UInt32"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt32"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary><see cref="T:System.Int64"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int64"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary><see cref="T:System.UInt64"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt64"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary><see cref="T:System.Single"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Single"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary><see cref="T:System.Double"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Double"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary><see cref="T:System.Boolean"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Boolean"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary><see cref="T:System.Int16"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int16"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary><see cref="T:System.UInt16"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt16"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary><see cref="T:System.Char"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Char"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary><see cref="T:System.Byte"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Byte"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary><see cref="T:System.SByte"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.SByte"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary><see cref="T:System.Decimal"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Decimal"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary><see cref="T:System.DateTime"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.DateTime"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary><see cref="T:System.DateTimeOffset"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.DateTimeOffset"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary><see cref="T:System.Guid"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Guid"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary><see cref="T:System.TimeSpan"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.TimeSpan"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary><see cref="T:System.Nullable`1"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Nullable`1"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary><see cref="T:System.Byte"/>[] 값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Byte"/>[] 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary><see cref="T:System.Uri"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Uri"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary><see cref="T:System.Object"/>값을 작성합니다. 값을 단일 JSON 토큰으로 작성할 수 없는 경우 오류가 발생합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Object"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>지정된 텍스트를 포함하는 주석 <code>/*...*/을</code>작성합니다.</summary>
            <param name="text">주석 안에 배치할 텍스트입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>지정된 공백을 작성합니다.</summary>
            <param name="ws">공백 문자의 문자열입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>관리되지 않는 릴리스 및 선택적으로 관리되는 리소스</summary>
            <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하는 것이 <c>true</c>, <c></c>관리되지 않는 리소스만 해제하면 <c>false</c>입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>JsonWriter의 상태를 설정하고,</summary>
            <param name="token">JsonToken이 작성되고 있습니다.</param>
            <param name="value">작성 중인 값입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>JSON 텍스트를 읽는 동안 오류가 발생할 때 발생하는 예외입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriterException.Path">
            <summary>오류가 발생한 JSON에 대한 경로를 가져옵니다.</summary>
            <value>오류가 발생한 JSON에 대한 경로입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary><see cref="T:Newtonsoft.Json.JsonWriterException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>지정된 오류 메시지와 함께 <see cref="T:Newtonsoft.Json.JsonWriterException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="message">예외의 이유를 설명하는 오류 메시지입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>지정된 오류 메시지와 이 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:Newtonsoft.Json.JsonWriterException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="message">예외의 이유를 설명하는 오류 메시지입니다.</param>
            <param name="innerException">내부 예외가 지정되지 않은 경우 현재 예외의 원인 또는 null 참조(Visual Basic의 없음)인 예외입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:Newtonsoft.Json.JsonWriterException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="info">발생하는 예외에 대한 직렬화된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>입니다.</param>
            <param name="context">소스 또는 대상에 대한 컨텍스트 정보가 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext"/>입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 매개 변수는 null입니다.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">클래스 이름은 null이거나 <see cref="P:System.Exception.HResult"/>이 제로(0)입니다.</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.CommentHandling">
            <summary>JSON을 로드할 때 JSON 주석을 처리하는 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Ignore">
            <summary>주석을 무시합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Load">
            <summary>주석을 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 유형의 <see cref="F:Newtonsoft.Json.Linq.JTokenType.Comment"/>(으)로 로드합니다. </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.LineInfoHandling">
            <summary>JSON을 로드할 때 라인 정보가 처리되는 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
            <summary>라인 정보를 무시합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Load">
            <summary>라인 정보를 로드합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Extensions">
            <summary>LinQ ~ JSON 확장 메서드를 포함합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>소스 컬렉션에 있는 모든 토큰의 상위 요소를 포함하는 토큰 컬렉션을 반환합니다.</summary>
            <typeparam name="T"><see cref="T:Newtonsoft.Json.Linq.JToken"/>(으)로 제한된 소스 내의 개체 형식입니다.</typeparam>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <returns>소스 컬렉션에 있는 모든 토큰의 상위 요소를 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>소스 컬렉션에 있는 모든 토큰과 소스 컬렉션에 있는 모든 토큰의 상위 요소를 포함하는 토큰 컬렉션을 반환합니다.</summary>
            <typeparam name="T"><see cref="T:Newtonsoft.Json.Linq.JToken"/>(으)로 제한된 소스 내의 개체 형식입니다.</typeparam>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <returns>소스 컬렉션에 있는 모든 토큰, 소스 컬렉션에 있는 모든 토큰의 상위 요소를 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>소스 컬렉션에 있는 모든 토큰의 하위 요소를 포함하는 토큰 컬렉션을 반환합니다.</summary>
            <typeparam name="T"><see cref="T:Newtonsoft.Json.Linq.JContainer"/>(으)로 제한된 소스 내의 개체 형식입니다.</typeparam>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <returns>소스 컬렉션에 있는 모든 토큰의 하위 요소를 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>소스 컬렉션에 있는 모든 토큰과 소스 컬렉션에 있는 모든 토큰의 하위 요소를 포함하는 토큰 컬렉션을 반환합니다.</summary>
            <typeparam name="T"><see cref="T:Newtonsoft.Json.Linq.JContainer"/>(으)로 제한된 소스 내의 개체 형식입니다.</typeparam>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <returns>소스 컬렉션에 있는 모든 토큰과 소스 컬렉션에 있는 모든 토큰의 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>소스 컬렉션에 있는 모든 개체의 하위 속성 컬렉션을 반환합니다.</summary>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JObject"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <returns>소스 컬렉션에 있는 모든 개체의 속성을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>지정된 키를 가진 소스 컬렉션에 있는 모든 개체의 하위 값 컬렉션을 반환합니다.</summary>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <param name="key">토큰 키입니다.</param>
            <returns>지정된 키를 가진 소스 컬렉션에 있는 모든 토큰의 값을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>소스 컬렉션에 있는 모든 개체의 하위 값 컬렉션을 반환합니다.</summary>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <returns>소스 컬렉션에서 모든 토큰의 값을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>지정된 키를 가진 소스 컬렉션에 있는 모든 개체의 변환된 하위 값 컬렉션을 반환 합니다.</summary>
            <typeparam name="U">값을 변환하는 형식입니다.</typeparam>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <param name="key">토큰 키입니다.</param>
            <returns>지정된 키를 가진 소스 컬렉션에 있는 모든 토큰의 변환된 값을 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>소스 컬렉션에 있는 모든 개체의 변환된 하위 값 컬렉션을 반환합니다.</summary>
            <typeparam name="U">값을 변환하는 형식입니다.</typeparam>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <returns>소스 컬렉션에서 모든 토큰의 변환된 값을 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>값을 변환합니다.</summary>
            <typeparam name="U">값을 변환하는 형식입니다.</typeparam>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>(으)로 캐스팅할 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</param>
            <returns>변환된 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>값을 변환합니다.</summary>
            <typeparam name="T">소스 컬렉션 형식입니다.</typeparam>
            <typeparam name="U">값을 변환하는 형식입니다.</typeparam>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>(으)로 캐스팅할 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</param>
            <returns>변환된 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>소스 컬렉션에 있는 모든 배열의 하위 토큰 컬렉션을 반환합니다.</summary>
            <typeparam name="T">소스 컬렉션 형식입니다.</typeparam>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <returns>소스 컬렉션에서 모든 토큰의 값을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>소스 컬렉션에 있는 모든 배열의 변환된 하위 토큰 컬렉션을 반환합니다.</summary>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <typeparam name="U">값을 변환하는 형식입니다.</typeparam>
            <typeparam name="T">소스 컬렉션 형식입니다.</typeparam>
            <returns>소스 컬렉션에서 모든 토큰의 변환된 값을 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary><see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>(으)로 입력한 입력을 반환합니다.</summary>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>(으)로 입력한 입력입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary><see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>(으)로 입력한 입력을 반환합니다.</summary>
            <typeparam name="T">소스 컬렉션 형식입니다.</typeparam>
            <param name="source">소스 컬렉션을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>(으)로 입력한 입력입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> 개체의 컬렉션을 나타냅니다.</summary>
            <typeparam name="T">토큰의 유형</typeparam>
        </member>
        <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>지정된 키가 있는 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>을(를) 가져옵니다.</summary>
            <value></value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JArray">
            <summary>JSON 배열을 나타냅니다.</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></example>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>컨테이너의 하위 토큰을 가져옵니다.</summary>
            <value>컨테이너의 하위 토큰입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Type">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에 대한 노드 형식을 가져옵니다.</summary>
            <value>형식입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Linq.JArray"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
            <summary>다른 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 개체에서 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="other">복사할 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>지정된 콘텐츠로 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="content">배열의 내용입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>지정된 콘텐츠로 <see cref="T:Newtonsoft.Json.Linq.JArray"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="content">배열의 내용입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.JsonReader"/>의 <see cref="T:Newtonsoft.Json.Linq.JArray"/>을(를) 로드합니다.</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JArray"/>의 내용을 읽을 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 읽은 JSON을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JArray"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonReader"/>의 <see cref="T:Newtonsoft.Json.Linq.JArray"/>을(를) 로드합니다.</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JArray"/>의 내용을 읽을 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="settings">JSON을 로드하는 데 사용하는 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>입니다. null이면 기본 로드 설정이 사용됩니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 읽은 JSON을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JArray"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>JSON이 포함된 문자열에서 <see cref="T:Newtonsoft.Json.Linq.JArray"/>을(를) 로드합니다.</summary>
            <param name="json">JSON을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <returns>JSON을 포함하는 문자열에서 채워진 <see cref="T:Newtonsoft.Json.Linq.JArray"/>입니다.</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>JSON이 포함된 문자열에서 <see cref="T:Newtonsoft.Json.Linq.JArray"/>을(를) 로드합니다.</summary>
            <param name="json">JSON을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <param name="settings">JSON을 로드하는 데 사용하는 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>입니다. null이면 기본 로드 설정이 사용됩니다.</param>
            <returns>JSON을 포함하는 문자열에서 채워진 <see cref="T:Newtonsoft.Json.Linq.JArray"/>입니다.</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>개체에서 <see cref="T:Newtonsoft.Json.Linq.JArray"/>을(를) 만듭니다.</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JArray"/>을(를) 만드는 데 사용할 <see cref="T:Newtonsoft.Json.Linq.JArray"/>개체입니다.</param>
            <returns>지정된 개체의 값이 있는 <see cref="T:Newtonsoft.Json.Linq.JArray"/></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체에서 <see cref="T:Newtonsoft.Json.Linq.JArray"/>을(를) 만듭니다.</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JArray"/>을(를) 만드는 데 사용할 <see cref="T:Newtonsoft.Json.Linq.JArray"/>개체입니다.</param>
            <param name="jsonSerializer">개체를 읽는 데 사용되는 <see cref="T:Newtonsoft.Json.JsonSerializer"/>입니다.</param>
            <returns>지정된 개체의 값이 있는 <see cref="T:Newtonsoft.Json.Linq.JArray"/></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonWriter"/>에 이 토큰을 작성합니다.</summary>
            <param name="writer">이 메서드가 작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="converters">토큰을 작성할 때 사용되는 <see cref="T:Newtonsoft.Json.JsonConverter"/> 컬렉션입니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>지정된 키가 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 가져옵니다.</summary>
            <value>지정한 키가 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>지정된 인덱스에 <see cref="T:Newtonsoft.Json.Linq.JToken"/>(을)를 가져오거나 설정합니다.</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
            <summary><see cref="T:System.Collections.Generic.IList`1"/>에서 특정 항목의 인덱스를 결정합니다.</summary>
            <param name="item"><see cref="T:System.Collections.Generic.IList`1"/>에서 찾을 개체입니다.</param>
            <returns>목록에서 발견된 경우 <paramref name="item"/>의 인덱스, 그렇지 않으면 -1입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
            <summary>지정된 인덱스의 <see cref="T:System.Collections.Generic.IList`1"/>에 항목을 삽입합니다.</summary>
            <param name="index"><paramref name="item"/>을(를) 삽입해야 하는 0기반 인덱스입니다.</param>
            <param name="item"><see cref="T:System.Collections.Generic.IList`1"/>에 삽입할 개체입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> <see cref="T:System.Collections.Generic.IList`1"/>에서 유효한 인덱스가 아닙니다.</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IList`1"/>은(는) 읽기 전용입니다.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>지정된 인덱스에서 <see cref="T:System.Collections.Generic.IList`1"/> 항목을 제거합니다.</summary>
            <param name="index">제거할 항목의 0기반 인덱스입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> <see cref="T:System.Collections.Generic.IList`1"/>에서 유효한 인덱스가 아닙니다.</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.IList`1"/>은(는) 읽기 전용입니다.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>컬렉션을 통해 반복하는 열거자를 반환합니다.</summary>
            <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
            <summary><see cref="T:System.Collections.Generic.ICollection`1"/>에 항목을 추가합니다.</summary>
            <param name="item"><see cref="T:System.Collections.Generic.ICollection`1"/>에 추가할 개체입니다.</param>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/>은(는) 읽기 전용입니다.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
            <summary><see cref="T:System.Collections.Generic.ICollection`1"/>에서 모든 항목을 제거합니다.</summary>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/>은(는) 읽기 전용입니다.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
            <summary>특정 <see cref="T:System.Collections.Generic.ICollection`1"/>이(가) 포함되어 있는지 여부를 결정합니다.</summary>
            <param name="item"><see cref="T:System.Collections.Generic.ICollection`1"/>에서 찾을 개체입니다.</param>
            <returns><paramref name="item"/>을(를) <see cref="T:System.Collections.Generic.ICollection`1"/>에서 찾을 수 있는 경우 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>에 복사합니다.</summary>
            <param name="array">배열입니다.</param>
            <param name="arrayIndex">배열의 인덱스입니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary><see cref="T:System.Collections.Generic.ICollection`1" />이(가) 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
            <returns><see cref="T:System.Collections.Generic.ICollection`1" />이(가) 읽기 전용인 경우 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
            <summary><see cref="T:System.Collections.Generic.ICollection`1"/>에서 특정 개체의 첫 번째 발생을 제거합니다.</summary>
            <param name="item"><see cref="T:System.Collections.Generic.ICollection`1"/>에서 제거할 개체입니다.</param>
            <returns><paramref name="item"/>이(가) <see cref="T:System.Collections.Generic.ICollection`1"/>에서 성공적으로 제거된 경우 true, 그렇지 않으면 false입니다. <paramref name="item"/>을(를) <see cref="T:System.Collections.Generic.ICollection`1"/> 원본에서 찾을 수 없는 경우 이 메서드도 false를 반환합니다.</returns>
            <exception cref="T:System.NotSupportedException"><see cref="T:System.Collections.Generic.ICollection`1"/>은(는) 읽기 전용입니다.</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JConstructor">
            <summary>JSON 생성자를 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>컨테이너의 하위 토큰을 가져옵니다.</summary>
            <value>컨테이너의 하위 토큰입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>생성자의 이름을 가져오거나 설정합니다.</summary>
            <value>생성자 이름입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에 대한 노드 형식을 가져옵니다.</summary>
            <value>형식입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
            <summary>다른 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 개체에서 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="other">복사할 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>지정된 이름과 콘텐츠로 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="name">생성자 이름입니다.</param>
            <param name="content">생성자의 내용입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>지정된 이름과 콘텐츠로 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="name">생성자 이름입니다.</param>
            <param name="content">생성자의 내용입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>지정된 이름으로 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="name">생성자 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonWriter"/>에 이 토큰을 작성합니다.</summary>
            <param name="writer">이 메서드가 작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="converters">토큰을 작성할 때 사용되는 <see cref="T:Newtonsoft.Json.JsonConverter"/> 컬렉션입니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>지정된 키가 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 가져옵니다.</summary>
            <value>지정한 키가 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.JsonReader"/>의 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>을(를) 로드합니다.</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JConstructor"/>의 내용을 읽을 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 읽은 JSON을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonReader"/>의 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>을(를) 로드합니다.</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JConstructor"/>의 내용을 읽을 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="settings">JSON을 로드하는 데 사용하는 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>입니다. null이면 기본 로드 설정이 사용됩니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 읽은 JSON을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JConstructor"/>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JContainer">
            <summary>다른 토큰을 포함할 수 있는 토큰을 나타냅니다.</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>목록이 변경되거나 목록의 항목이 변경될 때 발생합니다.</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>항목이 컬렉션에 추가되기 전에 발생합니다.</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
            <summary>컬렉션의 항목 목록이 변경되었거나 컬렉션이 재설정될 때 발생합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>컨테이너의 하위 토큰을 가져옵니다.</summary>
            <value>컨테이너의 하위 토큰입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary><see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew"/>이벤트를 발생시킵니다.</summary>
            <param name="e">이벤트 데이터가 포함된 <see cref="T:System.ComponentModel.AddingNewEventArgs"/> 인스턴스입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary><see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged"/>이벤트를 발생시킵니다.</summary>
            <param name="e">이벤트 데이터가 포함된 <see cref="T:System.ComponentModel.ListChangedEventArgs"/> 인스턴스입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary><see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged"/>이벤트를 발생시킵니다.</summary>
            <param name="e">이벤트 데이터가 포함된 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> 인스턴스입니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>이 토큰에 하위 토큰이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>이 토큰에 하위 값이 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.First">
            <summary>이 토큰의 첫 번째 하위 토큰을 가져옵니다.</summary>
            <value><see cref="T:Newtonsoft.Json.Linq.JToken"/>의 첫 번째 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
            <summary>이 토큰의 마지막 하위 토큰을 가져옵니다.</summary>
            <value><see cref="T:Newtonsoft.Json.Linq.JToken"/>의 마지막 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
            <summary>문서 순서대로 이 토큰의 하위 토큰 컬렉션을 반환합니다.</summary>
            <returns>문서 순서대로 이 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>문서 순서대로 이 토큰의 하위 값 컬렉션을 반환합니다.</summary>
            <typeparam name="T">값을 변환하는 형식입니다.</typeparam>
            <returns>문서 순서대로 이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 하위 값을 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>문서 순서대로 이 토큰의 하위 토큰 컬렉션을 반환합니다.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/>의 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>이 토큰을 포함하는 토큰 컬렉션과 이 토큰의 모든 하위 토큰을 문서 순서대로 반환합니다.</summary>
            <returns>이 토큰과 <see cref="T:System.Collections.Generic.IEnumerable`1"/>의 모든 하위 토큰을 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 하위 요소로 지정된 콘텐츠를 추가합니다.</summary>
            <param name="content">추가할 콘텐츠입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>지정된 내용을 이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 첫 번째 하위 요소로 추가합니다.</summary>
            <param name="content">추가할 콘텐츠입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary><see cref="T:Newtonsoft.Json.JsonWriter"/>에 토큰을 추가하는 데 사용할 수 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 만듭니다.</summary>
            <returns>콘텐츠를 작성할 준비가 된 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>이 토큰의 하위노드를 지정된 콘텐츠로 바꿉니다.</summary>
            <param name="content">콘텐츠입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>이 토큰에서 하위 노드를 제거합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
            <summary>지정된 콘텐츠를 이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에 병합합니다.</summary>
            <param name="content">병합할 콘텐츠입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Newtonsoft.Json.Linq.JsonMergeSettings)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>을 사용하여 지정된 콘텐츠를 이 <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings"/>에 병합합니다.</summary>
            <param name="content">병합할 콘텐츠입니다.</param>
            <param name="settings">JSON 하위 토큰을 병합하는 데 사용하는 <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings"/>입니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
            <summary>JSON 하위 토큰의 수를 가져옵니다.</summary>
            <value>JSON 하위 토큰 의 수</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> 개체의 컬렉션을 나타냅니다.</summary>
            <typeparam name="T">토큰의 유형</typeparam>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/> 개체의 빈 컬렉션입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary><see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/> 구조의 새 인스턴스를 초기화합니다.</summary>
            <param name="enumerable">열거형입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>컬렉션을 통해 반복하는 열거자를 반환합니다.</summary>
            <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>컬렉션을 통해 반복하는 열거자를 반환합니다.</summary>
            <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator"/> 개체입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>지정된 키가 있는 <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>을(를) 가져옵니다.</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(Newtonsoft.Json.Linq.JEnumerable{`0})">
            <summary>지정된 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>이(가) 이 인스턴스와 같은지 여부를 판별합니다.</summary>
            <param name="other">이 인스턴스와 비교할 수 있는 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>입니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>이(가) 이 인스턴스와 같으면 <c>true</c> 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>지정된 <see cref="T:System.Object"/>이(가) 이 인스턴스와 같은지 여부를 판별합니다.</summary>
            <param name="obj">이 인스턴스와 비교할 수 있는 <see cref="T:System.Object"/>입니다.</param>
            <returns>지정된 <see cref="T:System.Object"/>이(가) 이 인스턴스와 같으면 <c>true</c> 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
            <returns>해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 사용하기에 적합한 이 인스턴스의 해시 코드입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JObject">
            <summary>JSON 개체를 나타냅니다.</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></example>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>컨테이너의 하위 토큰을 가져옵니다.</summary>
            <value>컨테이너의 하위 토큰입니다.</value>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>속성 값이 변경될 때 발생합니다.</summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>속성 값이 변경되고 있을 때 발생합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Linq.JObject"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>다른 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 개체에서 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="other">복사할 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>지정된 콘텐츠로 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="content">개체의 내용입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>지정된 콘텐츠로 <see cref="T:Newtonsoft.Json.Linq.JObject"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="content">개체의 내용입니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Type">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에 대한 노드 형식을 가져옵니다.</summary>
            <value>형식입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
            <summary>이 개체의 속성 중 <see cref="T:System.Collections.Generic.IEnumerable`1"/>을(를) 가져옵니다.</summary>
            <returns>이 개체의 속성 중 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/>에 지정된 이름을 가져옵니다.</summary>
            <param name="name">속성 이름입니다.</param>
            <returns>지정된 이름 또는 null이 있는 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>이 개체의 속성 값 중 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>을(를) 가져옵니다.</summary>
            <returns>이 개체의 속성 값 중 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>지정된 키가 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 가져옵니다.</summary>
            <value>지정한 키가 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>지정된 속성 이름이 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 가져오거나 설정합니다.</summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.JsonReader"/>의 <see cref="T:Newtonsoft.Json.Linq.JObject"/>을(를) 로드합니다.</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JObject"/>의 내용을 읽을 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 읽은 JSON을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JObject"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonReader"/>의 <see cref="T:Newtonsoft.Json.Linq.JObject"/>을(를) 로드합니다.</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JObject"/>의 내용을 읽을 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="settings">JSON을 로드하는 데 사용하는 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>입니다. null이면 기본 로드 설정이 사용됩니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 읽은 JSON을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JObject"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>JSON이 포함된 문자열에서 <see cref="T:Newtonsoft.Json.Linq.JObject"/>을(를) 로드합니다.</summary>
            <param name="json">JSON을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <returns>JSON을 포함하는 문자열에서 채워진 <see cref="T:Newtonsoft.Json.Linq.JObject"/>입니다.</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>JSON이 포함된 문자열에서 <see cref="T:Newtonsoft.Json.Linq.JObject"/>을(를) 로드합니다.</summary>
            <param name="json">JSON을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <param name="settings">JSON을 로드하는 데 사용하는 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>입니다. null이면 기본 로드 설정이 사용됩니다.</param>
            <returns>JSON을 포함하는 문자열에서 채워진 <see cref="T:Newtonsoft.Json.Linq.JObject"/>입니다.</returns>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>개체에서 <see cref="T:Newtonsoft.Json.Linq.JObject"/>을(를) 만듭니다.</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JObject"/>을(를) 만드는 데 사용할 <see cref="T:Newtonsoft.Json.Linq.JObject"/>개체입니다.</param>
            <returns>지정된 개체의 값이 있는 <see cref="T:Newtonsoft.Json.Linq.JObject"/></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>개체에서 <see cref="T:Newtonsoft.Json.Linq.JObject"/>을(를) 만듭니다.</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JObject"/>을(를) 만드는 데 사용할 <see cref="T:Newtonsoft.Json.Linq.JObject"/>개체입니다.</param>
            <param name="jsonSerializer">개체를 읽는 데 사용되는 <see cref="T:Newtonsoft.Json.JsonSerializer"/>입니다.</param>
            <returns>지정된 개체의 값이 있는 <see cref="T:Newtonsoft.Json.Linq.JObject"/></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonWriter"/>에 이 토큰을 작성합니다.</summary>
            <param name="writer">이 메서드가 작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="converters">토큰을 작성할 때 사용되는 <see cref="T:Newtonsoft.Json.JsonConverter"/> 컬렉션입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>지정된 속성 이름을 갖는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 가져옵니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
            <returns>지정된 속성 이름이 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>지정된 속성 이름을 갖는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 가져옵니다. 정확한 속성 이름을 먼저 검색하고 일치하는 속성이 없는 경우 속성과 <see cref="T:System.StringComparison"/>일치하는 데 <see cref="T:System.StringComparison"/>을(를) 사용됩니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
            <param name="comparison">문자열을 비교하는 방법을 지정하는 열거형 값 중 하나입니다.</param>
            <returns>지정된 속성 이름이 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
            <summary>지정된 속성 이름이 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 가져와 봅니다. 정확한 속성 이름을 먼저 검색하고 일치하는 속성이 없는 경우 속성과 <see cref="T:System.StringComparison"/>일치하는 데 <see cref="T:System.StringComparison"/>을(를) 사용됩니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
            <param name="value">값입니다.</param>
            <param name="comparison">문자열을 비교하는 방법을 지정하는 열거형 값 중 하나입니다.</param>
            <returns>값이 성공적으로 검색된 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>지정된 속성 이름을 추가합니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>지정된 속성 이름이 있는 속성을 삭제합니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
            <returns>항목이 성공적으로 삭제된 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>get 값을 시도합니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
            <param name="value">값입니다.</param>
            <returns>값이 성공적으로 검색된 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>컬렉션을 통해 반복하는 열거자를 반환합니다.</summary>
            <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>제공된 인수와 함께 <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged"/> 이벤트를 발생시킵니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>제공된 인수와 함께 <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging"/> 이벤트를 발생시킵니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>구성 요소의 이 인스턴스에 대한 속성을 반환합니다.</summary>
            <returns>이 구성 요소 인스턴스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>특성 배열을 필터로 사용하여 구성 요소의 이 인스턴스에 대한 속성을 반환합니다.</summary>
            <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute"/> 형식의 배열입니다.</param>
            <returns>이 구성 요소 인스턴스에 대해 필터링된 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>구성 요소의 이 인스턴스에 대한 사용자 지정 특성 컬렉션을 반환합니다.</summary>
            <returns>이 개체에 대한 특성을 포함하는 <see cref="T:System.ComponentModel.AttributeCollection"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>구성 요소의 이 인스턴스의 클래스 이름을 반환합니다.</summary>
            <returns>개체의 클래스 이름이거나 클래스에 이름이 없는 경우 null입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>구성 요소의 이 인스턴스 이름을 반환합니다.</summary>
            <returns>개체의 이름이거나 개체에 이름이 없는 경우 null입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>구성 요소의 이 인스턴스에 대한 형식 변환기를 반환합니다.</summary>
            <returns><see cref="T:System.ComponentModel.TypeConverter"/>은(는) 이 개체에 대한 변환기이거나 이 개체에 대한 <see cref="T:System.ComponentModel.TypeConverter"/>이(가) 없는 경우 null입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>구성 요소의 이 인스턴스에 대한 기본 이벤트를 반환합니다.</summary>
            <returns>이 개체에 대한 기본 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor"/>이거나 이 개체에 이벤트가 없는 경우 null입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>구성 요소의 이 인스턴스에 대한 기본 속성을 반환합니다.</summary>
            <returns>이 개체에 대한 기본 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor"/>이거나 개체에 속성이 없는 경우 null입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>구성 요소의 이 인스턴스에 대해 지정된 형식의 편집기를 반환합니다.</summary>
            <param name="editorBaseType">이 개체의 편집기를 나타내는 <see cref="T:System.Type"/>입니다.</param>
            <returns>이 개체의 편집기인 지정된 형식의 <see cref="T:System.Object"/>이거나 편집기를 찾을 수 없는 경우 null입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>지정된 특성 배열을 필터로 사용하여 구성 요소의 이 인스턴스에 대한 이벤트를 반환합니다.</summary>
            <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute"/> 형식의 배열입니다.</param>
            <returns>이 구성 요소 인스턴스에 대해 필터링된 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptorCollection"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>구성 요소의 이 인스턴스에 대한 이벤트를 반환합니다.</summary>
            <returns>이 구성 요소 인스턴스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptorCollection"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>지정된 속성 설명자가 설명한 속성을 포함하는 개체를 반환합니다.</summary>
            <param name="pd">소유자를 찾아야 하는 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor"/>입니다.</param>
            <returns>지정된 속성의 소유자를 나타내는 <see cref="T:System.Object"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>이 개체에서 수행된 바인딩 작업에 대한 <see cref="T:System.Dynamic.DynamicMetaObject"/> 책임을 반환합니다.</summary>
            <param name="parameter">런타임 값의 표현식 트리입니다.</param>
            <returns>이 개체를 바인딩하는 <see cref="T:System.Dynamic.DynamicMetaObject"/>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonMergeSettings">
            <summary>JSON을 병합할 때 사용되는 설정을 지정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>JSON 배열을 병합할 때 사용되는 메서드를 가져오거나 설정합니다.</summary>
            <value>JSON 배열을 병합할 때 사용되는 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>null 값 속성을 병합하는 방법을 가져오거나 설정합니다.</summary>
            <value>null 값 속성을 병합하는 방법입니다.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JProperty">
            <summary>JSON 속성을 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>컨테이너의 하위 토큰을 가져옵니다.</summary>
            <value>컨테이너의 하위 토큰입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
            <summary>속성 이름을 가져옵니다.</summary>
            <value>속성 이름입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
            <summary>속성 값을 가져오거나 설정합니다.</summary>
            <value>속성 값입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
            <summary>다른 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 개체에서 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="other">복사할 <see cref="T:Newtonsoft.Json.Linq.JProperty"/> 개체입니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에 대한 노드 형식을 가져옵니다.</summary>
            <value>형식입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="name">속성 이름입니다.</param>
            <param name="content">속성 콘텐츠입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="name">속성 이름입니다.</param>
            <param name="content">속성 콘텐츠입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonWriter"/>에 이 토큰을 작성합니다.</summary>
            <param name="writer">이 메서드가 작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="converters">토큰을 작성할 때 사용되는 <see cref="T:Newtonsoft.Json.JsonConverter"/> 컬렉션입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.JsonReader"/>의 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>을(를) 로드합니다.</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JProperty"/>의 내용을 읽을 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 읽은 JSON을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.JsonReader"/>의 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>을(를) 로드합니다.</summary>
            <param name="reader"><see cref="T:Newtonsoft.Json.Linq.JProperty"/>의 내용을 읽을 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="settings">JSON을 로드하는 데 사용하는 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>입니다. null이면 기본 로드 설정이 사용됩니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 읽은 JSON을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JProperty"/>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
            <summary><see cref="T:Newtonsoft.Json.Linq.JProperty"/>의 보기를 나타냅니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="name">이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>파생 클래스에서 재정의하면 개체를 재설정하여 해당 값이 변경되는지 여부를 반환합니다.</summary>
            <returns>구성 요소를 재설정하여 true가 해당 값이 변경되는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
            <param name="component">재설정 기능을 테스트할 구성 요소입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>파생 클래스에서 재정의하면 구성 요소에서 속성의 현재 값을 가져옵니다.</summary>
            <returns>지정된 구성 요소에 대한 속성 값입니다.</returns>
            <param name="component">값을 검색할 속성이 있는 구성 요소입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>파생 클래스에서 재정의하면 구성 요소의 이 속성에 대한 값을 기본값으로 다시 설정합니다.</summary>
            <param name="component">기본값으로 다시 설정할 속성 값이 있는 구성 요소입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>파생 클래스에서 재정의하면 구성 요소의 값을 다른 값으로 설정합니다.</summary>
            <param name="component">설정할 속성 값이 있는 구성 요소입니다.</param><param name="value">새 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>파생 클래스에서 재정의하면 이 속성의 값을 유지해야 하는지 여부를 나타내는 값을 결정합니다.</summary>
            <returns>속성을 유지해야하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
            <param name="component">지속성에 대해 검사할 속성이 있는 구성 요소입니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>파생 클래스에서 재정의하면 이 속성이 바인딩된 구성 요소의 형식을 가져옵니다.</summary>
            <returns>이 속성이 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type"/>입니다. <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> 또는 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> 메서드가 호출될 때 지정된 개체가 이 형식의 인스턴스일 수 있습니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>파생 클래스에서 재정의하면 이 속성이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
            <returns>읽기 전용인 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>파생 클래스에서 재정의하면 속성의 형식을 가져옵니다.</summary>
            <returns>속성의 형식을 나타내는 <see cref="T:System.Type"/>입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>멤버 이름에 대한 해시 코드를 가져옵니다.</summary>
            <value></value>
            <returns>멤버 이름에 대한 해시 코드입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JRaw">
            <summary>원시 JSON 문자열을 나타냅니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
            <summary>다른 <see cref="T:Newtonsoft.Json.Linq.JRaw"/> 개체에서 <see cref="T:Newtonsoft.Json.Linq.JRaw"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="other">복사할 <see cref="T:Newtonsoft.Json.Linq.JRaw"/> 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JRaw"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="rawJson">원시 JSON입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
            <summary>판독기의 현재 토큰의 콘텐츠가 있는 <see cref="T:Newtonsoft.Json.Linq.JRaw"/>의 인스턴스를 만듭니다.</summary>
            <param name="reader">판독기입니다.</param>
            <returns>판독기의 현재 토큰의 콘텐츠가 있는 <see cref="T:Newtonsoft.Json.Linq.JRaw"/>의 인스턴스입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JToken">
            <summary>JSON 추상 토큰을 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>값 같음에 대해 두 개의 토큰을 비교할 수 있는 비교자를 가져옵니다.</summary>
            <value>값 같음에 대해 두 노드를 비교할 수 있는 <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
            <summary>상위를 가져오거나 설정합니다.</summary>
            <value>상위입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Root">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 루트를 가져옵니다. </summary>
            <value>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의  <see cref="T:Newtonsoft.Json.Linq.JToken"/> 루트입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Type">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에 대한 노드 형식을 가져옵니다.</summary>
            <value>형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>이 토큰에 하위 토큰이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>이 토큰에 하위 값이 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>모든 하위 토큰의 값을 포함하여 두 토큰의 값을 비교합니다.</summary>
            <param name="t1">비교할 첫 번째 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</param>
            <param name="t2">비교할 두 번째 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</param>
            <returns>토큰이 같은 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Next">
            <summary>이 노드의 다음 형제 토큰을 가져옵니다.</summary>
            <value>다음 형제 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
            <summary>이 노드의 이전 형제 토큰을 가져옵니다.</summary>
            <value>이전 형제 토큰을 포함 하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Path">
            <summary>현재 JSON 토큰의 경로를 가져옵니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>이 토큰 바로 뒤에 지정된 콘텐츠를 추가합니다.</summary>
            <param name="content">이 토큰 뒤에 추가할 간단한 콘텐츠 또는 콘텐츠 개체의 컬렉션이 포함된 콘텐츠 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>이 토큰 바로 앞에 지정된 콘텐츠를 추가합니다.</summary>
            <param name="content">이 토큰 앞에 추가할 간단한 콘텐츠 또는 콘텐츠 개체의 컬렉션이 포함된 콘텐츠 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>이 토큰의 상위 토큰 컬렉션을 반환합니다.</summary>
            <returns>이 토큰의 상위 토큰 컬렉션입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
            <summary>이 토큰과 이 토큰의 상위 토큰을 포함하는 토큰 컬렉션을 반환합니다.</summary>
            <returns>이 토큰과 이 토큰의 상위 토큰을 포함하는 토큰의 컬렉션입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>문서 순서대로 이 토큰 뒤에 형제 토큰 컬렉션을 반환합니다.</summary>
            <returns>문서 순서대로 이 토큰 뒤에 형제 토큰 컬렉션입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>문서 순서대로 이 토큰 앞에 형제 토큰 컬렉션을 반환합니다.</summary>
            <returns>문서 순서대로 이 토큰 앞에 형제 토큰 컬렉션입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>지정된 키가 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 가져옵니다.</summary>
            <value>지정한 키가 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>지정된 유형으로 변환된 지정된 키가 있는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 가져옵니다.</summary>
            <typeparam name="T">토큰을 변환하는 형식입니다.</typeparam>
            <param name="key">토큰 키입니다.</param>
            <returns>변환된 토큰 값입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.First">
            <summary>이 토큰의 첫 번째 하위 토큰을 가져옵니다.</summary>
            <value><see cref="T:Newtonsoft.Json.Linq.JToken"/>의 첫 번째 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Last">
            <summary>이 토큰의 마지막 하위 토큰을 가져옵니다.</summary>
            <value><see cref="T:Newtonsoft.Json.Linq.JToken"/>의 마지막 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children">
            <summary>문서 순서대로 이 토큰의 하위 토큰 컬렉션을 반환합니다.</summary>
            <returns>문서 순서대로 이 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>문서 순서대로 지정된 유형에 따라 필터링된 이 토큰의 하위 토큰 컬렉션을 반환합니다.</summary>
            <typeparam name="T">하위 토큰을 필터링할 형식입니다.</typeparam>
            <returns>문서 순서대로 이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>문서 순서대로 이 토큰의 하위 값 컬렉션을 반환합니다.</summary>
            <typeparam name="T">값을 변환하는 형식입니다.</typeparam>
            <returns>문서 순서대로 이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 하위 값을 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
            <summary>상위에서 이 토큰을 제거합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
            <summary>이 토큰을 지정된 토큰으로 바꿉니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonWriter"/>에 이 토큰을 작성합니다.</summary>
            <param name="writer">이 메서드가 작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="converters">토큰을 작성할 때 사용되는 <see cref="T:Newtonsoft.Json.JsonConverter"/> 컬렉션입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
            <summary>이 토큰에 대한 들여쓰기된 JSON을 반환합니다.</summary>
            <returns>이 토큰에 대한 들여쓰기된 JSON입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>지정된 서식 및 변환기를 사용하여 이 토큰에 대한 JSON을 반환합니다.</summary>
            <param name="formatting">출력의 서식이 지정되는 방법을 나타냅니다.</param>
            <param name="converters">토큰을 작성할 때 사용되는 <see cref="T:Newtonsoft.Json.JsonConverter"/> 컬렉션입니다.</param>
            <returns>지정된 서식 및 변환기를 사용하는 이 토큰에 대한 JSON입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Boolean"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.DateTimeOffset"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Int64"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Int32"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Int16"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.UInt16"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Char"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Byte"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.SByte"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.DateTime"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Decimal"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Nullable`1"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Double"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Single"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.String"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.UInt32"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.UInt64"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Byte"/>[]까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Guid"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Guid"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.TimeSpan"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.TimeSpan"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:System.Uri"/>까지 명시적으로 변환을 수행합니다.</summary>
            <param name="value">값입니다.</param>
            <returns>변환의 결과입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Boolean"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.DateTimeOffset"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Byte"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.SByte"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Int16"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.UInt16"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Int32"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.DateTime"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Decimal"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Double"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Single"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.String"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.UInt32"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.UInt64"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Byte"/>[]에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Uri"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.TimeSpan"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Guid"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
            <summary><see cref="T:System.Nullable`1"/>에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>까지 암시적 변환을 수행합니다.</summary>
            <param name="value"><see cref="T:Newtonsoft.Json.Linq.JValue"/>을(를) 생성할 값입니다.</param>
            <returns>지정된 값으로 초기화된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>이 토큰에 대한 <see cref="T:Newtonsoft.Json.JsonReader"/>을(를) 만듭니다.</summary>
            <returns>이 토큰과 해당 하위 항목을 읽는 데 사용할 수 있는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>개체에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 만듭니다.</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 만드는 데 사용할 <see cref="T:Newtonsoft.Json.Linq.JToken"/>개체입니다.</param>
            <returns>지정된 개체의 값을 갖는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonSerializer"/>을(를) 사용하여 개체에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 만듭니다.</summary>
            <param name="o"><see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 만드는 데 사용할 개체입니다.</param>
            <param name="jsonSerializer">개체를 읽을 때 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializer"/>입니다.</param>
            <returns>지정된 개체의 값을 갖는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 지정된 .NET 형식을 만듭니다.</summary>
            <typeparam name="T">토큰이 역직렬화될 개체 유형입니다.</typeparam>
            <returns>JSON 값에서 만든 새 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 지정된 .NET 형식을 만듭니다.</summary>
            <param name="objectType">토큰이 역직렬화될 개체 유형입니다.</param>
            <returns>JSON 값에서 만든 새 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonSerializer"/>을(를) 사용하여 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 지정된 .NET 형식을 만듭니다.</summary>
            <typeparam name="T">토큰이 역직렬화될 개체 유형입니다.</typeparam>
            <param name="jsonSerializer"><see cref="T:Newtonsoft.Json.JsonSerializer"/>개체를 만들 때 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializer"/>입니다.</param>
            <returns>JSON 값에서 만든 새 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonSerializer"/>을(를) 사용하여 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 지정된 .NET 형식을 만듭니다.</summary>
            <param name="objectType">토큰이 역직렬화될 개체 유형입니다.</param>
            <param name="jsonSerializer"><see cref="T:Newtonsoft.Json.JsonSerializer"/>개체를 만들 때 사용하는 <see cref="T:Newtonsoft.Json.JsonSerializer"/>입니다.</param>
            <returns>JSON 값에서 만든 새 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:Newtonsoft.Json.JsonReader"/>을(를) 만듭니다.</summary>
            <param name="reader">이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>(으)로 읽기 위해 토큰에 위치 지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <returns>판독기에서 읽은 토큰 및 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다. 토큰의 런타임 유형은 판독기에서 발생한 첫 번째 토큰의 토큰 유형에 의해 결정됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:Newtonsoft.Json.JsonReader"/>을(를) 만듭니다.</summary>
            <param name="reader">이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>(으)로 읽기 위해 토큰에 위치 지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="settings">JSON을 로드하는 데 사용하는 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>입니다. null이면 기본 로드 설정이 사용됩니다.</param>
            <returns>판독기에서 읽은 토큰 및 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다. 토큰의 런타임 유형은 판독기에서 발생한 첫 번째 토큰의 토큰 유형에 의해 결정됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>JSON이 포함된 문자열에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 로드합니다.</summary>
            <param name="json">JSON을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <returns>JSON을 포함하는 문자열에서 채워진 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>JSON이 포함된 문자열에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 로드합니다.</summary>
            <param name="json">JSON을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <param name="settings">JSON을 로드하는 데 사용하는 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>입니다. null이면 기본 로드 설정이 사용됩니다.</param>
            <returns>JSON을 포함하는 문자열에서 채워진 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:Newtonsoft.Json.JsonReader"/>을(를) 만듭니다.</summary>
            <param name="reader">이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>(으)로 읽기 위해 토큰에 위치 지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="settings">JSON을 로드하는 데 사용하는 <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>입니다. null이면 기본 로드 설정이 사용됩니다.</param>
            <returns>판독기에서 읽은 토큰 및 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다. 토큰의 런타임 유형은 판독기에서 발생한 첫 번째 토큰의 토큰 유형에 의해 결정됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 <see cref="T:Newtonsoft.Json.JsonReader"/>을(를) 만듭니다.</summary>
            <param name="reader">이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>(으)로 읽기 위해 토큰에 위치 지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <returns>판독기에서 읽은 토큰 및 하위 토큰을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다. 토큰의 런타임 유형은 판독기에서 발생한 첫 번째 토큰의 토큰 유형에 의해 결정됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>JPath 식을 사용하여 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 선택합니다. 개체 경로와 일치하는 토큰을 선택합니다.</summary>
            <param name="path">JPath 식을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/> 또는 null입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>JPath 식을 사용하여 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 선택합니다. 개체 경로와 일치하는 토큰을 선택합니다.</summary>
            <param name="path">JPath 식을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <param name="errorWhenNoMatch">식의 일부를 평가할 때 토큰을 찾을 수 없는 경우 오류가 발생하는 여부를 나타내는 플래그입니다.</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>JPath 식을 사용하여 요소 컬렉션을 선택합니다.</summary>
            <param name="path">JPath 식을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <returns>선택한 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>JPath 식을 사용하여 요소 컬렉션을 선택합니다.</summary>
            <param name="path">JPath 식을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <param name="errorWhenNoMatch">식의 일부를 평가할 때 토큰을 찾을 수 없는 경우 오류가 발생하는 여부를 나타내는 플래그입니다.</param>
            <returns>선택한 요소를 포함하는 <see cref="T:System.Collections.Generic.IEnumerable`1"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>이 개체에서 수행된 바인딩 작업에 대한 <see cref="T:System.Dynamic.DynamicMetaObject"/> 책임을 반환합니다.</summary>
            <param name="parameter">런타임 값의 표현식 트리입니다.</param>
            <returns>이 개체를 바인딩하는 <see cref="T:System.Dynamic.DynamicMetaObject"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>이 개체에서 수행된 바인딩 작업에 대한 <see cref="T:System.Dynamic.DynamicMetaObject"/> 책임을 반환합니다.</summary>
            <param name="parameter">런타임 값의 표현식 트리입니다.</param>
            <returns>이 개체를 바인딩하는 <see cref="T:System.Dynamic.DynamicMetaObject"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary><see cref="T:Newtonsoft.Json.Linq.JToken"/>의 새 인스턴스를 만듭니다. 모든 하위 토큰은 재귀적으로 복제됩니다.</summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/>의 새 인스턴스입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 주석 목록에 개체를 추가합니다.</summary>
            <param name="annotation">추가할 주석입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation``1">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 지정된 형식의 첫 번째 주석 개체를 가져옵니다.</summary>
            <typeparam name="T">검색할 주석 유형입니다.</typeparam>
            <returns>지정된 형식과 일치하는 첫 번째 주석 개체 또는 지정된 형식의 주석이 없는 경우 <c>null</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 지정된 형식의 첫 번째 주석 개체를 가져옵니다.</summary>
            <param name="type">검색할 주석의 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</param>
            <returns>지정된 형식과 일치하는 첫 번째 주석 개체 또는 지정된 형식의 주석이 없는 경우 <c>null</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations``1">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에 대해 지정된 형식의 주석 컬렉션을 가져옵니다.</summary>
            <typeparam name="T">검색할 주석 유형입니다.</typeparam>
            <returns>이 <see cref="T:System.Collections.Generic.IEnumerable`1"/>에 대한 주석이 포함된 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에 대해 지정된 형식의 주석 컬렉션을 가져옵니다.</summary>
            <param name="type">검색할 주석의 <see cref="T:Newtonsoft.Json.Linq.JToken"/>입니다.</param>
            <returns>이 <see cref="T:System.Object"/>에 대해 지정된 형식과 일치하는 주석을 포함하는 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 <see cref="T:System.Object"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 지정된 형식의 주석을 제거합니다.</summary>
            <typeparam name="T">제거할 주석 유형입니다.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에서 지정된 형식의 주석을 제거합니다.</summary>
            <param name="type">제거할 주석의 <see cref="P:Newtonsoft.Json.Linq.JToken.Type"/>입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>토큰이 동일한지 여부를 결정하기 위해 토큰을 비교합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>지정된 개체가 같은지 여부를 결정합니다.</summary>
            <param name="x">비교할 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 유형의 첫 번째 개체입니다.</param>
            <param name="y">비교할 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 유형의 두 번째 개체입니다.</param>
            <returns>지정된 개체가 같은 경우 <c> true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
            <summary>지정된 개체에 대한 해시 코드를 반환합니다.</summary>
            <param name="obj">해시 코드를 반환해야 하는 <see cref="T:System.Object"/>입니다.</param>
            <returns>지정된 개체에 대한 해시 코드입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>의 형식은 참조 형식이며 <paramref name="obj"/>은(는) null입니다. </exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenReader">
            <summary>직렬화된 JSON 데이터에 대한 캐시되지 않은 정방향 전용 빠른 액세스를 제공하는 판독기를 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
            <summary>판독기의 현재 위치에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>를 가져옵니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JTokenReader"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="token">읽을 토큰입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>스트림에서 다음 JSON 토큰을 읽습니다.</summary>
            <returns>다음 토큰을 성공적으로 읽은 경우 <c>true</c> 입니다. 읽을 토큰이 더 이상 없는 경우 <c>false</c>입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>현재 JSON 토큰의 경로를 가져옵니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenType">
            <summary>토큰의 유형을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
            <summary>토큰 유형이 설정되지 않았습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>JSON 개체입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>JSON 배열입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>JSON 생성자입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>JSON 개체 속성입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>주석입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>정수 값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>부동 소수 값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
            <summary>문자열 값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>부울 값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>null 값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>정의되지 않은 값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>날짜 값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>원시 JSON 값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>바이트 값의 컬렉션입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>Guid 값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>Uri 값입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>TimeSpan 값입니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
            <summary>JSON 데이터를 빠르고, 캐시되지 않고, 전달 전용으로 생성하는 방법을 제공하는 작성자를 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
            <summary>작성기의 현재 위치에서 <see cref="T:Newtonsoft.Json.Linq.JToken"/>을(를) 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>작성 중인 토큰을 가져옵니다.</summary>
            <value>작성 중인 토큰입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/>에 작성하여 <see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="container">작성 중인 컨테이너입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>버퍼에 있는 모든 것을 기본 스트림으로 플러시하고 기본 스트림을 플러시합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>이 스트림과 기본 스트림을 닫습니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>JSON 개체의 시작 부분을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>JSON 배열의 시작을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>지정된 이름으로 생성자의 시작을 작성합니다.</summary>
            <param name="name">생성자의 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>끝을 작성합니다.</summary>
            <param name="token">토큰입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>JSON 개체에 이름/값 쌍의 속성 이름을 작성합니다.</summary>
            <param name="name">속성의 이름입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary><see cref="T:System.Object"/>값을 작성합니다. 값을 단일 JSON 토큰으로 작성할 수 없는 경우 오류가 발생합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Object"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>null 값을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>정의되지 않은 값을 작성합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>원시 JSON을 작성합니다.</summary>
            <param name="json">작성할 원시 JSON입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>지정된 텍스트를 포함하는 주석 <code>/*...*/을</code>작성합니다.</summary>
            <param name="text">주석 안에 배치할 텍스트입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary><see cref="T:System.String"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.String"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary><see cref="T:System.Int32"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int32"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary><see cref="T:System.UInt32"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt32"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary><see cref="T:System.Int64"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int64"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary><see cref="T:System.UInt64"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt64"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary><see cref="T:System.Single"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Single"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary><see cref="T:System.Double"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Double"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary><see cref="T:System.Boolean"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Boolean"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary><see cref="T:System.Int16"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Int16"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary><see cref="T:System.UInt16"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.UInt16"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary><see cref="T:System.Char"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Char"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary><see cref="T:System.Byte"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Byte"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary><see cref="T:System.SByte"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.SByte"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary><see cref="T:System.Decimal"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Decimal"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary><see cref="T:System.DateTime"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.DateTime"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary><see cref="T:System.DateTimeOffset"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.DateTimeOffset"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary><see cref="T:System.Byte"/>[] 값을 작성합니다.</summary>
            <param name="value"><see cref="T:System.Byte"/>작성할 <see cref="T:System.Byte"/>[] 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary><see cref="T:System.TimeSpan"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.TimeSpan"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary><see cref="T:System.Guid"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Guid"/> 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary><see cref="T:System.Uri"/>값을 작성합니다.</summary>
            <param name="value">작성할 <see cref="T:System.Uri"/> 값입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JValue">
            <summary>JSON(문자열, 정수, 날짜 등)의 값을 나타냅니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
            <summary>다른 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 개체에서 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="other">복사할 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/>지정된 값으로 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">값입니다.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>이 토큰에 하위 토큰이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>이 토큰에 하위 값이 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>지정된 값이 있는 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 주석을 만듭니다.</summary>
            <param name="value">값입니다.</param>
            <returns>지정된 값이 있는 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 주석입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.Linq.JValue"/>값이 있는 문자열을 만듭니다.</summary>
            <param name="value">값입니다.</param>
            <returns>지정된 값이 있는 <see cref="T:Newtonsoft.Json.Linq.JValue"/> 문자열입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/> null 값을 작성합니다.</summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JValue"/> null 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary><see cref="T:Newtonsoft.Json.Linq.JValue"/> 정의되지 않은 값을 만듭니다.</summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JValue"/> 정의되지 않은 값입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Type">
            <summary>이 <see cref="T:Newtonsoft.Json.Linq.JToken"/>에 대한 노드 형식을 가져옵니다.</summary>
            <value>형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Value">
            <summary>기본 토큰 값을 가져오거나 설정합니다.</summary>
            <value>기본 토큰 값입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary><see cref="T:Newtonsoft.Json.JsonWriter"/>에 이 토큰을 작성합니다.</summary>
            <param name="writer">이 메서드가 작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="converters">토큰을 작성할 때 사용되는 <see cref="T:Newtonsoft.Json.JsonConverter"/> 컬렉션입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
            <summary>현재 개체가 동일한 형식의 다른 개체와 동일한지 여부를 나타냅니다.</summary>
            <returns>현재 개체가 <paramref name="other"/> 매개 변수와 같은 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
            <param name="other">이 개체와 비교할 개체입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>지정된 <see cref="T:System.Object"/>이(가) 현재 <see cref="T:System.Object"/>와(과) 동일한지 여부를 판별합니다.</summary>
            <param name="obj">현재 <see cref="T:System.Object"/>와(과) 비교할 <see cref="T:System.Object"/>입니다.</param>
            <returns>지정된 <see cref="T:System.Object"/>이(가) 현재 <see cref="T:System.Object"/>와(과) 같은 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
            <exception cref="T:System.NullReferenceException"><paramref name="obj"/> 매개 변수는 null입니다.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>특정 형식에 대한 해시 함수역할을 합니다.</summary>
            <returns>현재 <see cref="T:System.Object"/>에 대한 해시 코드입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
            <summary>이 인스턴스를 나타내는 <see cref="T:System.String"/>을(를) 반환합니다.</summary>
            <returns><see cref="T:System.String"/>이 인스턴스를 나타내는 <see cref="T:System.String"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>이 인스턴스를 나타내는 <see cref="T:System.String"/>을(를) 반환합니다.</summary>
            <param name="format">포맷입니다.</param>
            <returns><see cref="T:System.String"/>이 인스턴스를 나타내는 <see cref="T:System.String"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>이 인스턴스를 나타내는 <see cref="T:System.String"/>을(를) 반환합니다.</summary>
            <param name="formatProvider">포맷 공급자입니다.</param>
            <returns><see cref="T:System.String"/>이 인스턴스를 나타내는 <see cref="T:System.String"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>이 인스턴스를 나타내는 <see cref="T:System.String"/>을(를) 반환합니다.</summary>
            <param name="format">포맷입니다.</param>
            <param name="formatProvider">포맷 공급자입니다.</param>
            <returns><see cref="T:System.String"/>이 인스턴스를 나타내는 <see cref="T:System.String"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>이 개체에서 수행된 바인딩 작업에 대한 <see cref="T:System.Dynamic.DynamicMetaObject"/> 책임을 반환합니다.</summary>
            <param name="parameter">런타임 값의 표현식 트리입니다.</param>
            <returns>이 개체를 바인딩하는 <see cref="T:System.Dynamic.DynamicMetaObject"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
            <summary>현재 인스턴스를 동일한 형식의 다른 개체와 비교하고 현재 인스턴스가 다른 개체와 정렬 순서상 동일한 위치에서 선행, 추적 또는 발생하는지 여부를 나타내는 정수를 반환합니다.</summary>
            <param name="obj">이 인스턴스와 비교할 개체입니다.</param>
            <returns>비교 중인 개체의 상대적 순서를 나타내는 32비트 서명된 정수입니다. 반환 값에는 다음과 같은 의미가 있습니다. 0보다 작은 값. 이 인스턴스는 <paramref name="obj"/>보다 적습니다. 0. 이 인스턴스는 <paramref name="obj"/>와(과) 같습니다. 0보다 큰 값. 이 인스턴스는 <paramref name="obj"/>보다 큽니다.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> 이 인스턴스와 동일한 형식이 아닙니다.</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonLoadSettings">
            <summary>JSON을 로드할 때 사용되는 설정을 지정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>JSON을 로드할 때 JSON 주석을 처리하는 방법을 가져오거나 설정합니다.</summary>
            <value>JSON 주석 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>JSON을 로드할 때 JSON 라인 정보가 처리되는 방법을 가져오거나 설정합니다.</summary>
            <value>JSON 라인 정보 처리입니다.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeArrayHandling">
            <summary>JSON 배열이 함께 병합되는 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
            <summary>배열을 연결합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Union">
            <summary>이미 존재하는 항목을 건너뛰는 공용 구조체의 배열입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
            <summary>모든 배열 항목을 바꿉니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
            <summary>인덱스와 일치하는 배열 항목을 함께 병합합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeNullValueHandling">
            <summary>null 값 속성을 병합하는 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>병합하는 동안 콘텐츠의 null 값 속성은 무시합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
            <summary>콘텐츠의 null 값 속성을 병합합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.MemberSerialization">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에 대한 멤버 직렬화 옵션을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>모든 공용 멤버는 기본적으로 직렬화됩니다. <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> 또는 <see cref="T:System.NonSerializedAttribute"/>을 사용하여 멤버를 제외할 수 있습니다. 기본 멤버 직렬화 모드입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
            <summary><see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> 또는 <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> 표시된 멤버만이 직렬화됩니다. 이 멤버 직렬화 모드는 클래스를 <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>로 표시하여 설정할 수도 있습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
            <summary>모든 공용 및 비공개 필드는 직렬화됩니다. <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> 또는 <see cref="T:System.NonSerializedAttribute"/>을 사용하여 멤버를 제외할 수 있습니다. 이 멤버 직렬화 모드는 클래스를 <see cref="T:System.SerializableAttribute"/>로 표시하고 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/>의 IgnoreSerializableAttribute를 False에 설정하여 설정할 수도 있습니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.MetadataPropertyHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에 대한 메타데이터 속성 처리 옵션을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>JSON 개체의 시작 부분에 있는 메타데이터 속성을 읽습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>JSON 개체의 아무 곳에나 있는 메타데이터 속성을 읽습니다. 이 설정은 성능에 영향을 미칩니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Ignore">
            <summary>메타데이터 속성을 읽으려고 시도하지 마세요.</summary>
        </member>
        <member name="T:Newtonsoft.Json.MissingMemberHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에 대한 누락된 멤버 처리 옵션을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>누락된 멤버를 무시하고 직렬화하려고 시도하지 마세요.</summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>직렬화 중에 누락된 멤버가 발생하면 <see cref="T:Newtonsoft.Json.JsonSerializationException"/>을(를) throw합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.NullValueHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에 대한 null 값 처리 옵션을 지정합니다.</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" /> <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" /></example>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Include">
            <summary>개체를 직렬화 및 역직렬화할 때 null 값을 포함합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>개체를 직렬화 및 역직렬화할 때 null 값을 무시합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.ObjectCreationHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에서 개체 생성을 처리하는 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>기존 객체를 다시 사용하고 필요할 때 새 객체를 만듭니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>기존 객체만 다시 사용합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>항상 새 개체를 만듭니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에 대한 참조 처리 옵션을 지정합니다. ISerializable을 구현하는 형식과 같은 기본이 아닌 생성자를 통해 값을 설정하면 참조를 보존할 수 없습니다.</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" /></example>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>형식을 직렬화할 때 참조를 보존하지 마세요.</summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>JSON 개체 구조로 직렬화할 때 참조를 보존합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>JSON 배열 구조로 직렬화할 때 참조를 보존합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>직렬화할 때 참조를 보존합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에 대한 참조 루프 처리 옵션을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>루프가 발생하면 <see cref="T:Newtonsoft.Json.JsonSerializationException"/>을(를) throw합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>루프 참조를 무시하고 직렬화하지 마세요.</summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>루프 참조를 직렬화합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Required">
            <summary>속성이 필요한지 여부를 나타냅니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Default">
            <summary>속성은 필요하지 않습니다. 기본 상태입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.AllowNull">
            <summary>속성은 JSON에서 정의되어야 하지만 null 값이 될 수 있습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Always">
            <summary>속성은 JSON에서 정의되어야 하며 null 값이 될 수 없습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.DisallowNull">
            <summary>속성은 필요하지 않지만 null 값이 될 수 없습니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Extensions">
            <summary>
            <para>JSON 스키마 확장 메서드를 포함합니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Linq.JToken"/>이(가) 유효한지 여부를 결정합니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
            <param name="source">테스트할 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 소스입니다.</param>
            <param name="schema">테스트할 스키마입니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.Linq.JToken"/>이(가) 유효한 경우 <c> true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Linq.JToken"/>이(가) 유효한지 여부를 결정합니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
            <param name="source">테스트할 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 소스입니다.</param>
            <param name="schema">테스트할 스키마입니다.</param>
            <param name="errorMessages">이 메서드가 반환되면 유효성을 검사하는 동안 생성된 오류 메시지가 포함됩니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.Linq.JToken"/>이(가) 유효한 경우 <c> true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>지정된 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 유효성을 검사합니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
            <param name="source">테스트할 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 소스입니다.</param>
            <param name="schema">테스트할 스키마입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            <para>지정된 <see cref="T:Newtonsoft.Json.Linq.JToken"/>의 유효성을 검사합니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
            <param name="source">테스트할 <see cref="T:Newtonsoft.Json.Linq.JToken"/> 소스입니다.</param>
            <param name="schema">테스트할 스키마입니다.</param>
            <param name="validationEventHandler">유효성 검사 이벤트 처리기입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            <para>JSON 스키마의 메모리 내 표현입니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>ID를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>제목을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>개체가 필요한지 여부를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>개체가 읽기 전용인지 여부를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>개체가 사용자에게 표시되는지 여부를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>개체가 일시적인지 여부를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>개체의 설명을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>개체에서 허용하는 값의 형식을 가져오거나 설정합니다.</summary>
            <value>형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>패턴을 가져오거나 설정합니다.</summary>
            <value>패턴입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>최소 길이를 가져오거나 설정합니다.</summary>
            <value>최소 길이입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>최대 길이를 가져오거나 설정합니다.</summary>
            <value>최대 길이입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>값을 분할해야 하는 숫자를 가져오거나 설정합니다.</summary>
            <value>값을 분할해야 하는 숫자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>최소값을 가져오거나 설정합니다.</summary>
            <value>최소값입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>최대값을 가져오거나 설정합니다.</summary>
            <value>최대값입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>값이 &quot;최소&quot; 특성에 의해 정의된 숫자와 같을 수 없는지 여부를 나타내는 플래그를 가져오거나 설정합니다.</summary>
            <value>값이 &quot;최소&quot; 특성에 의해 정의된 숫자와 같을 수 없는지 여부를 나타내는 플래그입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>값이 &quot;최대&quot; 특성에 의해 정의된 숫자와 같을 수 없는지 여부를 나타내는 플래그를 가져오거나 설정합니다.</summary>
            <value>값이 &quot;최대&quot; 특성에 의해 정의된 숫자와 같을 수 없는지 여부를 나타내는 플래그입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>최소 항목 수를 가져오거나 설정합니다.</summary>
            <value>최소 항목 수입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>최대 항목 수를 가져오거나 설정합니다.</summary>
            <value>최대 항목 수입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>항목 중 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 가져오거나 설정합니다.</summary>
            <value>항목 중 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary><see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items"/>의 배열 위치에서 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 인스턴스를 사용하여 배열의 항목의 유효성을 검사하는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>배열 위치를 사용하여 항목의 유효성을 검사하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>추가 항목 중 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 가져오거나 설정합니다.</summary>
            <value>추가 항목 중 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>추가 항목이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>추가 항목이 허용되는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>배열 항목이 고유해야 하는지 여부를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>속성 중 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 가져오거나 설정합니다.</summary>
            <value>속성 중 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>추가 속성 중 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을 가져오거나 설정합니다.</summary>
            <value>추가 속성 중 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>패턴 속성을 가져오거나 설정합니다.</summary>
            <value>패턴 속성입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>추가 속성이 허용되는지 여부를 나타내는 값을 얻거나 설정합니다.</summary>
            <value>추가 속성이 허용되는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>이 속성이 있는 경우 필요한 속성을 가져오거나 설정합니다.</summary>
            <value>이 속성이 있는 경우 필수 속성입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>허용되는 유효한 열거형 값의 컬렉션을 가져오거나 설정합니다.</summary>
            <value>허용되는 유효한 열거형 값의 컬렉션입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>허용되지 않는 형식을 가져오거나 설정합니다.</summary>
            <value>허용되지 않는 형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>기본값을 가져오거나 설정합니다.</summary>
            <value>기본값입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>이 스키마가 확장되는 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>의 컬렉션을 가져오거나 설정합니다.</summary>
            <value>이 스키마가 확장되는 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>의 컬렉션입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>포맷을 가져오거나 설정합니다.</summary>
            <value>포맷입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 읽습니다.</summary>
            <param name="reader">읽을 JSON 스키마를 포함하는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <returns><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>JSON 스키마를 나타내는 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.JsonReader"/>에서 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 읽습니다.</summary>
            <param name="reader">읽을 JSON 스키마를 포함하는 <see cref="T:Newtonsoft.Json.JsonReader"/>입니다.</param>
            <param name="resolver">스키마 참조를 확인하는 데 사용하는 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>입니다.</param>
            <returns>JSON 스키마를 나타내는 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> 개체입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>JSON 스키마를 포함하는 문자열에서 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 로드합니다.</summary>
            <param name="json">JSON을 포함하는 <see cref="T:System.String"/>입니다.</param>
            <returns>JSON을 포함하는 문자열에서 채워진 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>지정된 JSON을 구문 분석합니다.</summary>
            <param name="json">JSON입니다.</param>
            <param name="resolver">확인자입니다.</param>
            <returns>JSON을 포함하는 문자열에서 채워진 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
            <summary><see cref="T:Newtonsoft.Json.JsonWriter"/>에 이 스키마를 작성합니다.</summary>
            <param name="writer">이 메서드가 작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>을(를) 사용하여 <see cref="T:Newtonsoft.Json.JsonWriter"/>에 이 스키마를 작성합니다.</summary>
            <param name="writer">이 메서드가 작성할 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</param>
            <param name="resolver">사용된 확인자입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>현재 <see cref="T:Newtonsoft.Json.JsonWriter"/>을(를) 나타내는 <see cref="T:Newtonsoft.Json.JsonWriter"/>을(를) 반환합니다.</summary>
            <returns>현재 <see cref="T:Newtonsoft.Json.JsonWriter"/>을(를) 나타내는 <see cref="T:Newtonsoft.Json.JsonWriter"/>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            <para>스키마 예외에 대한 자세한 정보를 반환합니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>오류가 발생한 위치를 나타내는 줄 번호를 가져옵니다.</summary>
            <value>오류가 발생한 위치를 나타내는 줄 번호입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>오류가 발생한 위치를 나타내는 선 위치를 가져옵니다.</summary>
            <value>오류가 발생한 위치를 나타내는 선 위치입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>오류가 발생한 JSON에 대한 경로를 가져옵니다.</summary>
            <value>오류가 발생한 JSON에 대한 경로입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>지정된 오류 메시지와 함께 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="message">예외의 이유를 설명하는 오류 메시지입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>지정된 오류 메시지와 이 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="message">예외의 이유를 설명하는 오류 메시지입니다.</param>
            <param name="innerException">내부 예외가 지정되지 않은 경우 현재 예외의 원인 또는 null 참조(Visual Basic의 없음)인 예외입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="info">발생하는 예외에 대한 직렬화된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo"/>입니다.</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>소스 또는 대상에 대한 컨텍스트 정보가 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext"/>입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 매개 변수는 null입니다.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">클래스 이름은 null이거나 <see cref="P:System.Exception.HResult"/>이 제로(0)입니다.</exception>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            <para>지정된 <see cref="T:System.Type"/>에서 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 생성합니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>직렬화기에 의해 정의하지 않은 스키마가 보존되는 방법을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>계약 확인자를 가져오거나 설정합니다.</summary>
            <value>계약 확인자입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>지정된 형식에서 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 생성합니다.</summary>
            <param name="type"><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 생성할 형식입니다.</param>
            <returns>지정된 형식에서 생성된 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>지정된 형식에서 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 생성합니다.</summary>
            <param name="type"><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 생성할 형식입니다.</param>
            <param name="resolver">스키마 참조를 확인하는 데 사용하는 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>입니다.</param>
            <returns>지정된 형식에서 생성된 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>지정된 형식에서 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 생성합니다.</summary>
            <param name="type"><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 생성할 형식입니다.</param>
            <param name="rootSchemaNullable">생성된 루트가 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>null일지 여부를 지정합니다.</param>
            <returns>지정된 형식에서 생성된 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>지정된 형식에서 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 생성합니다.</summary>
            <param name="type"><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 생성할 형식입니다.</param>
            <param name="resolver">스키마 참조를 확인하는 데 사용하는 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>입니다.</param>
            <param name="rootSchemaNullable">생성된 루트가 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>null일지 여부를 지정합니다.</param>
            <returns>지정된 형식에서 생성된 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            <para>ID에서 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 확인합니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>로드된 스키마를 가져오거나 설정합니다.</summary>
            <value>로드된 스키마입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>지정된 참조에 대한 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>을(를) 가져옵니다.</summary>
            <param name="reference">ID입니다.</param>
            <returns>지정된 참조에 대한 <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>에서 허용하는 값 형식입니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>지정된 형식이 없습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>문자열 형식입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>부동 소수 형식입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>정수 유형입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>부울 형식입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>개체 형식입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>배열 형식입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>Null 형식입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>모든 형식입니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator"/>에 대해 정의되지 않은 스키마 ID 처리 옵션을 지정합니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>스키마 ID를 유추하지 마세요.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>.NET 형식 이름을 스키마 ID로 사용합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>어셈블리 정규화된 .NET 형식 이름을 스키마 ID로 사용합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            <para><see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler"/>에 관련된 자세한 정보를 반환합니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>유효성 검사 오류와 연결된 <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/>을(를) 가져옵니다.</summary>
            <value>유효성 검사 오류와 연결된 JsonSchemaException입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>유효성 검사 오류가 발생한 JSON 위치의 경로를 가져옵니다.</summary>
            <value>유효성 검사 오류가 발생한 JSON 위치의 경로입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>유효성 검사 오류에 해당하는 텍스트 설명을 가져옵니다.</summary>
            <value>텍스트 설명입니다.</value>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            <para>JSON 스키마 유효성 검사 이벤트 및 <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs"/>을(를) 처리하는 콜백 메서드를 나타냅니다.</para>
            <note type="caution">JSON 스키마 유효성 검사가 자체 패키지로 이동되었습니다. 자세한 내용은 <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>를 참조하세요.</note>
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>스네이크 케이스 명명 전략입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="processDictionaryKeys">사전 키를 처리해야 하는지 여부를 나타내는 플래그입니다.</param>
            <param name="overrideSpecifiedNames">명시적으로 지정한 속성 이름을 처리할지 여부를 나타내는 플래그(예: <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>로 사용자 지정된 속성 이름).</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>지정된 속성 이름을 확인합니다.</summary>
            <param name="name">확인할 속성 이름입니다.</param>
            <returns>확인된 속성 이름입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
            <summary>카멜 케이스 명명 전략입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="processDictionaryKeys">사전 키를 처리해야 하는지 여부를 나타내는 플래그입니다.</param>
            <param name="overrideSpecifiedNames">명시적으로 지정한 속성 이름을 처리할지 여부를 나타내는 플래그(예: <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>로 사용자 지정된 속성 이름).</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>지정된 속성 이름을 확인합니다.</summary>
            <param name="name">확인할 속성 이름입니다.</param>
            <returns>확인된 속성 이름입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>형식, 카멜 케이스 속성 이름에 대한 멤버 매핑을 확인합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>지정된 <see cref="T:System.Type"/>에 대해 <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>을(를) 확인하기 위해 <see cref="T:Newtonsoft.Json.JsonSerializer"/>가 사용합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>동적 코드 생성을 사용하여 멤버를 얻고 설정하는지 여부를 나타내는 값을 가져옵니다. 이 값은 사용 가능한 런타임 사용 권한에 따라 결정됩니다.</summary>
            <value>동적 코드 생성을 사용하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>기본 멤버 검색 플래그를 가져오거나 설정합니다.</summary>
            <value>기본 멤버 검색 플래그입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>컴파일러 생성된 멤버를 직렬화해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>컴파일러 생성된 멤버를 직렬화하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>형식을 직렬화 및 역직렬화할 때 <see cref="T:System.Runtime.Serialization.ISerializable"/> 인터페이스를 무시할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>형식을 직렬화 및 역직렬화할 때 <see cref="T:System.Runtime.Serialization.ISerializable"/> 인터페이스를 무시하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>형식을 직렬화 및 역직렬화할 때 <see cref="T:System.Runtime.Serialization.ISerializable"/> 특성을 무시할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>형식을 직렬화 및 역직렬화할 때 <see cref="T:System.Runtime.Serialization.ISerializable"/> 특성을 무시하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>속성 이름과 사전 키가 직렬화되는 방법을 확인하는 데 사용되는 명명 전략을 가져오거나 설정합니다.</summary>
            <value>속성 이름과 사전 키가 직렬화되는 방법을 확인하는 데 사용되는 명명 전략입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="shareCache"><c>true</c>로 설정하면 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/>은(는) 동일한 유형의 다른 확인자와 공유된 캐시를 사용합니다. 캐시를 공유하면 비용이 많이 드는 리플렉션이 한 번만 발생하기 때문에 여러 확인자 인스턴스에서 성능이 크게 향상됩니다. 이 설정은 확인자의 다른 인스턴스가 다른 결과를 생성하는 것으로 가정하는 경우 예기치 않은 동작을 일으킬 수 있습니다. false로 설정하면 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/>을 사용하여 <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/> 인스턴스를 재사용하는 것이 좋습니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>지정된 형식에 대한 계약을 확인합니다.</summary>
            <param name="type">계약을 확인할 형식입니다.</param>
            <returns>지정된 형식에 대한 계약입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>형식에 대한 직렬화 가능한 멤버를 가져옵니다.</summary>
            <param name="objectType">직렬화 가능한 멤버를 가져올 수 있는 형식입니다.</param>
            <returns>형식에 대한 직렬화 가능한 멤버입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/>을(를) 만듭니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>생성자 매개 변수를 만듭니다.</summary>
            <param name="constructor">속성을 만드는 생성자입니다.</param>
            <param name="memberProperties">형식의 멤버 속성입니다.</param>
            <returns>지정된 <see cref="T:System.Reflection.ConstructorInfo"/>에 대한 속성입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/>에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/>을(를) 만듭니다.</summary>
            <param name="matchingMemberProperty">일치하는 멤버 속성입니다.</param>
            <param name="parameterInfo">생성자 매개 변수입니다.</param>
            <returns>지정된 <see cref="T:System.Reflection.ParameterInfo"/>에 대해 만든 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>계약의 <see cref="T:Newtonsoft.Json.JsonConverter" /> 기본값을 확인합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>계약의 <see cref="T:Newtonsoft.Json.JsonConverter" /> 기본값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/>을(를) 만듭니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/>을(를) 만듭니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/>을(를) 만듭니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/>을(를) 만듭니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/>을(를) 만듭니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/>을(를) 만듭니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/>을(를) 만듭니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>지정된 형식에 대해 생성되는 계약 유형을 결정합니다.</summary>
            <param name="objectType">개체의 형식입니다.</param>
            <returns>지정된 형식에 대한 <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>에 대한 속성을 만듭니다.</summary>
            <param name="type">속성을 만들 형식입니다.</param>/// <param name="memberSerialization">형식의 멤버 직렬화 모드입니다.</param>
            <returns>지정된 <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>에 대한 속성입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>직렬화기에서 멤버의 값을 얻고 설정하는 데 사용하는 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>을(를) 만듭니다.</summary>
            <param name="member">멤버입니다.</param>
            <returns>직렬화기에서 멤버의 값을 얻고 설정하는 데 사용하는 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>지정된 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>을 위해 <see cref="T:System.Reflection.MemberInfo"/>을(를) 만듭니다.</summary>
            <param name="memberSerialization">멤버의 상위 <see cref="T:Newtonsoft.Json.MemberSerialization"/>입니다.</param>
            <param name="member"><see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>을(를) 생성할 멤버입니다.</param>
            <returns>지정된 <see cref="T:System.Reflection.MemberInfo"/>에 대해 만든 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>속성의 이름을 확인합니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
            <returns>속성의 확인된 이름입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>사전의 키를 확인합니다. 기본적으로 <see cref="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)"/>은(는) 사전 키를 확인하는 데 사용됩니다.</summary>
            <param name="dictionaryKey">사전의 키입니다.</param>
            <returns>사전의 확인된 키입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>속성의 확인된 이름을 가져옵니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
            <returns>속성의 이름입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultNamingStrategy">
            <summary>기본 명명 전략입니다. 속성 이름과 사전 키는 변경되지 않습니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>지정된 속성 이름을 확인합니다.</summary>
            <param name="name">확인할 속성 이름입니다.</param>
            <returns>확인된 속성 이름입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>형식 이름에서 클래스를 확인 및 로드할 때 사용되는 기본 직렬화 바인더입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>파생 클래스에서 재정의된 경우 직렬화된 개체의 바인딩을 제어합니다.</summary>
            <param name="assemblyName">직렬화된 개체의 <see cref="T:System.Reflection.Assembly"/> 이름을 지정합니다.</param>
            <param name="typeName">직렬화된 개체의 <see cref="T:System.Type"/> 이름을 지정합니다.</param>
            <returns>형식 지정자가 새 인스턴스를 생성하는 개체 유형입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>파생 클래스에서 재정의된 경우 직렬화된 개체의 바인딩을 제어합니다.</summary>
            <param name="serializedType">형식 지정자가 새 인스턴스를 생성하는 개체 유형입니다.</param>
            <param name="assemblyName">직렬화된 개체의 <see cref="T:System.Reflection.Assembly"/> 이름을 지정합니다.</param>
            <param name="typeName">직렬화된 개체의 <see cref="T:System.Type"/> 이름을 지정합니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
            <summary>애플리케이션의 <see cref="T:System.Diagnostics.TraceListener"/> 인스턴스에 기록하는 추적 작성기를 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>작성자에 전달된 추적 메시지를 필터링하는 데 사용할 <see cref="T:System.Diagnostics.TraceLevel"/>을(를) 가져옵니다. 예를 들어, <code>정보</code>의 필터 수준에서 <code>Verbose</code> 메시지가 제외되고 <code>정보</code>, <code>경고</code> 및 <code>오류</code> 메시지가 포함됩니다.</summary>
            <value>작성자에 전달된 추적 메시지를 필터링하는 데 사용하는 <see cref="T:System.Diagnostics.TraceLevel"/>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>지정된 추적 수준, 메시지 및 선택적 예외를 작성합니다.</summary>
            <param name="level">이 추적을 작성하는 <see cref="T:System.Diagnostics.TraceLevel"/>입니다.</param>
            <param name="message">추적 메시지입니다.</param>
            <param name="ex">추적 예외입니다. 이 매개 변수는 선택 사항입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
            <summary>동적 메서드를 사용하여 <see cref="T:System.Reflection.MemberInfo"/>의 값을 가져옵니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="memberInfo">멤버 정보입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>값을 설정합니다.</summary>
            <param name="target">값을 설정할 대상입니다.</param>
            <param name="value">대상에 설정할 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>값을 가져옵니다.</summary>
            <param name="target">값을 얻을 대상입니다.</param>
            <returns>값입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
            <summary>오류를 둘러싼 정보를 제공합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>오류를 가져옵니다.</summary>
            <value>오류입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>오류를 일으킨 원래 개체를 가져옵니다.</summary>
            <value>오류를 일으킨 원래 개체입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>오류를 일으킨 멤버를 가져옵니다.</summary>
            <value>오류를 일으킨 오류입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>오류가 발생한 JSON 위치의 경로를 가져옵니다.</summary>
            <value>오류가 발생한 JSON 위치의 경로입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>이 <see cref="T:Newtonsoft.Json.Serialization.ErrorContext"/>이(가) 처리되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>처리되는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>오류 이벤트에 대한 데이터를 제공합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>오류 이벤트가 발생 중인 현재 개체를 가져옵니다.</summary>
            <value>오류 이벤트가 발생 중인 현재 개체입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>오류 컨텍스트를 가져옵니다.</summary>
            <value>오류 컨텍스트입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="currentObject">현재 개체입니다.</param>
            <param name="errorContext">오류 컨텍스트입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
            <summary>동적 메서드를 사용하여 <see cref="T:System.Reflection.MemberInfo"/>의 값을 가져옵니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="memberInfo">멤버 정보입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>값을 설정합니다.</summary>
            <param name="target">값을 설정할 대상입니다.</param>
            <param name="value">대상에 설정할 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>값을 가져옵니다.</summary>
            <param name="target">값을 얻을 대상입니다.</param>
            <returns>값입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IAttributeProvider">
            <summary>특성을 가져오는 메서드를 제공합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>속성이 없는 경우 모든 속성의 컬렉션 또는 빈 컬렉션을 반환합니다.</summary>
            <param name="inherit">True이면 상속된 사용자 지정 특성에 대한 계층 체인을 찾습니다.</param>
            <returns><see cref="T:System.Attribute"/>의 컬렉션 또는 빈 컬렉션입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>속성이 없는 경우 유형별로 식별된 속성 컬렉션 또는 빈 컬렉션을 반환합니다.</summary>
            <param name="attributeType">속성의 유형입니다.</param>
            <param name="inherit">True이면 상속된 사용자 지정 특성에 대한 계층 체인을 찾습니다.</param>
            <returns><see cref="T:System.Attribute"/>의 컬렉션 또는 빈 컬렉션입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
            <summary>지정된 <see cref="T:System.Type"/>에 대해 <see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>을(를) 확인하기 위해 <see cref="T:Newtonsoft.Json.JsonSerializer"/>가 사용합니다.</summary>
            <example><code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" /> <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" /></example>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>지정된 형식에 대한 계약을 확인합니다.</summary>
            <param name="type">계약을 확인할 형식입니다.</param>
            <returns>지정된 형식에 대한 계약입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.NamingStrategy">
            <summary>속성 이름과 사전 키가 직렬화되는 방법을 확인하기 위한 기본 클래스입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>사전 키를 처리해야 하는지 여부를 나타내는 플래그입니다. 기본값은 <c>false</c>입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>명시적으로 지정한 속성 이름(예: <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>로 사용자 지정된 속성 이름)을 처리할지 여부를 나타내는 플래그입니다. 기본값은 <c>false</c>입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>지정된 속성 이름에 대한 직렬화된 이름을 가져옵니다.</summary>
            <param name="name">초기 속성 이름입니다.</param>
            <param name="hasSpecifiedName">속성에 이름이 명시적으로 지정되어 있는지 여부를 나타내는 플래그입니다.</param>
            <returns>직렬화된 속성 이름입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>지정된 사전 키에 대해 직렬화된 키를 가져옵니다.</summary>
            <param name="key">초기 사전 키입니다.</param>
            <returns>직렬화된 사전 키입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>지정된 속성 이름을 확인합니다.</summary>
            <param name="name">확인할 속성 이름입니다.</param>
            <returns>확인된 속성 이름입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에서 JSON을 직렬화 및 역직렬화할 때 참조를 확인하는 데 사용됩니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>해당 개체에 대한 참조를 확인합니다.</summary>
            <param name="context">직렬화 컨텍스트입니다.</param>
            <param name="reference">확인할 참조입니다.</param>
            <returns>이 개체는</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>지정된 개체에 대한 참조를 가져옵니다.</summary>
            <param name="context">직렬화 컨텍스트입니다.</param>
            <param name="value">참조를 얻을 개체입니다.</param>
            <returns>개체에 대한 참조입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>지정된 개체가 참조되는지 여부를 결정합니다.</summary>
            <param name="context">직렬화 컨텍스트입니다.</param>
            <param name="value">참조를 테스트할 개체입니다.</param>
            <returns>지정된 개체가 참조되는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>지정된 개체에 참조를 추가합니다.</summary>
            <param name="context">직렬화 컨텍스트입니다.</param>
            <param name="reference">참조입니다.</param>
            <param name="value">참조할 개체입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>추적 작성기를 나타냅니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>작성자에 전달된 추적 메시지를 필터링하는 데 사용할 <see cref="T:System.Diagnostics.TraceLevel"/>을(를) 가져옵니다. 예를 들어, <code>정보</code>의 필터 수준에서 <code>Verbose</code> 메시지가 제외되고 <code>정보</code>, <code>경고</code> 및 <code>오류</code> 메시지가 포함됩니다.</summary>
            <value>작성자에 전달된 추적 메시지를 필터링하는 데 사용하는 <see cref="T:System.Diagnostics.TraceLevel"/>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>지정된 추적 수준, 메시지 및 선택적 예외를 작성합니다.</summary>
            <param name="level">이 추적을 작성하는 <see cref="T:System.Diagnostics.TraceLevel"/>입니다.</param>
            <param name="message">추적 메시지입니다.</param>
            <param name="ex">추적 예외입니다. 이 매개 변수는 선택 사항입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
            <summary>값을 얻고 설정하는 메서드를 제공합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>값을 설정합니다.</summary>
            <param name="target">값을 설정할 대상입니다.</param>
            <param name="value">대상에 설정할 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>값을 가져옵니다.</summary>
            <param name="target">값을 얻을 대상입니다.</param>
            <returns>값입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>이(가) 사용하는 <see cref="T:System.Type"/>의 계약 세부 사항입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>컬렉션 항목 중 <see cref="T:System.Type"/>을(를) 가져옵니다.</summary>
            <value>컬렉션 항목 중 <see cref="T:System.Type"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>컬렉션 형식이 다차원 배열인지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>컬렉션 형식이 다차원 배열인 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>개체를 만드는 데 사용되는 함수를 가져오거나 설정합니다. 이 함수를 설정하면 <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>이(가) 재정의됩니다.</summary>
            <value>개체를 만드는 데 사용되는 함수입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>생성기에 컬렉션 값을 가진 매개 변수가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>생성기에 컬렉션 값을 가진 매개 변수가 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="underlyingType">계약의 기본 형식입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>이(가) 사용하는 <see cref="T:System.Type"/>의 계약 세부 사항입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>기본 컬렉션 항목 <see cref="T:Newtonsoft.Json.JsonConverter" />을(를) 가져옵니다.</summary>
            <value>변환기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>컬렉션 항목이 개체 참조를 보존하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>컬렉션 항목이 개체 참조를 보존하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>컬렉션 항목 참조 루프 처리를 가져오거나 설정합니다.</summary>
            <value>참조 루프 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>컬렉션 항목 유형 이름 처리를 가져오거나 설정합니다.</summary>
            <value>형식 이름 처리입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="underlyingType">계약의 기본 형식입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>직렬화 콜백 이벤트를 처리합니다.</summary>
            <param name="o">콜백 이벤트를 발생시킨 개체입니다.</param>
            <param name="context">스트리밍 컨텍스트입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/> 직렬화 오류 콜백 이벤트를 처리합니다.</summary>
            <param name="o">콜백 이벤트를 발생시킨 개체입니다.</param>
            <param name="context">스트리밍 컨텍스트입니다.</param>
            <param name="errorContext">오류 컨텍스트입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>역직렬화하는 동안 개체에 대한 확장 데이터를 설정합니다.</summary>
            <param name="o">확장 데이터를 설정할 개체입니다.</param>
            <param name="key">확장 데이터 키입니다.</param>
            <param name="value">확장 데이터 값입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>직렬화하는 동안 개체에 대한 확장 데이터를 가져옵니다.</summary>
            <param name="o">확장 데이터를 설정할 개체입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>이(가) 사용하는 <see cref="T:System.Type"/>의 계약 세부 사항입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>계약의 기본 형식을 가져옵니다.</summary>
            <value>계약의 기본 형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>역직렬화 중에 만들어진 형식을 가져오거나 설정합니다.</summary>
            <value>직렬화 중에 만든 형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>이 형식 계약이 참조로 직렬화되는지 여부를 가져오거나 설정합니다.</summary>
            <value>이 형식 계약이 참조로 직렬화되는지 여부입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>이 계약의 <see cref="T:Newtonsoft.Json.JsonConverter" /> 기본값을 가져오거나 설정합니다.</summary>
            <value>변환기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>개체의 역직렬화 직후에 호출된 모든 메서드를 가져오거나 설정합니다.</summary>
            <value>개체의 역직렬화 직후에 호출된 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>개체의 역직렬화 중에 호출된 모든 메서드를 가져옵니다.</summary>
            <value>개체의 역직렬화 중에 호출된 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>개체 그래프의 직렬화 후에 호출된 모든 메서드를 가져오거나 설정합니다.</summary>
            <value>개체 그래프의 직렬화 후에 호출된 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>개체의 직렬화 전에 호출된 모든 메서드를 가져옵니다.</summary>
            <value>개체의 직렬화 전에 호출된 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>개체의 직렬화 중에 오류가 throw될 때 호출된 모든 메서드를 가져오거나 설정합니다.</summary>
            <value>개체의 직렬화 중에 오류가 throw될 때 호출된 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
            <summary>개체의 역직렬화 직후에 호출된 메서드를 가져오거나 설정합니다.</summary>
            <value>개체의 역직렬화 직후에 호출된 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
            <summary>개체의 역직렬화 중에 호출된 메서드를 가져오거나 설정합니다.</summary>
            <value>개체의 역직렬화 중에 호출된 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
            <summary>개체 그래프의 직렬화 후에 호출된 메서드를 가져오거나 설정합니다.</summary>
            <value>개체 그래프의 직렬화 후에 호출된 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
            <summary>개체의 직렬화 전에 호출된 메서드를 가져오거나 설정합니다.</summary>
            <value>개체의 직렬화 전에 호출되는 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
            <summary>개체의 직렬화 중에 오류가 throw될 때 호출된 메서드를 가져오거나 설정합니다.</summary>
            <value>개체의 직렬화 중에 오류가 throw될 때 호출된 메서드입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>개체를 만드는 데 사용하는 기본 생성기를 가져오거나 설정합니다.</summary>
            <value>개체를 만드는 데 사용하는 기본 생성기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>기본 생성기가 비공개인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>기본 개체 생성기가 비공개인 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>이(가) 사용하는 <see cref="T:System.Type"/>의 계약 세부 사항입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>속성 이름 확인자를 가져오거나 설정합니다.</summary>
            <value>속성 이름 확인자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>사전 키 확인자를 가져오거나 설정합니다.</summary>
            <value>사전 키 확인자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>사전 키의 <see cref="T:System.Type"/>을(를) 가져옵니다.</summary>
            <value>사전 키의 <see cref="T:System.Type"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>사전 값 중 <see cref="T:System.Type"/>을(를) 가져옵니다.</summary>
            <value>사전 값 중 <see cref="T:System.Type"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>개체를 만드는 데 사용되는 함수를 가져오거나 설정합니다. 이 함수를 설정하면 <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>이(가) 재정의됩니다.</summary>
            <value>개체를 만드는 데 사용되는 함수입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>생성기에 사전 값을 가진 매개 변수가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
            <value>작성자에 사전 값을 가진 매개 변수가 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="underlyingType">계약의 기본 형식입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>이(가) 사용하는 <see cref="T:System.Type"/>의 계약 세부 사항입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
            <summary>개체의 속성을 가져옵니다.</summary>
            <value>개체의 속성입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>속성 이름 확인자를 가져오거나 설정합니다.</summary>
            <value>속성 이름 확인자입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="underlyingType">계약의 기본 형식입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>이(가) 사용하는 <see cref="T:System.Type"/>의 계약 세부 사항입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>ISerializable 개체 생성자를 가져오거나 설정합니다.</summary>
            <value>ISerializable 개체 생성자입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="underlyingType">계약의 기본 형식입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>이(가) 사용하는 <see cref="T:System.Type"/>의 계약 세부 사항입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="underlyingType">계약의 기본 형식입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>이(가) 사용하는 <see cref="T:System.Type"/>의 계약 세부 사항입니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>개체 멤버 직렬화를 가져오거나 설정합니다.</summary>
            <value>멤버 개체 직렬화입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>개체의 속성이 필요한지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>개체의 속성이 필요한지 여부를 나타내는 값입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>개체의 속성을 가져옵니다.</summary>
            <value>개체의 속성입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>기본이 아닌 생성자에 필요한 생성자 매개 변수를 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary><see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator"/>과 함께 사용되는 매개 변수를 정의하는 <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator"/> 인스턴스의 컬렉션을 가져옵니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>개체를 만드는 데 사용되는 생성자를 가져오거나 설정합니다. JsonConstructor 특성을 사용하여 생성자가 표시될 때 설정됩니다.</summary>
            <value>재정의 생성자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>개체를 만드는 데 사용되는 매개 변수화된 생성자를 가져오거나 설정합니다.</summary>
            <value>매개 변수화된 생성자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>개체를 만드는 데 사용되는 함수를 가져오거나 설정합니다. 이 함수를 설정하면 <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>이(가) 재정의됩니다. 이 함수는 <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters"/> 컬렉션에 의해 정의 되는 인수의 컬렉션으로 호출됩니다.</summary>
            <value>개체를 만드는 데 사용되는 함수입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>확장 데이터 세터를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>확장 데이터 게터를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>확장 데이터 값 형식을 가져오거나 설정합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="underlyingType">계약의 기본 형식입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>이(가) 사용하는 <see cref="T:System.Type"/>의 계약 세부 사항입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="underlyingType">계약의 기본 형식입니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
            <summary>JSON 속성을 .NET 멤버 또는 생성자 매개 변수에 매핑합니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>속성의 이름을 가져오거나 설정합니다.</summary>
            <value>속성의 이름입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>이 속성을 선언한 형식을 가져오거나 설정합니다.</summary>
            <value>이 속성을 선언한 형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>멤버의 직렬화 순서를 가져오거나 설정합니다.</summary>
            <value>직렬화의 숫자 순서입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>기본 멤버 또는 매개 변수의 이름을 가져오거나 설정합니다.</summary>
            <value>기본 멤버 또는 매개 변수의 이름입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>직렬화하는 동안 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>을(를) 가져오고 설정하는 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>을(를) 가져옵니다.</summary>
            <value>직렬화하는 동안 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>을(를) 가져오고 설정하는 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>이 속성의 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>을(를) 가져오거나 설정합니다.</summary>
            <value>이 속성의 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>속성의 형식을 가져오거나 설정합니다.</summary>
            <value>속성의 형식입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>속성의 <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>을(를) 가져오거나 설정합니다. 설정하는 경우 이 변환기가 속성 형식에 대한 계약 변환기보다 우선합니다.</summary>
            <value>변환기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>멤버 변환기를 가져오거나 설정합니다.</summary>
            <value>멤버 변환기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>이 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>이(가) 무시되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>무시하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>이 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>을(를) 읽을 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>읽을 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>이 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>을(를) 쓸 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>쓸 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>이 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>에 멤버 특성이 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>멤버 특성이 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>기본값을 가져옵니다.</summary>
            <value>기본값입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>이 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>이(가) 필요한지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>이 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>이(가) 필요한지 여부를 나타내는 값입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>이 속성이 개체 참조를 보존하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
            <value>이 인스턴스가 참조되는 경우<c>true</c>, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>속성 null 값 처리를 가져오거나 설정합니다.</summary>
            <value>Null 값 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>속성 기본값 처리를 가져오거나 설정합니다.</summary>
            <value>기본값 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>속성 참조 루프 처리를 가져오거나 설정합니다.</summary>
            <value>참조 루프 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>속성 개체 만들기 처리를 가져오거나 설정합니다.</summary>
            <value>개체 만들기 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>형식 이름 처리를 가져오거나 설정합니다.</summary>
            <value>형식 이름 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>속성을 직렬화할지 여부를 결정하는 데 사용되는 조건자를 가져오거나 설정합니다.</summary>
            <value>속성을 직렬화할지 여부를 결정하는 데 사용되는 조건자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>속성을 역직렬화할지 여부를 결정하는 데 사용되는 조건자를 가져오거나 설정합니다.</summary>
            <value>속성을 역직렬화할지 여부를 결정하는 데 사용되는 조건자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>속성을 직렬화할지 여부를 결정하는 데 사용되는 조건자를 가져오거나 설정합니다.</summary>
            <value>속성을 직렬화할지 여부를 결정하는 데 사용되는 조건자입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>속성이 역직렬화되었는지 여부를 설정하는 데 사용되는 작업을 가져오거나 설정합니다.</summary>
            <value>속성이 역직렬화되었는지 여부를 설정하는 데 사용되는 작업입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>이 인스턴스를 나타내는 <see cref="T:System.String"/>을(를) 반환합니다.</summary>
            <returns>이 인스턴스를 나타내는 <see cref="T:System.String"/>입니다.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>속성의 컬렉션 항목을 직렬화할 때 사용되는 변환기를 가져오거나 설정합니다.</summary>
            <value>컬렉션의 항목 변환기입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>이 속성의 컬렉션 항목이 참조로 직렬화되는지 여부를 가져오거나 설정합니다.</summary>
            <value>이 속성의 컬렉션 항목이 참조로 직렬화되는지 여부입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>속성의 컬렉션 항목을 직렬화할 때 사용되는 형식 이름 처리를 가져오거나 설정합니다.</summary>
            <value>컬렉션의 항목 유형 이름 처리입니다.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>속성의 컬렉션 항목을 직렬화할 때 사용되는 참조 루프 처리를 가져오거나 설정합니다.</summary>
            <value>컬렉션의 항목 참조 루프 처리입니다.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 개체의 컬렉션입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="type">형식입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>파생 클래스에서 구현될 때 지정된 요소에서 키를 추출합니다.</summary>
            <param name="item">키를 추출할 요소입니다.</param>
            <returns>지정된 요소의 키입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 개체를 추가합니다.</summary>
            <param name="property">컬렉션에 추가할 속성입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>가장 가까운 일치하는 <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> 개체를 가져옵니다. 먼저 속성 이름의 정확한 대/소문자 일치를 가져오려고 시도한 다음 대/소문자를 구분하지 속성 이름을 가져옵니다.</summary>
            <param name="propertyName">속성의 이름입니다.</param>
            <returns>발견된 경우 일치하는 속성입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>속성 이름으로 속성을 가져옵니다.</summary>
            <param name="propertyName">가져올 속성의 이름입니다.</param>
            <param name="comparisonType">형식 속성 이름 문자열 비교입니다.</param>
            <returns>발견된 경우 일치하는 속성입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>이(가) 사용하는 <see cref="T:System.Type"/>의 계약 세부 사항입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="underlyingType">계약의 기본 형식입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>인수에 의해 설명된 JsonConverter 형식의 인스턴스를 조회하고 만듭니다.</summary>
            <param name="converterType">만들 JsonConverter 형식입니다.</param>
            <param name="converterArgs">JsonConverter의 초기화 생성자에 전달할 선택적 인수입니다. null이면 기본 생성자가 사용됩니다.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>메모리에 기록하는 추적 작성자를 나타냅니다. 추적 메시지 제한에 도달하면 새 메시지가 추가될 때 이전 추적 메시지가 제거됩니다.</summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>작성자에 전달된 추적 메시지를 필터링하는 데 사용할 <see cref="T:System.Diagnostics.TraceLevel"/>을(를) 가져옵니다. 예를 들어, <code>정보</code>의 필터 수준에서 <code>Verbose</code> 메시지가 제외되고 <code>정보</code>, <code>경고</code> 및 <code>오류</code> 메시지가 포함됩니다.</summary>
            <value>작성자에 전달된 추적 메시지를 필터링하는 데 사용하는 <see cref="T:System.Diagnostics.TraceLevel"/>입니다.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary><see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>지정된 추적 수준, 메시지 및 선택적 예외를 작성합니다.</summary>
            <param name="level">이 추적을 작성하는 <see cref="T:System.Diagnostics.TraceLevel"/>입니다.</param>
            <param name="message">추적 메시지입니다.</param>
            <param name="ex">추적 예외입니다. 이 매개 변수는 선택 사항입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>가장 최근 추적 메시지의 열거를 반환합니다.</summary>
            <returns>가장 최근 추적 메시지의 열거입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>가장 최근 추적 메시지 중 <see cref="T:System.String"/>을(를) 반환합니다.</summary>
            <returns>가장 최근 추적 메시지 중 <see cref="T:System.String"/>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>개체를 생성하는 메서드를 나타냅니다.</summary>
            <typeparam name="T">만들 개체 형식입니다.</typeparam>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>메서드에 적용될 때 개체를 직렬화하는 오류가 발생하는 경우 메서드가 호출되도록 지정합니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
            <summary><see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> 또는 <see cref="T:System.Reflection.Assembly"/>에서 특성을 얻는 메서드를 제공합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="attributeProvider">속성을 얻을 수 있는 인스턴스입니다. 이 매개 변수는 <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> 또는 <see cref="T:System.Reflection.Assembly"/>여야 합니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>속성이 없는 경우 모든 속성의 컬렉션 또는 빈 컬렉션을 반환합니다.</summary>
            <param name="inherit">True이면 상속된 사용자 지정 특성에 대한 계층 체인을 찾습니다.</param>
            <returns><see cref="T:System.Attribute"/>의 컬렉션 또는 빈 컬렉션입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>속성이 없는 경우 유형별로 식별된 속성 컬렉션 또는 빈 컬렉션을 반환합니다.</summary>
            <param name="attributeType">속성의 유형입니다.</param>
            <param name="inherit">True이면 상속된 사용자 지정 특성에 대한 계층 체인을 찾습니다.</param>
            <returns><see cref="T:System.Attribute"/>의 컬렉션 또는 빈 컬렉션입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>리플렉션을 사용하여 <see cref="T:System.Reflection.MemberInfo"/>의 값을 가져오거나 설정합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary><see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="memberInfo">멤버 정보입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>값을 설정합니다.</summary>
            <param name="target">값을 설정할 대상입니다.</param>
            <param name="value">대상에 설정할 값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>값을 가져옵니다.</summary>
            <param name="target">값을 얻을 대상입니다.</param>
            <returns>값입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.StringEscapeHandling">
            <summary>JSON 텍스트를 작성할 때 문자열이 이스케이프되는 방법을 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>제어 문자(예: 새 줄)만 이스케이프됩니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>ASCII가 아닌 모든 문자 및 제어 문자(예: 새 줄)는 이스케이프됩니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>HTML(&lt;, &gt;, &amp;, &apos;, &quot;)  및 제어 문자(예: 새 줄)가 이스케이프됩니다.</summary>
        </member>
        <member name="T:Newtonsoft.Json.TypeNameHandling">
            <summary><see cref="T:Newtonsoft.Json.JsonSerializer"/>에 대한 형식 이름 처리 옵션을 지정합니다.</summary>
            <remarks><see cref="T:Newtonsoft.Json.TypeNameHandling"/> 애플리케이션이 외부 소스에서 JSON을 역직렬화할 때는 주의해서 사용해야 합니다. 유입되는 형식은 <see cref="T:System.Runtime.Serialization.SerializationBinder"/>  <c>TypeNameHandling.None</c>이 아닌 값으로 직렬화할 때 사용자 지정으로 유효성을 검사해야 합니다.</remarks>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.None">
            <summary>형식을 직렬화할 때 .NET 형식 이름을 포함하지 마세요.</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>JSON 개체 구조로 직렬화할 때 .NET 형식 이름을 포함합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>JSON 배열 구조로 직렬화할 때 .NET 형식 이름을 포함합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.All">
            <summary>직렬화할 때 항상 .NET 형식 이름을 포함하세요.</summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>직렬화되는 개체의 형식이 선언된 형식과 같지 않은 경우 .NET 형식 이름을 포함합니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>컬렉션이 null이거나 비어 있는지 여부를 결정합니다.</summary>
            <param name="collection">컬렉션입니다.</param>
            <returns>컬렉션이 null이거나 비어 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>지정된 컬렉션의 요소를 지정된 제네릭 IList에 추가합니다.</summary>
            <param name="initial">추가할 목록입니다.</param>
            <param name="collection">추가할 요소의 컬렉션입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>값을 지정된 형식으로 변환합니다. 값을 변환할 수 없는 경우 값이 지정된 형식에 할당할 수 있는지 여부를 검사합니다.</summary>
            <param name="initialValue">변환할 값입니다.</param>
            <param name="culture">변환할 때 사용할 문화권입니다.</param>
            <param name="targetType">값을 변환하거나 캐스트하는 형식입니다.</param>
            <returns>변환된 형식입니다. 변환에 실패한 경우 대상 형식에 할당할 수 있는 경우 초기 값이 반환됩니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>결과를 반환하는 Dynamic에서 특정 메서드를 호출하는 MetaObject를 생성하는 도우미 메서드</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>Dynamic에서 특정 메서드를 호출하지만 결과의 인수 중 하나를 사용하는 MetaObject를 생성하는 도우미 메서드입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>Dynamic에서 특정 메서드를 호출하지만 결과의 인수 중 하나를 사용하는 MetaObject를 생성하는 도우미 메서드입니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>형식을 제한하는 제한과 병합된 현재 제한을 포함하는 제한 객체를 반환하고</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>열거형 형식의 이름과 값에 대한 사전을 가져옵니다.</summary>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>열거형 형식의 이름과 값에 대한 사전을 가져옵니다.</summary>
            <param name="enumType">이름과 값을 얻을 수 있는 열거형 형식입니다.</param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>형식이 입력된 컬렉션의 항목의 형식을 가져옵니다.</summary>
            <param name="type">형식입니다.</param>
            <returns>형식화된 컬렉션의 항목의 형식입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>멤버의 기본 형식을 가져옵니다.</summary>
            <param name="member">멤버입니다.</param>
            <returns>멤버의 기본 형식입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>멤버가 인덱싱된 속성인지 여부를 결정합니다.</summary>
            <param name="member">멤버입니다.</param>
            <returns>멤버가 인덱싱된 속성인 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>속성이 인덱싱된 속성인지 여부를 결정합니다.</summary>
            <param name="property">속성입니다.</param>
            <returns>속성이 인덱싱된 속성인 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>개체에 대한 멤버 값을 가져옵니다.</summary>
            <param name="member">멤버입니다.</param>
            <param name="target">대상 개체입니다.</param>
            <returns>개체에 대한 멤버의 값입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>대상 개체에 멤버 값을 설정합니다.</summary>
            <param name="member">멤버입니다.</param>
            <param name="target">대상입니다.</param>
            <param name="value">값입니다.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>지정된 MemberInfo를 읽을 수 있는지 여부를 결정합니다.</summary>
            <param name="member">MemberInfo를 사용하여 읽을 수 있는지 여부를 결정합니다.</param>/// <param name="nonPublic"><c>true</c>로 설정된 경우 멤버를 비공개적으로 얻을 수 있습니다.</param>
            <returns>지정된 MemberInfo를 읽을 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>지정된 MemberInfo를 설정할 수 있는지 여부를 결정합니다.</summary>
            <param name="member">설정할 수 있는지 여부를 결정할 MemberInfo입니다.</param>
            <param name="nonPublic"><c>true</c>로 설정된 경우 멤버를 공개적으로 설정하지 않도록 허용합니다. </param>
            <param name="canSetReadOnly"><c>true</c>로 설정된 경우 읽기 전용인 경우 멤버를 설정할 수 있습니다. </param>
            <returns>지정된 MemberInfo를 설정할 수 있는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
            <summary>문자열을 빌드합니다. StringBuilder와 달리 이 클래스를 사용하면 내부 버퍼를 다시 사용할 수 있습니다.</summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>문자열이 모두 공백인지 여부를 결정합니다. 빈 문자열은 false를 반환합니다.</summary>
            <param name="s">모든 공백인지 여부를 테스트하는 문자열입니다.</param>
            <returns>문자열이 모두 공백인 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.</returns>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary><see cref="T:Newtonsoft.Json.JsonWriter"/>의 상태를 지정합니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>예외가 throw되어 <see cref="T:Newtonsoft.Json.JsonWriter"/>가 잘못된 상태가 되었습니다. <see cref="T:Newtonsoft.Json.JsonWriter"/> 메서드를 호출하여을(를) <c>닫힘</c> 상태에 넣을 수 있습니다. 다른 <see cref="T:Newtonsoft.Json.JsonWriter"/> 메서드 호출의 경우 <see cref="T:System.InvalidOperationException"/>이 throw됩니다. </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary> <see cref="M:Newtonsoft.Json.JsonWriter.Close"/> 메서드가 호출되었습니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>개체를 작성하는 중입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>배열을 작성하는 중입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Constructor">
            <summary>생성자를 작성하는 중입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>속성을 작성하는 중입니다.</summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>쓰기 메서드가 호출되지 않았습니다.</summary>
        </member>
    </members>
</doc>