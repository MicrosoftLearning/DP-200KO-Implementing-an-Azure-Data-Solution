<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>시스템.반응성.린크</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.Joins.NamespaceDoc">
            <summary> <b>System.Reactive.Joins</b>네임스페이스에는 유창한 메서드 구문을 사용하여 관찰 가능한 시퀀스를 통해 조인 패턴을 표현하는 데 사용되는 클래스가 포함되어 있습니다. </summary>
        </member>
        <member name="T:System.Reactive.Concurrency.VirtualTimeSchedulerExtensions">
            <summary>가상 시간 예약에 대한 확장 메서드 집합을 제공 합니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerExtensions.ScheduleRelative``2(System.Reactive.Concurrency.VirtualTimeSchedulerBase{``0,``1},``1,System.Action)">
            <summary>dueTime에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TAbsolute">절대 시간 표현 형식입니다.</typeparam>
            <typeparam name="TRelative">상대 시간 표현 형식입니다.</typeparam>
            <param name="scheduler">작업을 실행할 스케줄러입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerExtensions.ScheduleAbsolute``2(System.Reactive.Concurrency.VirtualTimeSchedulerBase{``0,``1},``0,System.Action)">
            <summary>dueTime에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TAbsolute">절대 시간 표현 형식입니다.</typeparam>
            <typeparam name="TRelative">상대 시간 표현 형식입니다.</typeparam>
            <param name="scheduler">작업을 실행할 스케줄러입니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="action"/>은(는) null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute">
            <summary>정적 클래스에 적용 된 특성 은 지정된 대상 클래스 형식에서 로컬 쿼리 실행을 위한 해당 메서드에 매핑하는 식 트리 형태의 쿼리 메서드를 제공합니다.</summary>
        </member>
        <member name="M:System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute.#ctor(System.Type)">
            <summary>지정된 로컬 실행 쿼리 메서드 구현 유형에 대한 새 매핑을 만듭니다.</summary>
            <param name="targetType">로컬 실행을 위한 쿼리 메서드를 입력합니다.</param>
        </member>
        <member name="P:System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute.TargetType">
            <summary>로컬 쿼리 메서드의 구현을 사용하여 형식을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Linq.Observable">
            <summary>관찰 가능한 시퀀스를 통해 메모리 내 쿼리를 작성하기 위한 정적 메서드 집합을 제공합니다.</summary>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0})">
            <summary>관찰 가능한 시퀀스의 각 요소에 대한 작업을 호출하고 시퀀스가 종료될 때 신호를 받는 Task 개체를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <returns>시퀀스의 종료를 알리는 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/>은(는) null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>관찰 가능한 시퀀스의 각 요소에 대한 작업을 호출하고 시퀀스가 종료될 때 신호를 받는 Task 개체를 반환합니다. 루프는 지정된 취소 토큰을 설정하여 조기에 종료할 수 있습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="cancellationToken">루프를 중지하는 데 사용되는 취소 토큰입니다.</param>
            <returns>시퀀스의 종료를 알리는 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/>은(는) null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0,System.Int32})">
            <summary>관찰 가능한 시퀀스에서 각 요소에 대한 작업을 호출하여 요소의 인덱스를 통합하고 시퀀스가 종료될 때 신호를 받는 Task 개체를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <returns>시퀀스의 종료를 알리는 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/>은(는) null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>관찰 가능한 시퀀스에서 각 요소에 대한 작업을 호출하여 요소의 인덱스를 통합하고 시퀀스가 종료될 때 신호를 받는 Task 개체를 반환합니다. 루프는 지정된 취소 토큰을 설정하여 조기에 종료할 수 있습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="cancellationToken">루프를 중지하는 데 사용되는 취소 토큰입니다.</param>
            <returns>시퀀스의 종료를 알리는 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/>은(는) null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.IObservable{``1})">
            <summary> <paramref name="selector"/> 일치하는 일치가 <paramref name="sources"/>  <paramref name="defaultSource"/>없는지 선택하여 반환할 소스를 결정하는 데 사용합니다.</summary>
            <typeparam name="TValue">결과 소스를 조회하는 데 사용되는 선택기 함수에서 반환되는 값의 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector"><paramref name="sources"/> 사전에서 조회할 소스를 결정하기 위해 선택기 함수가 호출되었습니다.</param>
            <param name="sources"><paramref name="selector"/>호출 결과에 근거하여 선택할 소스 사전입니다.</param>
            <param name="defaultSource">일치하는 소스가 없는 경우 선택할 기본 <paramref name="sources"/>소스입니다.</param>
            <returns><paramref name="selector"/> 호출 결과에 근거하여 <paramref name="sources"/> 사전에서 검색된 관찰 가능한 시퀀스 또는 일치하지 않음이 발견된 경우 빈 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> <paramref name="sources"/> 또는 <paramref name="defaultSource"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.Reactive.Concurrency.IScheduler)">
            <summary> <paramref name="selector"/> 일치하는 설정이 <paramref name="sources"/>없는 경우 지정된 스케줄러에서 빈 시퀀스를 선택하여 반환할 소스를 결정하는 데 사용합니다.</summary>
            <typeparam name="TValue">결과 소스를 조회하는 데 사용되는 선택기 함수에서 반환되는 값의 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector"><paramref name="sources"/> 사전에서 조회할 소스를 결정하기 위해 선택기 함수가 호출되었습니다.</param>
            <param name="sources"><paramref name="selector"/>호출 결과에 근거하여 선택할 소스 사전입니다.</param>
            <param name="scheduler">일치하는 소스가 <paramref name="sources"/>없는 경우 에 빈 시퀀스를 생성하는 스케줄러입니다.</param>
            <returns><paramref name="selector"/> 호출 결과에 근거하여 <paramref name="sources"/> 사전에서 검색된 관찰 가능한 시퀀스 또는 일치하지 않음이 발견된 경우 빈 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> <paramref name="sources"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}})">
            <summary> <paramref name="selector"/> 일치하는 설정이 <paramref name="sources"/>없는 경우 빈 시퀀스를 선택하여 반환할 소스를 결정하는 데 사용합니다.</summary>
            <typeparam name="TValue">결과 소스를 조회하는 데 사용되는 선택기 함수에서 반환되는 값의 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector"><paramref name="sources"/> 사전에서 조회할 소스를 결정하기 위해 선택기 함수가 호출되었습니다.</param>
            <param name="sources"><paramref name="selector"/>호출 결과에 근거하여 선택할 소스 사전입니다.</param>
            <returns><paramref name="selector"/> 호출 결과에 근거하여 <paramref name="sources"/> 사전에서 검색된 관찰 가능한 시퀀스 또는 일치하지 않음이 발견된 경우 빈 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> 또는 <paramref name="sources"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DoWhile``1(System.IObservable{``0},System.Func{System.Boolean})">
            <summary>지정된 <paramref name="source"/> 보유 기간 동안 지정된 <paramref name="condition"/>을 반복하여 <paramref name="condition"/> 완료한 후 <paramref name="source"/>가 평가됩니다.  </summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source"><paramref name="condition"/> 함수가 true로 평가되는 한 반복할 소스입니다.</param>
            <param name="condition">을 통해 반복이 완료되면 평가되는 조건으로 <paramref name="source"/>소스의 반복이 필요한지 여부를 결정합니다.</param>
            <returns>을(를) 보유한 만큼 <paramref name="source"/> 시퀀스를 연결하여 얻은 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="condition"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IObservable{``1}})">
            <summary>주어진 열거형의 각 요소에 대해 실행하여 <paramref name="resultSelector"/>  <paramref name="source"/>얻은 관찰 가능한 시퀀스를 연결합니다.</summary>
            <typeparam name="TSource">오른쪽 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">각 요소가 결과 시퀀스에 연결되는 관찰 가능한 소스에 매핑되는 열거가능한 소스입니다.</param>
            <param name="resultSelector">의 각 요소에 대해 관찰 가능한 소스를 선택하는 <paramref name="source"/>함수입니다.</param>
            <returns>의 각 요소에 대해 반환되는 소스를 연결하여 <paramref name="resultSelector"/>  <paramref name="source"/>얻은 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="resultSelector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0},System.IObservable{``0})">
            <summary>지정된 <paramref name="condition"/>이(가) true를 평가하는 경우 <paramref name="thenSource"/> 시퀀스를 선택합니다. 그렇지 않으면 <paramref name="elseSource"/>시퀀스를 선택합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="condition">반환할 시퀀스를 결정하기 위해 평가된 조건입니다.</param>
            <param name="thenSource"><paramref name="condition"/>이(가) true를 평가할 경우에 반환된 시퀀스입니다.</param>
            <param name="elseSource"><paramref name="condition"/>이(가) true를 평가할 경우에 반환된 시퀀스입니다.</param>
            <returns><paramref name="thenSource"/>  <paramref name="condition"/> true를 평가하는 경우; <paramref name="elseSource"/>그렇지 않으면. </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> <paramref name="thenSource"/> 또는 <paramref name="elseSource"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0})">
            <summary>지정된 <paramref name="condition"/>이(가) true를 평가하는 경우 <paramref name="thenSource"/> 시퀀스를 선택합니다. 그렇지 않으면 빈 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="condition">반환할 시퀀스를 결정하기 위해 평가된 조건입니다.</param>
            <param name="thenSource"><paramref name="condition"/>이(가) true를 평가할 경우에 반환된 시퀀스입니다.</param>
            <returns><paramref name="thenSource"/> <paramref name="condition"/>이(가) true를 평가하는 경우, 빈 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> 또는 <paramref name="thenSource"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 <paramref name="condition"/>이(가) true를 평가하는 경우 <paramref name="thenSource"/> 시퀀스를 선택합니다. 그렇지 않으면 지정된 스케줄러에서 생성된 빈 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="condition">반환할 시퀀스를 결정하기 위해 평가된 조건입니다.</param>
            <param name="thenSource"><paramref name="condition"/>이(가) true를 평가할 경우에 반환된 시퀀스입니다.</param>
            <param name="scheduler">스케줄러는 false를 평가하는 경우에 에 빈 시퀀스를 <paramref name="condition"/>생성한다.</param>
            <returns><paramref name="thenSource"/> <paramref name="condition"/>이(가) true를 평가하는 경우, 빈 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> <paramref name="thenSource"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.While``1(System.Func{System.Boolean},System.IObservable{``0})">
            <summary>지정된 보유 기간 동안 지정된 것을 반복하며, 각 반복이 <paramref name="source"/>  <paramref name="condition"/>  <paramref name="condition"/> 구독되기 전에 <paramref name="source"/>평가됩니다.   </summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source"><paramref name="condition"/> 함수가 true로 평가되는 한 반복할 소스입니다.</param>
            <param name="condition">에 가입하기 전에 평가되는 조건으로 <paramref name="source"/>소스의 반복이 필요한지 여부를 결정합니다.</param>
            <returns>을(를) 보유한 만큼 <paramref name="source"/> 시퀀스를 연결하여 얻은 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> 또는 <paramref name="source"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``5(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``4})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``6(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``5})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``7(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``6})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``7})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``8})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``9})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``10})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">시작 대리자에게 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``11})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">시작 대리자에게 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">시작 대리자에게 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``12})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">시작 대리자에게 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">시작 대리자에게 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">시작 대리자에게 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``13})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">시작 대리자에게 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">시작 대리자에게 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">시작 대리자에게 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">시작 대리자에게 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``14})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">시작 대리자에게 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">시작 대리자에게 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">시작 대리자에게 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">시작 대리자에게 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">시작 대리자에게 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">최종 대리자가 반환하는 결과 유형입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과를 관찰 가능한 시퀀스로 결과를 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``4(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``5(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``6(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">시작 대리자에게 전달된 10번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">시작 대리자에게 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">시작 대리자에게 전달된 11번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">시작 대리자에게 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">시작 대리자에게 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">시작 대리자에게 전달된 12번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">시작 대리자에게 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">시작 대리자에게 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">시작 대리자에게 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">시작 대리자에게 전달된 13번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>시작/종료 호출 함수 쌍을 비동기 함수로 변환합니다.</summary>
            <typeparam name="TArg1">시작 대리자에게 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">시작 대리자에게 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">시작 대리자에게 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">시작 대리자에게 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">시작 대리자에게 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">시작 대리자에게 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">시작 대리자에게 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">시작 대리자에게 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">시작 대리자에게 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">시작 대리자에게 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">시작 대리자에게 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">시작 대리자에게 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">시작 대리자에게 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">시작 대리자에게 전달된 14번째 인수의 형식입니다.</typeparam>
            <param name="begin">비동기 작업을 시작하는 대리자입니다.</param>
            <param name="end">비동기 작업을 종료하는 대리자입니다.</param>
            <returns>비동기 작업을 시작하고 결과(단위 값으로 표시)를 관찰 가능한 시퀀스로 검색하는 데 사용할 수 있는 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="begin"/> 또는 <paramref name="end"/>은(는) null입니다.</exception>
            <remarks>결과 함수를 호출할 때마다 비동기 작업이 시작됩니다. 결과 시퀀스에 대한 구독은 관찰 가능한 부작용이 없으며 각 구독은 비동기 작업의 결과를 생성합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Start``1(System.Func{``0})">
            <summary>비동기 함수를 호출하여 관찰 가능한 시퀀스를 통해 결과를 표면화합니다.</summary>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기적으로 실행되는 함수입니다.</param>
            <returns>함수의 결과 값 또는 예외를 노출하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
            <remarks>
            <list type="bullet">
            <item><description>함수는 결과 시퀀스의 구독 중에 호출되지 않고 즉시 호출됩니다.</description></item>
            <item><description>결과 시퀀스에 대한 여러 구독은 함수의 결과를 관찰할 수 있습니다.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Start``1(System.Func{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러에서 지정된 함수를 비동기적으로 호출하여 관찰 가능한 시퀀스를 통해 결과를 표면화합니다.</summary>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기적으로 실행되는 함수입니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>함수의 결과 값 또는 예외를 노출하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <remarks>
            <list type="bullet">
            <item><description>함수는 결과 시퀀스의 구독 중에 호출되지 않고 즉시 호출됩니다.</description></item>
            <item><description>결과 시퀀스에 대한 여러 구독은 함수의 결과를 관찰할 수 있습니다.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.StartAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>비동기 함수를 호출하여 관찰 가능한 시퀀스를 통해 결과를 표면화합니다.</summary>
            <typeparam name="TResult">비동기 함수에서 반환되는 결과 유형입니다.</typeparam>
            <param name="functionAsync">실행할 비동기 함수입니다.</param>
            <returns>함수의 결과 값 또는 예외를 노출하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionAsync"/> null입니다.</exception>
            <remarks>
            <list type="bullet">
            <item><description>함수는 결과 시퀀스의 구독 중에 시작되지 않고 즉시 시작됩니다.</description></item>
            <item><description>결과 시퀀스에 대한 여러 구독은 함수의 결과를 관찰할 수 있습니다.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.StartAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>비동기 함수를 호출하여 관찰 가능한 시퀀스를 통해 결과를 표면화합니다. CancelToken은 결과적으로 관찰 가능한 시퀀스의 모든 구독에서 공유됩니다. 자세한 내용은 단원 계획을 참조하세요.</summary>
            <typeparam name="TResult">비동기 함수에서 반환되는 결과 유형입니다.</typeparam>
            <param name="functionAsync">실행할 비동기 함수입니다.</param>
            <returns>함수의 결과 값 또는 예외를 노출하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionAsync"/> null입니다.</exception>
            <remarks>
            <list type="bullet">
            <item><description>함수는 결과 시퀀스의 구독 중에 시작되지 않고 즉시 시작됩니다.</description></item>
            <item><description>결과 시퀀스에 대한 여러 구독은 함수의 결과를 관찰할 수 있습니다.</description></item>
            <item><description>결과 시퀀스에 대한 구독이 삭제되면 CancelToken이 설정됩니다. 삭제된 구독과 관련된 관찰자는 TaskCanceledException을 볼 수 없지만 다른 관찰자는 볼 수 있습니다. Catch 연산자를 사용하여 이로부터 보호할 수 있습니다. 이 동작으로 인해 결과 시퀀스를 처리할 때 주의해야 합니다. 가장 일반적인 용도는 CancelToken 상태를 제어하는 결과 시퀀스에 대한 단일 구독을 사용하는 것입니다. 또는 멀티캐스트 연산자를 사용하여 구독 동작을 제어할 수 있습니다.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Start(System.Action)">
            <summary>비동기 작업을 호출하여 관찰 가능한 시퀀스를 통해 결과를 표면화합니다.</summary>
            <param name="action">비동기적으로 실행되는 작업입니다.</param>
            <returns>작업이 완료될 때 단위 값을 노출하는 관찰 가능한 시퀀스 또는 예외입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
            <remarks>
            <list type="bullet">
            <item><description>결과 시퀀스의 구독 중에 작업이 호출되지 않고 즉시 호출됩니다.</description></item>
            <item><description>결과 시퀀스에 대한 여러 구독은 작업의 결과를 관찰할 수 있습니다.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Start(System.Action,System.Reactive.Concurrency.IScheduler)">
            <summary>비동기 작업을 호출하여 관찰 가능한 시퀀스를 통해 결과를 표면화합니다.</summary>
            <param name="action">비동기적으로 실행되는 작업입니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>작업이 완료될 때 단위 값을 노출하는 관찰 가능한 시퀀스 또는 예외입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <remarks>
            <list type="bullet">
            <item><description>결과 시퀀스의 구독 중에 작업이 호출되지 않고 즉시 호출됩니다.</description></item>
            <item><description>결과 시퀀스에 대한 여러 구독은 작업의 결과를 관찰할 수 있습니다.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.StartAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>비동기 작업을 호출하여 관찰 가능한 시퀀스를 통해 결과를 표면화합니다.</summary>
            <param name="actionAsync">실행할 비동기 작업입니다.</param>
            <returns>작업이 완료될 때 단위 값을 노출하는 관찰 가능한 시퀀스 또는 예외입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="actionAsync"/> null입니다.</exception>
            <remarks>
            <list type="bullet">
            <item><description>결과 시퀀스의 구독 중에 시작되는 것이 아니라 작업이 즉시 시작됩니다.</description></item>
            <item><description>결과 시퀀스에 대한 여러 구독은 작업의 결과를 관찰할 수 있습니다.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.StartAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>비동기 작업을 호출하여 관찰 가능한 시퀀스를 통해 결과를 표면화합니다. CancelToken은 결과적으로 관찰 가능한 시퀀스의 모든 구독에서 공유됩니다. 자세한 내용은 단원 계획을 참조하세요.</summary>
            <param name="actionAsync">실행할 비동기 작업입니다.</param>
            <returns>작업이 완료될 때 단위 값을 노출하는 관찰 가능한 시퀀스 또는 예외입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="actionAsync"/> null입니다.</exception>
            <remarks>
            <list type="bullet">
            <item><description>결과 시퀀스의 구독 중에 시작되는 것이 아니라 작업이 즉시 시작됩니다.</description></item>
            <item><description>결과 시퀀스에 대한 여러 구독은 작업의 결과를 관찰할 수 있습니다.</description></item>
            <item><description>결과 시퀀스에 대한 구독이 삭제되면 CancelToken이 설정됩니다. 삭제된 구독과 관련된 관찰자는 TaskCanceledException을 볼 수 없지만 다른 관찰자는 볼 수 있습니다. Catch 연산자를 사용하여 이로부터 보호할 수 있습니다. 이 동작으로 인해 결과 시퀀스를 처리할 때 주의해야 합니다. 가장 일반적인 용도는 CancelToken 상태를 제어하는 결과 시퀀스에 대한 단일 구독을 사용하는 것입니다. 또는 멀티캐스트 연산자를 사용하여 구독 동작을 제어할 수 있습니다.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>비동기 함수를 관찰 가능한 시퀀스로 변환합니다. 결과 시퀀스에 대한 각 구독으로 인해 함수가 시작됩니다.</summary>
            <typeparam name="TResult">비동기 함수에서 반환되는 결과 유형입니다.</typeparam>
            <param name="functionAsync">변환할 비동기 함수입니다.</param>
            <returns>함수 또는 예외를 호출하는 결과를 노출하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionAsync"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>비동기 함수를 관찰 가능한 시퀀스로 변환합니다. 결과 시퀀스에 대한 각 구독으로 인해 함수가 시작됩니다. 비동기 함수에 전달된 CancelToken은 함수의 호출을 트리거한 관찰 가능한 시퀀스의 구독에 연결되며 최상의 취소에 사용할 수 있습니다.</summary>
            <typeparam name="TResult">비동기 함수에서 반환되는 결과 유형입니다.</typeparam>
            <param name="functionAsync">변환할 비동기 함수입니다.</param>
            <returns>함수 또는 예외를 호출하는 결과를 노출하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functionAsync"/> null입니다.</exception>
            <remarks>결과 시퀀스에 대한 구독이 삭제되면 비동기 함수에 공급된 CancelToken이 신호를 내보냅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>비동기 작업을 관찰 가능한 시퀀스로 변환합니다. 결과 시퀀스에 대한 각 구독으로 인해 작업이 시작됩니다.</summary>
            <param name="actionAsync">변환할 비동기 작업입니다.</param>
            <returns>작업이 완료될 때 단위 값을 노출하는 관찰 가능한 시퀀스 또는 예외입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="actionAsync"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>비동기 작업을 관찰 가능한 시퀀스로 변환합니다. 결과 시퀀스에 대한 각 구독으로 인해 작업이 시작됩니다. 비동기 작업에 전달된 CancelToken은 작업의 호출을 트리거한 검색 가능한 시퀀스의 구독에 연결되며 최상의 방법으로 취소하는 데 사용할 수 있습니다.</summary>
            <param name="actionAsync">변환할 비동기 작업입니다.</param>
            <returns>작업이 완료될 때 단위 값을 노출하는 관찰 가능한 시퀀스 또는 예외입니다.</returns>
            <remarks>결과 시퀀스에 대한 구독이 삭제되면 비동기 함수에 공급된 CancelToken이 신호를 내보냅니다.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="actionAsync"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Func{``0})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Func{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Func{``0,``1})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Func{``0,``1,``2,``3,``4,``5},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">함수에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">함수에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">함수에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">함수에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">함수에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">함수에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">함수에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">함수에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">함수에 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">함수에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">함수에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">함수에 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">함수에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">함수에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">함수에 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg15">함수에 전달된 15번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">함수에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">함수에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">함수에 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg15">함수에 전달된 15번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 나타나는 비동기 함수의 각 호출은 원래 동기 함수를 호출합니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">함수에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">함수에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">함수에 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg15">함수에 전달된 15번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg16">함수에 전달된 16번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 함수로 변환합니다. 결과적으로 발생하는 비동기 함수의 각 호출로 인해 지정된 스케줄러에서 원래 동기 함수가 호출됩니다.</summary>
            <typeparam name="TArg1">함수에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">함수에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">함수에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">함수에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">함수에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">함수에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">함수에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">함수에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">함수에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">함수에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">함수에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">함수에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">함수에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">함수에 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg15">함수에 전달된 15번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg16">함수에 전달된 16번째 인수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수에서 반환되는 결과의 형식입니다.</typeparam>
            <param name="function">비동기 함수로 변환하는 함수입니다.</param>
            <param name="scheduler">원래 함수를 호출하는 스케줄러입니다.</param>
            <returns>비동기 함수입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync(System.Action)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync(System.Action,System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Action{``0})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Action{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Action{``0,``1})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Action{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Action{``0,``1,``2,``3,``4},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Action{``0,``1,``2,``3,``4,``5},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">작업에 전달된 12번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">작업에 전달된 12번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">작업에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">작업에 전달된 13번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">작업에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">작업에 전달된 13번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">작업에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">작업에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">작업에 전달된 14번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">작업에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">작업에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">작업에 전달된 14번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">작업에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">작업에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">작업에 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg15">작업에 전달된 15번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">작업에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">작업에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">작업에 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg15">작업에 전달된 15번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 기본 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">작업에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">작업에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">작업에 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg15">작업에 전달된 15번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg16">작업에 전달된 16번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Reactive.Concurrency.IScheduler)">
            <summary>함수를 비동기 작업으로 변환합니다. 결과적으로 발생하는 비동기 작업의 각 호출로 인해 지정된 스케줄러에서 원래 동기 동작이 호출됩니다.</summary>
            <typeparam name="TArg1">작업에 전달된 첫 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg2">작업에 전달된 두 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg3">작업에 전달된 세 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg4">작업에 전달된 네 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg5">작업에 전달된 다섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg6">작업에 전달된 여섯 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg7">작업에 전달된 일곱 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg8">작업에 전달된 여덟 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg9">작업에 전달된 아홉 번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg10">작업에 전달된 10번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg11">작업에 전달된 11번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg12">작업에 전달된 12번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg13">작업에 전달된 13번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg14">작업에 전달된 14번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg15">작업에 전달된 15번째 인수의 형식입니다.</typeparam>
            <typeparam name="TArg16">작업에 전달된 16번째 인수의 형식입니다.</typeparam>
            <param name="action">비동기 작업으로 변환하는 작업입니다.</param>
            <param name="scheduler">원래 작업을 호출하는 스케줄러입니다.</param>
            <returns>비동기 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Action{System.EventHandler},System.Action{System.EventHandler})">
            <summary><see cref="T:System.EventHandler"/>에 기반한 표준 .NET 이벤트 패턴에 부합하는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> 또는 <paramref name="removeHandler"/>은(는) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Reactive.Concurrency.IScheduler)">
            <summary><see cref="T:System.EventHandler"/>에 기반한 표준 .NET 이벤트 패턴에 부합하는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> <paramref name="removeHandler"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Action{``0},System.Action{``0})">
            <summary>제공된 이벤트 대리자 유형에 근거하여 표준 .NET 이벤트 패턴에 부합하는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TDelegate">변환할 이벤트의 대리자 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> 또는 <paramref name="removeHandler"/>은(는) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>제공된 이벤트 대리자 유형에 근거하여 표준 .NET 이벤트 패턴에 부합하는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TDelegate">변환할 이벤트의 대리자 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> <paramref name="removeHandler"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0})">
            <summary><see cref="T:System.EventHandler`1"/>에 기반한 표준 .NET 이벤트 패턴에 부합하는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TDelegate">변환할 이벤트의 대리자 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="conversion">지정된 이벤트 처리기를 기본 .NET 이벤트와 호환되는 대리자로 변환하는 데 사용되는 함수입니다. 결과적으로 발생하는 대리자는 addHandler 및 removeHandler 작업 매개 변수에 대한 호출에 사용됩니다.</param>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="conversion"/> <paramref name="addHandler"/> 또는 <paramref name="removeHandler"/>이(가) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
            <summary><see cref="T:System.EventHandler`1"/>에 기반한 표준 .NET 이벤트 패턴에 부합하는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TDelegate">변환할 이벤트의 대리자 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="conversion">지정된 이벤트 처리기를 기본 .NET 이벤트와 호환되는 대리자로 변환하는 데 사용되는 함수입니다. 결과적으로 발생하는 대리자는 addHandler 및 removeHandler 작업 매개 변수에 대한 호출에 사용됩니다.</param>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="conversion"/> 또는 <paramref name="addHandler"/> 또는 <paramref name="removeHandler"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``3(System.Action{``0},System.Action{``0})">
            <summary>강력하게 입력한 보낸 사람 매개 변수를 사용하여 제공된 이벤트 대리자 유형을 기반으로 표준 .NET 이벤트 패턴을 준수하는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TDelegate">변환할 이벤트의 대리자 유형입니다.</typeparam>
            <typeparam name="TSender">이벤트를 발생시키는 보낸 사람의 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> 또는 <paramref name="removeHandler"/>은(는) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``3(System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>강력하게 입력한 보낸 사람 매개 변수를 사용하여 제공된 이벤트 대리자 유형을 기반으로 표준 .NET 이벤트 패턴을 준수하는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TDelegate">변환할 이벤트의 대리자 유형입니다.</typeparam>
            <typeparam name="TSender">이벤트를 발생시키는 보낸 사람의 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> <paramref name="removeHandler"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}})">
            <summary><see cref="T:System.EventHandler`1"/>에 기반한 표준 .NET 이벤트 패턴에 부합하는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary><see cref="T:System.EventHandler`1"/>에 기반한 표준 .NET 이벤트 패턴에 부합하는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Object,System.String)">
            <summary><see cref="T:System.EventArgs"/> 매개 변수가 있는 표준 .NET 이벤트 패턴에 부합하는 인스턴스 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 대상 개체 유형과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <param name="target">변환할 이벤트를 노출하는 개체 인스턴스입니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> 또는 <paramref name="eventName"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Object,System.String,System.Reactive.Concurrency.IScheduler)">
            <summary><see cref="T:System.EventArgs"/> 매개 변수가 있는 표준 .NET 이벤트 패턴에 부합하는 인스턴스 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 대상 개체 유형과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <param name="target">변환할 이벤트를 노출하는 개체 인스턴스입니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> <paramref name="eventName"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Object,System.String)">
            <summary>강력하게 입력한 이벤트 인수로 표준 .NET 이벤트 패턴에 부합하는 인스턴스 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 대상 개체 유형과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="target">변환할 이벤트를 노출하는 개체 인스턴스입니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> 또는 <paramref name="eventName"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다. - 또한 - 이벤트의 두 번째 인수 형식은 TEventArgs에 할당할 수 없습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Object,System.String,System.Reactive.Concurrency.IScheduler)">
            <summary>강력하게 입력한 이벤트 인수로 표준 .NET 이벤트 패턴에 부합하는 인스턴스 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 대상 개체 유형과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="target">변환할 이벤트를 노출하는 개체 인스턴스입니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> <paramref name="eventName"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다. - 또한 - 이벤트의 두 번째 인수 형식은 TEventArgs에 할당할 수 없습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Object,System.String)">
            <summary>강력하게 입력한 보낸 사람 및 강력하게 입력한 이벤트 인수로 표준 .NET 이벤트 패턴에 부합하는 인스턴스 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 대상 개체 유형과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TSender">이벤트를 발생시키는 보낸 사람의 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="target">변환할 이벤트를 노출하는 개체 인스턴스입니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> 또는 <paramref name="eventName"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다. - 또한 - 이벤트의 첫 번째 인수 형식은 TSender에 할당할 수 없습니다. - 또한 - 이벤트의 두 번째 인수 형식은 TEventArgs에 할당할 수 없습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Object,System.String,System.Reactive.Concurrency.IScheduler)">
            <summary>강력하게 입력한 보낸 사람 및 강력하게 입력한 이벤트 인수로 표준 .NET 이벤트 패턴에 부합하는 인스턴스 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 대상 개체 유형과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TSender">이벤트를 발생시키는 보낸 사람의 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="target">변환할 이벤트를 노출하는 개체 인스턴스입니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> <paramref name="eventName"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다. - 또한 - 이벤트의 첫 번째 인수 형식은 TSender에 할당할 수 없습니다. - 또한 - 이벤트의 두 번째 인수 형식은 TEventArgs에 할당할 수 없습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Type,System.String)">
            <summary><see cref="T:System.EventArgs"/> 매개변수가 있는 표준 .NET 이벤트 패턴에 부합하는 정적 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 지정된 형식과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <param name="type">변환할 정적 이벤트를 노출하는 형식을 입력합니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> 또는 <paramref name="eventName"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Type,System.String,System.Reactive.Concurrency.IScheduler)">
            <summary><see cref="T:System.EventArgs"/> 매개변수가 있는 표준 .NET 이벤트 패턴에 부합하는 정적 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 지정된 형식과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <param name="type">변환할 정적 이벤트를 노출하는 형식을 입력합니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> <paramref name="eventName"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Type,System.String)">
            <summary>강력하게 입력한 이벤트 인수로 표준 .NET 이벤트 패턴에 부합하는 정적 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 지정된 형식과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="type">변환할 정적 이벤트를 노출하는 형식을 입력합니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> 또는 <paramref name="eventName"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다. - 또한 - 이벤트의 두 번째 인수 형식은 TEventArgs에 할당할 수 없습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Type,System.String,System.Reactive.Concurrency.IScheduler)">
            <summary>강력하게 입력한 이벤트 인수로 표준 .NET 이벤트 패턴에 부합하는 정적 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 지정된 형식과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="type">변환할 정적 이벤트를 노출하는 형식을 입력합니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> <paramref name="eventName"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다. - 또한 - 이벤트의 두 번째 인수 형식은 TEventArgs에 할당할 수 없습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Type,System.String)">
            <summary>정적 .NET 이벤트를 강력하게 입력한 보낸 사람과 강력하게 입력된 이벤트 인수를 사용하여 표준 .NET 이벤트 패턴에 부합하는 것을 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 지정된 형식과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TSender">이벤트를 발생시키는 보낸 사람의 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="type">변환할 정적 이벤트를 노출하는 형식을 입력합니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> 또는 <paramref name="eventName"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다. - 또한 - 이벤트의 첫 번째 인수 형식은 TSender에 할당할 수 없습니다. - 또한 - 이벤트의 두 번째 인수 형식은 TEventArgs에 할당할 수 없습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재 <see cref="T:System.Threading.SynchronizationContext"/>은(는) FromEventPattern을 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEventPattern 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>반응성 확장의 자유 스레드 특성으로 인해 FromEventPattern 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Type,System.String,System.Reactive.Concurrency.IScheduler)">
            <summary>정적 .NET 이벤트를 강력하게 입력한 보낸 사람과 강력하게 입력된 이벤트 인수를 사용하여 표준 .NET 이벤트 패턴에 부합하는 것을 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 리플렉션은 지정된 형식과 지정된 이벤트 이름을 기반으로 이벤트를 검색하는 데 사용됩니다. 표준 .NET 이벤트 패턴에 부합하지 않는 이벤트를 변환하려면 대신 FromEvent 오버로드를 사용합니다.</summary>
            <typeparam name="TSender">이벤트를 발생시키는 보낸 사람의 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="type">변환할 정적 이벤트를 노출하는 형식을 입력합니다.</param>
            <param name="eventName">변환할 이벤트의 이름입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 대한 데이터 표현을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> <paramref name="eventName"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">이벤트를 찾을 수 없습니다. - 또는 - 이벤트가 표준 .NET 이벤트 패턴에 부합하지 않습니다. - 또한 - 이벤트의 첫 번째 인수 형식은 TSender에 할당할 수 없습니다. - 또한 - 이벤트의 두 번째 인수 형식은 TEventArgs에 할당할 수 없습니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEventPattern 호출 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEventPattern의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Func{System.Action{``1},``0},System.Action{``0},System.Action{``0})">
            <summary>변환 함수를 사용하여 이벤트 대리자를 가져오는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하는 이벤트를 변환하려면 대신 FromEventPattern 오버로드를 사용합니다.</summary>
            <typeparam name="TDelegate">변환할 이벤트의 대리자 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="conversion">지정된 이벤트 처리기를 기본 .NET 이벤트와 호환되는 대리자로 변환하는 데 사용되는 함수입니다. 결과적으로 발생하는 대리자는 addHandler 및 removeHandler 작업 매개 변수에 대한 호출에 사용됩니다.</param>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 전달된 이벤트 인수 개체를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="conversion"/> <paramref name="addHandler"/> 또는 <paramref name="removeHandler"/>이(가) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재는 <see cref="T:System.Threading.SynchronizationContext"/>FromEvent를 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEvent 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>재활성 확장의 자유 스레드 특성으로 인해 FromEvent 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Func{System.Action{``1},``0},System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>변환 함수를 사용하여 이벤트 대리자를 가져오는 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하는 이벤트를 변환하려면 대신 FromEventPattern 오버로드를 사용합니다.</summary>
            <typeparam name="TDelegate">변환할 이벤트의 대리자 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="conversion">지정된 이벤트 처리기를 기본 .NET 이벤트와 호환되는 대리자로 변환하는 데 사용되는 함수입니다. 결과적으로 발생하는 대리자는 addHandler 및 removeHandler 작업 매개 변수에 대한 호출에 사용됩니다.</param>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 전달된 이벤트 인수 개체를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="conversion"/> 또는 <paramref name="addHandler"/> 또는 <paramref name="removeHandler"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEvent 호출 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEvent의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Action{``0},System.Action{``0})">
            <summary>제공된 이벤트 대리자 유형을 사용하여 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하는 이벤트를 변환하려면 대신 FromEventPattern 오버로드를 사용합니다.</summary>
            <typeparam name="TDelegate">변환할 이벤트의 대리자 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 전달된 이벤트 인수 개체를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> 또는 <paramref name="removeHandler"/>은(는) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재는 <see cref="T:System.Threading.SynchronizationContext"/>FromEvent를 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEvent 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>재활성 확장의 자유 스레드 특성으로 인해 FromEvent 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>제공된 이벤트 대리자 유형을 사용하여 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하는 이벤트를 변환하려면 대신 FromEventPattern 오버로드를 사용합니다.</summary>
            <typeparam name="TDelegate">변환할 이벤트의 대리자 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 전달된 이벤트 인수 개체를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> <paramref name="removeHandler"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEvent 호출 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEvent의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}})">
            <summary>일반 작업 기반 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하는 이벤트를 변환하려면 대신 FromEventPattern 오버로드를 사용합니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 전달된 이벤트 인수 개체를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> 또는 <paramref name="removeHandler"/>은(는) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재는 <see cref="T:System.Threading.SynchronizationContext"/>FromEvent를 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEvent 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>재활성 확장의 자유 스레드 특성으로 인해 FromEvent 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary>일반 작업 기반 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하는 이벤트를 변환하려면 대신 FromEventPattern 오버로드를 사용합니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 전달된 이벤트 인수 개체를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> <paramref name="removeHandler"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEvent 호출 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEvent의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent(System.Action{System.Action},System.Action{System.Action})">
            <summary>작업 기반 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하는 이벤트를 변환하려면 대신 FromEventPattern 오버로드를 사용합니다.</summary>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 전달된 이벤트 인수 개체를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> 또는 <paramref name="removeHandler"/>은(는) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>현재는 <see cref="T:System.Threading.SynchronizationContext"/>FromEvent를 호출하는 동안 캡처되며 추가 및 처리기 호출을 게시하고 제거하는 데 사용됩니다. 이 동작은 일부 UI 프레임워크에서 요구하는 대로 스레드 아핀(affine) 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 합니다.</para>
            <para>FromEvent 호출 시점에 SynchronizationContext가 존재하는 경우, 추가 및 제거 처리기 호출은 각각 구독 또는 삭제 호출을 만드는 스레드에서 동기적으로 이루어집니다.</para>
            <para>재활성 확장의 자유 스레드 특성으로 인해 FromEvent 외부 이벤트 스트림 쿼리 식을 해제하는 것이 좋습니다. 이렇게 하면 캡처된 SynchronizationContext를 예측할 수 있습니다. 또한 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FromEvent(System.Action{System.Action},System.Action{System.Action},System.Reactive.Concurrency.IScheduler)">
            <summary>작업 기반 .NET 이벤트를 관찰 가능한 시퀀스로 변환합니다. 각 이벤트 호출은 결과 시퀀스의 OnNext 메시지를 통해 표시됩니다. 표준 .NET 이벤트 패턴에 부합하는 이벤트를 변환하려면 대신 FromEventPattern 오버로드를 사용합니다.</summary>
            <param name="addHandler">기본 .NET 이벤트에 지정된 이벤트 처리기를 연결 하는 작업입니다.</param>
            <param name="removeHandler">기본 .NET 이벤트에서 지정된 이벤트 처리기를 분리하는 작업입니다.</param>
            <param name="scheduler">추가 및 이벤트 처리기 논리를 제거하는 스케줄러입니다.</param>
            <returns>기본 .NET 이벤트의 호출에 전달된 이벤트 인수 개체를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="addHandler"/> <paramref name="removeHandler"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <remarks>
            <para>관찰자 수가 0을 초과할 때마다 처리기 호출이 추가 및 제거됩니다. 따라서 이벤트 처리기는 멀티캐스팅 제목을 사용하여 동시에 여러 활성 관찰자에 의해 공유될 수 있습니다.</para>
            <para>처리기 호출 추가 및 제거는 지정된 스케줄러에서 실행됩니다. 이 동작을 사용하면 일부 UI 프레임워크에서 요구하는 대로 스레드 affine 아핀 이벤트에 대한 처리기 작업을 동일한 컨텍스트에서 액세스하도록 추가 및 제거할 수 있습니다.</para>
            <para>FromEvent 호출 외부 이벤트 스트림 쿼리 식을 해제 하는 것이 좋습니다. 이 모범 사례는 쿼리 내에서 코드를 연결하는 복잡성을 줄여 쿼리 식을 보다 간결하고 이해하기 쉽게 만듭니다. 이렇게 하면 IScheduler 매개 변수를 생략하는 FromEvent의 오버로드에 대한 추가 이점이 있습니다. 자세한 내용은 해당 오버로드의 비고 섹션을 참조하세요.</para>
            </remarks>
            <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Aggregate``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
            <summary>관찰 가능한 시퀀스에 누적 함수를 적용하여 집계 결과를 결과 시퀀스의 단일 요소로 반환합니다. 지정된 시드 값은 초기 누적값으로 사용됩니다. 증분 중간 결과가 있는 집계 동작은을 참조하세요.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TAccumulate">집계 결과의 형식입니다.</typeparam>
            <param name="source">집계할 관찰 가능한 시퀀스입니다.</param>
            <param name="seed">초기 누적값입니다.</param>
            <param name="accumulator">각 요소에 대해 호출할 누적 함수입니다.</param>
            <returns>최종 누적 값이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="accumulator"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Aggregate``3(System.IObservable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <summary>관찰 가능한 시퀀스에 누적 함수를 적용하여 집계 결과를 결과 시퀀스의 단일 요소로 반환합니다. 지정된 시드 값은 초기 누적값으로 사용되며 지정된 결과 선택기 함수는 결과 값을 선택하는 데 사용됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TAccumulate">쿼리된 항목의 형식입니다.</typeparam>
            <typeparam name="TResult">결과 값의 형식입니다.</typeparam>
            <param name="source">집계할 관찰 가능한 시퀀스입니다.</param>
            <param name="seed">초기 누적값입니다.</param>
            <param name="accumulator">각 요소에 대해 호출할 누적 함수입니다.</param>
            <param name="resultSelector">최종 누적 값을 결과 값으로 변환하는 함수입니다.</param>
            <returns>최종 누적 값이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="accumulator"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Aggregate``1(System.IObservable{``0},System.Func{``0,``0,``0})">
            <summary>관찰 가능한 시퀀스에 누적 함수를 적용하여 집계 결과를 결과 시퀀스의 단일 요소로 반환합니다. 증분 중간 결과가 있는 집계 동작은을 참조하세요.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식 및 집계 결과입니다.</typeparam>
            <param name="source">집계할 관찰 가능한 시퀀스입니다.</param>
            <param name="accumulator">각 요소에 대해 호출할 누적 함수입니다.</param>
            <returns>최종 누적 값이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="accumulator"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.All``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>관찰 가능한 시퀀스의 모든 요소가 조건을 충족하는지 여부를 결정합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">조건자 적용 요소를 갖는 관찰 가능한 시퀀스입니다.</param>
            <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
            <returns>소스 시퀀스의 모든 요소가 지정된 술어에서 테스트를 통과하는지 여부를 결정하는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Any``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스에 요소가 포함되어 있는지 여부를 확인합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">비어있지 않음을 확인하는 관찰 가능한 시퀀스입니다.</param>
            <returns>소스 시퀀스에 지정된 값이 있는 요소가 포함되어 있는지 여부를 결정하는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Any``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>관찰 가능한 시퀀스의 요소가 조건을 준수하는지 여부를 결정합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">조건자 적용 요소를 갖는 관찰 가능한 시퀀스입니다.</param>
            <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
            <returns>소스 시퀀스의 모든 요소가 지정된 술어에서 테스트를 통과하는지 여부를 결정하는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Double})">
            <summary>관찰 가능한 <see cref="T:System.Double"/> 값 시퀀스의 평균을 계산합니다.</summary>
            <param name="source">평균을 계산하는 <see cref="T:System.Double"/> 값의 시퀀스입니다.</param>
            <returns>값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Single})">
            <summary>관찰 가능한 <see cref="T:System.Single"/> 값 시퀀스의 평균을 계산합니다.</summary>
            <param name="source">평균을 계산하는 <see cref="T:System.Single"/> 값의 시퀀스입니다.</param>
            <returns>값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Decimal})">
            <summary>관찰 가능한 <see cref="T:System.Decimal"/> 값 시퀀스의 평균을 계산합니다.</summary>
            <param name="source">평균을 계산하는 <see cref="T:System.Decimal"/> 값의 시퀀스입니다.</param>
            <returns>값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Decimal.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Int32})">
            <summary>관찰 가능한 <see cref="T:System.Int32"/> 값 시퀀스의 평균을 계산합니다.</summary>
            <param name="source">평균을 계산하는 <see cref="T:System.Int32"/> 값의 시퀀스입니다.</param>
            <returns>값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Int64})">
            <summary>관찰 가능한 <see cref="T:System.Int64"/> 값 시퀀스의 평균을 계산합니다.</summary>
            <param name="source">평균을 계산하는 <see cref="T:System.Int64"/> 값의 시퀀스입니다.</param>
            <returns>값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Double}})">
            <summary>관찰 가능한 null <see cref="T:System.Double"/>값 시퀀스의 평균을 계산합니다.</summary>
            <param name="source">평균을 계산하는 null <see cref="T:System.Double"/>값의 시퀀스입니다.</param>
            <returns>소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Single}})">
            <summary>관찰 가능한 null <see cref="T:System.Single"/>값 시퀀스의 평균을 계산합니다.</summary>
            <param name="source">평균을 계산하는 null <see cref="T:System.Single"/>값의 시퀀스입니다.</param>
            <returns>소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>관찰 가능한 null <see cref="T:System.Decimal"/>값 시퀀스의 평균을 계산합니다.</summary>
            <param name="source">평균을 계산하는 null <see cref="T:System.Decimal"/>값의 시퀀스입니다.</param>
            <returns>소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Decimal.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int32}})">
            <summary>관찰 가능한 null <see cref="T:System.Int32"/>값 시퀀스의 평균을 계산합니다.</summary>
            <param name="source">평균을 계산하는 null <see cref="T:System.Int32"/>값의 시퀀스입니다.</param>
            <returns>소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int64}})">
            <summary>관찰 가능한 null <see cref="T:System.Int64"/>값 시퀀스의 평균을 계산합니다.</summary>
            <param name="source">평균을 계산하는 null <see cref="T:System.Int64"/>값의 시퀀스입니다.</param>
            <returns>소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 관찰 가능한 <see cref="T:System.Decimal"/>값 시퀀스의 평균을 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">평균을 계산하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Decimal.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Double})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 관찰 가능한 <see cref="T:System.Double"/>값 시퀀스의 평균을 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">평균을 계산하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Single})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 관찰 가능한 <see cref="T:System.Single"/>값 시퀀스의 평균을 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">평균을 계산하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Int32})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 관찰 가능한 <see cref="T:System.Int32"/>값 시퀀스의 평균을 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">평균을 계산하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Int64})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 관찰 가능한 <see cref="T:System.Int64"/>값 시퀀스의 평균을 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">평균을 계산하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 null 지정 가능 <see cref="T:System.Decimal"/> 값의 관찰 가능한 시퀀스의 평균을 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">평균을 계산하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Decimal.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 null 지정 가능 <see cref="T:System.Double"/> 값의 관찰 가능한 시퀀스의 평균을 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">평균을 계산하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 null 지정 가능 <see cref="T:System.Single"/> 값의 관찰 가능한 시퀀스의 평균을 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">평균을 계산하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 null 지정 가능 <see cref="T:System.Int32"/> 값의 관찰 가능한 시퀀스의 평균을 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">평균을 계산하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 null 지정 가능 <see cref="T:System.Int64"/> 값의 관찰 가능한 시퀀스의 평균을 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">평균을 계산하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스가 비어 있거나 null인 값만 포함하는 경우 값 시퀀스의 평균이 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Contains``1(System.IObservable{``0},``0)">
            <summary>관찰 가능한 시퀀스에 기본 같음 비교기(equality comparer)를 사용하여 지정된 요소가 포함되어 있는지 여부를 확인합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 찾을 수 있는 관찰 가능한 시퀀스입니다.</param>
            <param name="value">소스 시퀀스에서 찾을 값입니다.</param>
            <returns>소스 시퀀스에 지정된 값이 있는 요소가 포함되어 있는지 여부를 결정하는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Contains``1(System.IObservable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>관찰 가능한 시퀀스에 지정된 System.Collections.Generics.IEqualityComparer&lt;T&gt;를&lt;/T&gt; 사용하여 지정된 요소가 포함되어 있는지 여부를 결정합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 찾을 수 있는 관찰 가능한 시퀀스입니다.</param>
            <param name="value">소스 시퀀스에서 찾을 값입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>소스 시퀀스에 지정된 값이 있는 요소가 포함되어 있는지 여부를 결정하는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="comparer"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Count``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 총 요소 수를 나타내는을(를) 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">계산할 요소를 포함하는 관찰 가능한 시퀀스입니다.</param>
            <returns>입력 시퀀스에 요소 수가 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 수가 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Count``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>지정된 관찰 가능한 시퀀스의 요소가 조건을 충족하는 수를 나타내는 <see cref="T:System.Int32"/>이(가) 포함된 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">계산할 요소를 포함하는 관찰 가능한 시퀀스입니다.</param>
            <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
            <returns>입력 시퀀스의 여러 요소가 조건자 함수의 조건을 충족하는 수를 나타내는 숫자가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ElementAt``1(System.IObservable{``0},System.Int32)">
            <summary>시퀀스에서 지정된 인덱스에서 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">관찰 가능한 시퀀스에서 요소를 반환합니다.</param>
            <param name="index">검색할 요소의 0기반 인덱스입니다.</param>
            <returns>소스 시퀀스의 지정된 위치에서 요소를 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 0보다 적습니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">(비동기) <paramref name="index"/>은 소스 시퀀스의 요소 수보다 크거나 같습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ElementAtOrDefault``1(System.IObservable{``0},System.Int32)">
            <summary>인덱스가 범위를 벗어난 경우 시퀀스의 지정된 인덱스 또는 기본값으로 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">관찰 가능한 시퀀스에서 요소를 반환합니다.</param>
            <param name="index">검색할 요소의 0기반 인덱스입니다.</param>
            <returns>소스 시퀀스의 지정된 위치에서 요소를 생성하는 관찰 가능한 시퀀스 또는 인덱스가 소스 시퀀스의 경계를 벗어난 경우 기본값입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 첫 번째 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 첫 번째 요소를 포함하는 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 첫 번째 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 첫 번째 요소를 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 조건자의 조건을 충족하는 요소가 없습니다. - 또한 - 소스 시퀀스가 비어 있습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 첫 번째 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 첫 번째 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 첫 번째 요소를 반환하거나 이러한 요소가 없는 경우 기본값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 첫 번째 요소를 반환하거나 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.IsEmpty``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스가 비어 있는지 여부를 결정합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">비었음을 확인하는 관찰 가능한 시퀀스입니다.</param>
            <returns>원본 시퀀스가 비어 있는지 여부를 결정하는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 마지막 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 마지막 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스가 비어 있습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소를 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 조건자의 조건을 충족하는 요소가 없습니다. - 또한 - 소스 시퀀스가 비어 있습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LongCount``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 총 요소 수를 나타내는을(를) 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">계산할 요소를 포함하는 관찰 가능한 시퀀스입니다.</param>
            <returns>입력 시퀀스에 요소 수가 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 수가 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LongCount``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>지정된 관찰 가능한 시퀀스의 요소가 조건을 충족하는 수를 나타내는 <see cref="T:System.Int64"/>이(가) 포함된 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">계산할 요소를 포함하는 관찰 가능한 시퀀스입니다.</param>
            <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
            <returns>입력 시퀀스의 여러 요소가 조건자 함수의 조건을 충족하는 수를 나타내는 숫자가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 마지막 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">관찰 가능한 시퀀스에서 최대 요소를 결정합니다.</param>
            <returns>소스 시퀀스에서 최대 요소가 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>지정된 비교에 따라 관찰 가능한 시퀀스의 최대값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">관찰 가능한 시퀀스에서 최대 요소를 결정합니다.</param>
            <param name="comparer">요소를 비교하는 데 사용되는 비교자입니다.</param>
            <returns>소스 시퀀스에서 최대 요소가 있는 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="comparer"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Double})">
            <summary>관찰 가능한 <see cref="T:System.Double"/> 값 시퀀스에서 최대 값을 반환합니다.</summary>
            <param name="source">최대값을 결정하는 <see cref="T:System.Double"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최대 값을 가진 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Single})">
            <summary>관찰 가능한 <see cref="T:System.Single"/> 값 시퀀스에서 최대 값을 반환합니다.</summary>
            <param name="source">최대값을 결정하는 <see cref="T:System.Single"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최대 값을 가진 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Decimal})">
            <summary>관찰 가능한 <see cref="T:System.Decimal"/> 값 시퀀스에서 최대 값을 반환합니다.</summary>
            <param name="source">최대값을 결정하는 <see cref="T:System.Decimal"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최대 값을 가진 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Int32})">
            <summary>관찰 가능한 <see cref="T:System.Int32"/> 값 시퀀스에서 최대 값을 반환합니다.</summary>
            <param name="source">최대값을 결정하는 <see cref="T:System.Int32"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최대 값을 가진 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Int64})">
            <summary>관찰 가능한 <see cref="T:System.Int64"/> 값 시퀀스에서 최대 값을 반환합니다.</summary>
            <param name="source">최대값을 결정하는 <see cref="T:System.Int64"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최대 값을 가진 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Double}})">
            <summary>무효 <see cref="T:System.Double"/> 값의 관찰 가능한 시퀀스에서 최대 값을 반환합니다.</summary>
            <param name="source">최대값을 결정하는 무효 <see cref="T:System.Double"/>값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최대 값을 가진 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Single}})">
            <summary>무효 <see cref="T:System.Single"/> 값의 관찰 가능한 시퀀스에서 최대 값을 반환합니다.</summary>
            <param name="source">최대값을 결정하는 무효 <see cref="T:System.Single"/>값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최대 값을 가진 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>무효 <see cref="T:System.Decimal"/> 값의 관찰 가능한 시퀀스에서 최대 값을 반환합니다.</summary>
            <param name="source">최대값을 결정하는 무효 <see cref="T:System.Decimal"/>값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최대 값을 가진 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int32}})">
            <summary>무효 <see cref="T:System.Int32"/> 값의 관찰 가능한 시퀀스에서 최대 값을 반환합니다.</summary>
            <param name="source">최대값을 결정하는 무효 <see cref="T:System.Int32"/>값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최대 값을 가진 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int64}})">
            <summary>무효 <see cref="T:System.Int64"/> 값의 관찰 가능한 시퀀스에서 최대 값을 반환합니다.</summary>
            <param name="source">최대값을 결정하는 무효 <see cref="T:System.Int64"/>값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최대 값을 가진 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대  값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">소스 시퀀스의 요소에서 파생된 개체의 형식으로 최대값을 결정합니다.</typeparam>
            <param name="source">최소 요소를 결정하는 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 요소에 해당하는 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 무효 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">소스 시퀀스의 요소에서 파생된 개체의 형식으로 최대값을 결정합니다.</typeparam>
            <param name="source">최소 요소를 결정하는 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <param name="comparer">요소를 비교하는 데 사용되는 비교자입니다.</param>
            <returns>소스 시퀀스의 최대 요소에 해당하는 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="selector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Double})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 <see cref="T:System.Double"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최대값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Single})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 <see cref="T:System.Single"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최대값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 <see cref="T:System.Decimal"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최대값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Int32})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 <see cref="T:System.Int32"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최대값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Int64})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 <see cref="T:System.Int64"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최대값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 무효 <see cref="T:System.Double"/>값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최대값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 무효 <see cref="T:System.Single"/>값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최대값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 무효 <see cref="T:System.Decimal"/>값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최대값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 무효 <see cref="T:System.Int32"/>값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최대값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최대 무효 <see cref="T:System.Int64"/>값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최대값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최대 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>최대 키 값을 사용하여 관찰 가능한 시퀀스의 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 키 유형입니다.</typeparam>
            <param name="source">최대 요소를 가져오기 위한 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">키 선택기 기능.</param>
            <returns>최대 키 값이 있는 0개 이상의 요소 목록이 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>지정된 비교에 따라 최대 키 값으로 관찰 가능한 시퀀스의 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 키 유형입니다.</typeparam>
            <param name="source">최대 요소를 가져오기 위한 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">키 선택기 기능.</param>
            <param name="comparer">키 값을 비교하는 데 사용되는 비교자입니다.</param>
            <returns>최대 키 값이 있는 0개 이상의 요소 목록이 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 마지막 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소 요소를 결정하는 관찰 가능한 시퀀스입니다.</param>
            <returns>소스 시퀀스에 최소 요소가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>지정된 비교에 따라 관찰 가능한 시퀀스의 최소 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소 요소를 결정하는 관찰 가능한 시퀀스입니다.</param>
            <param name="comparer">요소를 비교하는 데 사용되는 비교자입니다.</param>
            <returns>소스 시퀀스에 최소 요소가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="comparer"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Double})">
            <summary>관찰 가능한 <see cref="T:System.Double"/>값 시퀀스에서 최소 값을 반환합니다.</summary>
            <param name="source">최소값을 결정하는 <see cref="T:System.Double"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최소 값을 가진 단일 요소가 포함된관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Single})">
            <summary>관찰 가능한 <see cref="T:System.Single"/>값 시퀀스에서 최소 값을 반환합니다.</summary>
            <param name="source">최소값을 결정하는 <see cref="T:System.Single"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최소 값을 가진 단일 요소가 포함된관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Decimal})">
            <summary>관찰 가능한 <see cref="T:System.Decimal"/>값 시퀀스에서 최소 값을 반환합니다.</summary>
            <param name="source">최소값을 결정하는 <see cref="T:System.Decimal"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최소 값을 가진 단일 요소가 포함된관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Int32})">
            <summary>관찰 가능한 <see cref="T:System.Int32"/>값 시퀀스에서 최소 값을 반환합니다.</summary>
            <param name="source">최소값을 결정하는 <see cref="T:System.Int32"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최소 값을 가진 단일 요소가 포함된관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Int64})">
            <summary>관찰 가능한 <see cref="T:System.Int64"/>값 시퀀스에서 최소 값을 반환합니다.</summary>
            <param name="source">최소값을 결정하는 <see cref="T:System.Int64"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최소 값을 가진 단일 요소가 포함된관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Double}})">
            <summary>무효 <see cref="T:System.Double"/> 값의 관찰 가능한 시퀀스에서 최소 값을 반환합니다.</summary>
            <param name="source"><see cref="T:System.Double"/>최소값을 결정하는 무효 <see cref="T:System.Double"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최소 값을 가진 단일 요소가 포함된관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Single}})">
            <summary>무효 <see cref="T:System.Single"/> 값의 관찰 가능한 시퀀스에서 최소 값을 반환합니다.</summary>
            <param name="source"><see cref="T:System.Single"/>최소값을 결정하는 무효 <see cref="T:System.Single"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최소 값을 가진 단일 요소가 포함된관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>무효 <see cref="T:System.Decimal"/> 값의 관찰 가능한 시퀀스에서 최소 값을 반환합니다.</summary>
            <param name="source"><see cref="T:System.Decimal"/>최소값을 결정하는 무효 <see cref="T:System.Decimal"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최소 값을 가진 단일 요소가 포함된관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int32}})">
            <summary>무효 <see cref="T:System.Int32"/> 값의 관찰 가능한 시퀀스에서 최소 값을 반환합니다.</summary>
            <param name="source"><see cref="T:System.Int32"/>최소값을 결정하는 무효 <see cref="T:System.Int32"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최소 값을 가진 단일 요소가 포함된관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int64}})">
            <summary>무효 <see cref="T:System.Int64"/> 값의 관찰 가능한 시퀀스에서 최소 값을 반환합니다.</summary>
            <param name="source"><see cref="T:System.Int64"/>최소값을 결정하는 무효 <see cref="T:System.Int64"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스에서 최소 값을 가진 단일 요소가 포함된관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소  값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">소스 시퀀스의 요소에서 파생된 개체의 형식으로 최소값을 결정합니다.</typeparam>
            <param name="source">최소 요소를 결정하는 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 요소에 해당하는 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 무효  값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">소스 시퀀스의 요소에서 파생된 개체의 형식으로 최소값을 결정합니다.</typeparam>
            <param name="source">최소 요소를 결정하는 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <param name="comparer">요소를 비교하는 데 사용되는 비교자입니다.</param>
            <returns>소스 시퀀스의 최소 요소에 해당하는 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="selector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Double})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 <see cref="T:System.Double"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Single})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 <see cref="T:System.Single"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 <see cref="T:System.Decimal"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Int32})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 <see cref="T:System.Int32"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Int64})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 <see cref="T:System.Int64"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 무효 <see cref="T:System.Double"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 무효 <see cref="T:System.Single"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 무효 <see cref="T:System.Decimal"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 무효 <see cref="T:System.Int32"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>시퀀스의 각 요소에 변환 함수를 호출하고 최소 무효 <see cref="T:System.Int64"/> 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">최소값을 결정하는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 최소 값에 해당하는 형식 값을 가진 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>최소 키 값을 사용하여 관찰 가능한 시퀀스의 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 키 유형입니다.</typeparam>
            <param name="source">최소 요소를 가져오기 위한 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">키 선택기 기능.</param>
            <returns>최소 키 값이 있는 0개 이상의 요소 목록이 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>지정된 비교에 따라 최소 키 값으로 관찰 가능한 시퀀스의 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 키 유형입니다.</typeparam>
            <param name="source">최소 요소를 가져오기 위한 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">키 선택기 기능.</param>
            <param name="comparer">키 값을 비교하는 데 사용되는 비교자입니다.</param>
            <returns>최소 키 값이 있는 0개 이상의 요소 목록이 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>요소를 쌍으로 비교하여 두 시퀀스가 같는지 여부를 결정합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">비교할 수 있는 첫 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="second">비교할 두 번째 관찰 가능한 시퀀스입니다.</param>
            <returns>두 시퀀스의 길이가 같고 해당 요소가 해당 형식에 대한 기본 같음 비교에 따라 동일한지 여부를 나타내는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> 또는 <paramref name="second"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>지정된 같음 비교자를 사용하여 요소를 쌍으로 비교하여 두 시퀀스가 같는지 여부를 결정합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">비교할 수 있는 첫 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="second">비교할 두 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="comparer">두 시퀀스의 요소를 비교하는 데 사용되는 비교자입니다.</param>
            <returns>두 시퀀스의 길이가 같고 해당 요소가 지정된 같음 비교에 따라 동일한지 여부를 나타내는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> <paramref name="second"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>요소를 쌍으로 비교하여 관찰 가능하고 열거 가능한 시퀀스가 같는지 여부를 결정합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">비교할 수 있는 첫 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="second">비교할 두 번째 관찰 가능한 시퀀스입니다.</param>
            <returns>두 시퀀스의 길이가 같고 해당 요소가 해당 형식에 대한 기본 같음 비교에 따라 동일한지 여부를 나타내는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> 또는 <paramref name="second"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>지정된 같음 비교기를 사용하여 요소를 쌍으로 비교하여 관찰 가능하고 열거 가능한 시퀀스가 같는지 여부를 결정합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">비교할 수 있는 첫 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="second">비교할 두 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="comparer">두 시퀀스의 요소를 비교하는 데 사용되는 비교자입니다.</param>
            <returns>두 시퀀스의 길이가 같고 해당 요소가 지정된 같음 비교에 따라 동일한지 여부를 나타내는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> <paramref name="second"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 유일한 요소를 반환하고 관찰 가능한 시퀀스에 정확히 하나의 요소가 없는 경우 예외를 보고합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스에서 단일 요소를 포함하는 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스에는 두 개 이상의 요소가 포함되어 있습니다. - 또한 - 소스 시퀀스가 비어 있습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 조정하는 관찰 가능한 시퀀스의 유일한 요소를 반환하고 관찰 가능한 시퀀스에 정확히 하나의 요소가 없는 경우 예외를 보고합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소를 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 조건자의 조건을 충족하는 요소가 없습니다. - 또는 - 하나 이상의 요소가 조건자의 조건을 충족합니다. - 또한 - 소스 시퀀스가 비어 있습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 유일한 요소 또는 관찰 가능한 시퀀스가 비어 있는 경우 기본값을 반환합니다. 이 메서드는 관찰 가능한 시퀀스에 두 개 이상의 요소가 있는 경우 예외를 보고합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 소스 시퀀스에는 두 개 이상의 요소가 포함되어 있습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자와 일치하는 관찰 가능한 시퀀스의 유일한 요소를 반환하거나 이러한 요소가 없는 경우 기본값을 반환합니다. 이 메서드는 관찰 가능한 시퀀스에 두 개 이상의 요소가 있는 경우 예외를 보고합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">(비동기) 시퀀스에는 술어의 조건을 조정하는 요소가 두 개 이상 포함되어 있습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Double})">
            <summary><see cref="T:System.Double"/> 값의 시퀀스의 합계를 계산합니다.</summary>
            <param name="source">합계를 계산하는 <see cref="T:System.Double"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Single})">
            <summary><see cref="T:System.Single"/> 값의 시퀀스의 합계를 계산합니다.</summary>
            <param name="source">합계를 계산하는 <see cref="T:System.Single"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Decimal})">
            <summary><see cref="T:System.Decimal"/> 값의 시퀀스의 합계를 계산합니다.</summary>
            <param name="source">합계를 계산하는 <see cref="T:System.Decimal"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Decimal.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Int32})">
            <summary><see cref="T:System.Int32"/> 값의 시퀀스의 합계를 계산합니다.</summary>
            <param name="source">합계를 계산하는 <see cref="T:System.Int32"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Int32.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Int64})">
            <summary><see cref="T:System.Int64"/> 값의 시퀀스의 합계를 계산합니다.</summary>
            <param name="source">합계를 계산하는 <see cref="T:System.Int64"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Double}})">
            <summary>무효 <see cref="T:System.Double"/>값 시퀀스의 합계를 계산합니다.</summary>
            <param name="source">합계를 계산하는 무효 <see cref="T:System.Double"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Single}})">
            <summary>무효 <see cref="T:System.Single"/>값 시퀀스의 합계를 계산합니다.</summary>
            <param name="source">합계를 계산하는 무효 <see cref="T:System.Single"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>무효 <see cref="T:System.Decimal"/>값 시퀀스의 합계를 계산합니다.</summary>
            <param name="source">합계를 계산하는 무효 <see cref="T:System.Decimal"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Decimal.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int32}})">
            <summary>무효 <see cref="T:System.Int32"/>값 시퀀스의 합계를 계산합니다.</summary>
            <param name="source">합계를 계산하는 무효 <see cref="T:System.Int32"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Int32.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int64}})">
            <summary>무효 <see cref="T:System.Int64"/>값 시퀀스의 합계를 계산합니다.</summary>
            <param name="source">합계를 계산하는 무효 <see cref="T:System.Int64"/> 값의 시퀀스입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소 합계가 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Double})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 얻은  <see cref="T:System.Double"/> 값 시퀀스의 합계를 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">합계를 계산하는 데 사용되는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Single})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 얻은  <see cref="T:System.Single"/> 값 시퀀스의 합계를 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">합계를 계산하는 데 사용되는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 얻은  <see cref="T:System.Decimal"/> 값 시퀀스의 합계를 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">합계를 계산하는 데 사용되는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Decimal.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Int32})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 얻은  <see cref="T:System.Int32"/> 값 시퀀스의 합계를 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">합계를 계산하는 데 사용되는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Int32.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Int64})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 얻은  <see cref="T:System.Int64"/> 값 시퀀스의 합계를 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">합계를 계산하는 데 사용되는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 무효 <see cref="T:System.Double"/> 값 시퀀스의 합계를 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">합계를 계산하는 데 사용되는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 무효 <see cref="T:System.Single"/> 값 시퀀스의 합계를 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">합계를 계산하는 데 사용되는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 무효 <see cref="T:System.Decimal"/> 값 시퀀스의 합계를 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">합계를 계산하는 데 사용되는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Decimal.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 무효 <see cref="T:System.Int32"/> 값 시퀀스의 합계를 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">합계를 계산하는 데 사용되는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Int32.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>입력 시퀀스의 각 요소에 변환 함수를 호출하여 가져오는 무효 <see cref="T:System.Int64"/> 값 시퀀스의 합계를 계산합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">합계를 계산하는 데 사용되는 값의 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>null입니다.</exception>
            <exception cref="T:System.OverflowException">(비동기) 소스 시퀀스의 요소에 대한 투영된 값의 합이 <see cref="M:System.Int64.MaxValue"/>보다 큽니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToArray``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스에서 배열을 만듭니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">소스 관찰 가능한 시퀀스에 대한 요소 배열을 가져옵니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToDictionary``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>지정된 키 선택기 함수에 따라 관찰 가능한 시퀀스의 요소를 그룹화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 사전 키의 형식입니다.</typeparam>
            <param name="source">사전을 만들 수 있는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
            <returns>해당 소스 시퀀스의 요소에 고유한 키 값을 매핑하는 사전이 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/>null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToDictionary``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택 함수 및 비교자에 따라 관찰 가능한 시퀀스의 요소를 그룹화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 사전 키의 형식입니다.</typeparam>
            <param name="source">사전을 만들 수 있는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>해당 소스 시퀀스의 요소에 고유한 키 값을 매핑하는 사전이 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToDictionary``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>지정된 키 선택 함수 및 요소 선택 함수에 따라 관찰 가능한 시퀀스에서 사전을 만듭니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 사전 키의 형식입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 사전 값의 형식입니다.</typeparam>
            <param name="source">사전을 만들 수 있는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
            <returns>해당 소스 시퀀스의 요소에 고유한 키 값을 매핑하는 사전이 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToDictionary``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택 함수, 비교기 및 요소 선택기 함수에 따라 관찰 가능한 시퀀스에서 사전을 만듭니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 사전 키의 형식입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 사전 값의 형식입니다.</typeparam>
            <param name="source">사전을 만들 수 있는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>해당 소스 시퀀스의 요소에 고유한 키 값을 매핑하는 사전이 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToList``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스에서 목록을 만듭니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">소스 관찰 가능한 시퀀스를 사용하여 요소 목록을 가져옵니다.</param>
            <returns>소스 시퀀스의 값 합계가 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToLookup``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>지정된 키 선택기 함수에 따라 관찰 가능한 시퀀스의 요소를 그룹화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 조회 키의 유형입니다.</typeparam>
            <param name="source">조회를 만드는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
            <returns>해당 소스 시퀀스의 요소에 고유한 키 값을 매핑하는 조회 기능이 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/>null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToLookup``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택 함수 및 비교자에 따라 관찰 가능한 시퀀스의 요소를 그룹화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 조회 키의 유형입니다.</typeparam>
            <param name="source">조회를 만드는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>해당 소스 시퀀스의 요소에 고유한 키 값을 매핑하는 조회 기능이 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToLookup``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>지정된 키 선택 기 함수 및 요소 선택 기 함수에 따라 관찰 가능한 시퀀스에서 조회를 만듭니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 조회 키의 유형입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 조회 값의 형식입니다.</typeparam>
            <param name="source">조회를 만드는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
            <returns>해당 소스 시퀀스의 요소에 고유한 키 값을 매핑하는 조회 기능이 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToLookup``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택 함수, 비교기 및 요소 선택기 함수에 따라 관찰 가능한 시퀀스에서 조회를 만듭니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 조회 키의 유형입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 조회 값의 형식입니다.</typeparam>
            <param name="source">조회를 만드는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에서 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">각 요소에서 결과 요소 값을 생성하는 변환 함수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>해당 소스 시퀀스의 요소에 고유한 키 값을 매핑하는 조회 기능이 있는 단일 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 반환 형식은 비동기 동작을 유지하기 위해 IEnumerable의 해당 연산자와 다릅니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GetAwaiter``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 마지막 값을 반환하거나 시퀀스가 비어 있는 경우 예외를 발생시키는 awaiter를 가져옵니다. 이 작업은 관찰 가능한 시퀀스를 구독하여 뜨거워지도록 합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">대기할 소스 시퀀스입니다.</param>
            <returns>기다릴 수 있는 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GetAwaiter``1(System.Reactive.Subjects.IConnectableObservable{``0})">
            <summary>관찰 가능한 시퀀스의 마지막 값을 반환하거나 시퀀스가 비어 있는 경우 예외를 발생시키는 awaiter를 가져옵니다. 이 작업은 관찰 가능한 시퀀스를 구독하고 연결하여 뜨거워지게 합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">대기할 소스 시퀀스입니다.</param>
            <returns>기다릴 수 있는 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.RunAsync``1(System.IObservable{``0},System.Threading.CancellationToken)">
            <summary>관찰 가능한 시퀀스의 마지막 값을 반환하거나 시퀀스가 비어 있는 경우 예외를 발생시키는 awaiter를 가져옵니다. 이 작업은 관찰 가능한 시퀀스를 구독하여 뜨거워지도록 합니다. 제공된 CancelToken을 사용하여 구독을 취소할 수 있습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">대기할 소스 시퀀스입니다.</param>
            <param name="cancellationToken">취소 토큰입니다.</param>
            <returns>기다릴 수 있는 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.RunAsync``1(System.Reactive.Subjects.IConnectableObservable{``0},System.Threading.CancellationToken)">
            <summary>관찰 가능한 시퀀스의 마지막 값을 반환하거나 시퀀스가 비어 있는 경우 예외를 발생시키는 awaiter를 가져옵니다. 이 작업은 관찰 가능한 시퀀스를 구독하고 연결하여 뜨거워지게 합니다. 제공된 CancelToken을 사용하여 구독 및 연결을 취소할 수 있습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">대기할 소스 시퀀스입니다.</param>
            <param name="cancellationToken">취소 토큰입니다.</param>
            <returns>기다릴 수 있는 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Multicast``2(System.IObservable{``0},System.Reactive.Subjects.ISubject{``0,``1})">
            <summary>지정된 주체를 통해 소스 시퀀스 알림을 관찰 가능한 연결 가능한 결과로 멀티캐스트합니다. 연결 가능한 관찰 가능 의 연결 시, 제목은 정확히 하나 소스에 가입 하 고 메시지는 연결 가능한 관찰에 등록 된 관찰자에 게 전달 됩니다. 고정된 주제 유형의 특수화는 게시, PublishLast, 그리고 재생을 참조하세요.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 유형입니다.</typeparam>
            <param name="source">요소가 지정된 제목으로 푸시되는 소스 시퀀스입니다.</param>
            <param name="subject">소스 요소를 푸시할 수 있습니다.</param>
            <returns>연결 시 소스 시퀀스가 결과를 지정된 주제로 푸시하는 연결 가능한 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="subject"/>null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Multicast``3(System.IObservable{``0},System.Func{System.Reactive.Subjects.ISubject{``0,``1}},System.Func{System.IObservable{``1},System.IObservable{``2}})">
            <summary>인스턴스화 된 주제를 통해 소스 시퀀스 알림을 선택기 함수 내에서 시퀀스의 모든 용도로 다중 캐스트합니다. 결과 시퀀스에 대한 각 구독은 별도의 멀티캐스트 호출을 일으켜 선택기 함수의 호출로 인한 시퀀스를 노출합니다. 고정된 주제 유형의 특수화는 게시, PublishLast, 그리고 재생을 참조하세요.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TIntermediate">주체에서 생성된 요소의 유형입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 유형입니다.</typeparam>
            <param name="source">지정된 선택기 함수에서 다중 캐스트될 소스 시퀀스입니다.</param>
            <param name="subjectSelector">소스 시퀀스의 요소가 선택기 함수에 멀티캐스트되는 중간 피사체를 만드는 팩터리 함수입니다.</param>
            <param name="selector">생성된 피사체에 의해 적용된 정책에 따라 다중 캐스트 소스 시퀀스를 사용할 수 있는 selector 기능입니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="subjectSelector"/> 또는 <paramref name="selector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Publish``1(System.IObservable{``0})">
            <summary>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다. 이 연산자는 일반 <see cref="T:System.Reactive.Subjects.Subject`1"/>을(를) 사용하여 멀티 캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>구독자는 구독 시점부터 소스에 대한 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.Subject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>모든 알림을 재생하는 기본 시퀀스에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는 일반 <see cref="T:System.Reactive.Subjects.Subject`1"/>을(를) 사용하여 멀티 캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 구독 시점부터 소스에 대한 모든 알림을 받게 됩니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.Subject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Publish``1(System.IObservable{``0},``0)">
            <summary>모든 알림을 재생하는 기본 시퀀스에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="initialValue">구독 시 관찰자가 받은 초기 값입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>구독자는 즉시 초기 값을 받고 구독 시점부터 소스의 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.BehaviorSubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},``0)">
            <summary>모든 알림을 재생하는 기본 시퀀스에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 즉시 초기 값을 받고 구독 시점부터 원본에 대한 모든 알림을 받게 됩니다.</param>
            <param name="initialValue">구독 시 관찰자가 받은 초기 값입니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.BehaviorSubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.PublishLast``1(System.IObservable{``0})">
            <summary>모든 알림을 재생하는 기본 시퀀스에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>구독자는 소스의 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.AsyncSubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.PublishLast``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>모든 알림을 재생하는 기본 시퀀스에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 원본의 모든 알림을 받게 됩니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.AsyncSubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.RefCount``1(System.Reactive.Subjects.IConnectableObservable{``0})">
            <summary>관찰 가능한 시퀀스에 대한 구독이 하나 이상 있는 경우 소스에 연결된 상태로 유지되는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">샘플링된 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스에 대한 구독이 하나 이상 있는 한 소스에 연결된 상태로 유지되는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0})">
            <summary>모든 알림을 재생하는 기본 시퀀스에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>구독자는 소스의 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>모든 알림을 재생하는 기본 시퀀스에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="scheduler">연결된 관찰자가 호출되는 스케줄러입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <remarks>구독자는 소스의 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>모든 알림을 재생하는 기본 시퀀스에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 원본의 모든 알림을 받게 됩니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Reactive.Concurrency.IScheduler)">
            <summary>모든 알림을 재생하는 기본 시퀀스에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 원본의 모든 알림을 받게 됩니다.</param>
            <param name="scheduler">선택기 함수 내에서 연결된 관찰자가 호출되는 스케줄러입니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="selector"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.TimeSpan)">
            <summary>재생 버퍼의 최대 시간 길이에 따라 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 검색 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="window"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan)">
            <summary>재생 버퍼의 최대 시간 길이가 적용된 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</param>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="window"/> TimeSpan.Zero보다 적습니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>재생 버퍼의 최대 시간 길이에 따라 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 검색 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <param name="scheduler">연결된 관찰자가 호출되는 스케줄러입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="window"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>재생 버퍼의 최대 시간 길이가 적용된 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</param>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <param name="scheduler">선택기 함수 내에서 연결된 관찰자가 호출되는 스케줄러입니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="selector"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="window"/> TimeSpan.Zero보다 적습니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>모든 알림을 재생하는 기본 시퀀스에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <param name="scheduler">연결된 관찰자가 호출되는 스케줄러입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다.</exception>
            <remarks>구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>재생 버퍼에 대한 최대 요소 수에 따라 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 검색 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</param>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <param name="scheduler">선택기 함수 내에서 연결된 관찰자가 호출되는 스케줄러입니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="selector"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32)">
            <summary>재생 버퍼의 최대 시간 길이에 따라 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 검색 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다.</exception>
            <remarks>구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32)">
            <summary>재생 버퍼에 대한 최대 요소 수에 따라 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 검색 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</param>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan)">
            <summary>재생 버퍼에 대한 최대 시간 길이 및 요소 수에 따라 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 검색 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="window"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan)">
            <summary>재생 버퍼에 대한 최대 시간 길이 및 요소 수에 따라 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</param>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="window"/> TimeSpan.Zero보다 적습니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>재생 버퍼에 대한 최대 시간 길이 및 요소 수에 따라 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 검색 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <param name="scheduler">연결된 관찰자가 호출되는 스케줄러입니다.</param>
            <returns>기본 시퀀스에 대한 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="window"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</remarks>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>재생 버퍼에 대한 최대 시간 길이 및 요소 수에 따라 기본 시퀀스 재생 알림에 단일 구독을 공유하는 연결 가능하고 관찰 가능한 시퀀스에서 선택기를 호출한 결과인 관찰 가능한 시퀀스를 반환합니다. 이 연산자는을(를) 사용하여 멀티캐스트를 전문화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">단일 공유 구독을 통해 요소가 다중 캐스트되는 소스 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스에 대한 여러 구독을 유발하지 않고 필요한 만큼 멀티캐스트 소스 시퀀스를 사용할 수 있는 선택기 기능입니다. 지정된 원본의 구독자는 지정된 재생 버퍼 트리밍 정책에 따라 소스의 모든 알림을 받게 됩니다.</param>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <param name="scheduler">선택기 함수 내에서 연결된 관찰자가 호출되는 스케줄러입니다.</param>
            <returns>선택기 함수 내에서 소스 시퀀스를 다중 캐스팅하여 생성된 시퀀스의 요소가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="selector"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="window"/> TimeSpan.Zero보다 적습니다.</exception>
            <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Chunkify``1(System.IObservable{``0})">
            <summary>소스 시퀀스의 연속(비어 있을 수 있음) 청크의 열거 가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>각 반복시 연속(비어 있을 수 있음) 청크를 반환하는 열거 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Collect``2(System.IObservable{``0},System.Func{``1},System.Func{``1,``0,``1})">
            <summary>연속 반복 간에 소스 시퀀스에서 수집/집계된 요소를 반환하는 열거가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">컬렉션 중에 병합 작업에서 생성되는 요소의 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="newCollector">새 수집기 개체를 만들 팩터리입니다.</param>
            <param name="merge">시퀀스 요소를 현재 수집기와 병합합니다.</param>
            <returns>각 반복 시 소스 시퀀스에서 수집/집계된 요소를 반환하는 열거 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="newCollector"/> 또는 <paramref name="merge"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Collect``2(System.IObservable{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1})">
            <summary>연속 반복 간에 소스 시퀀스에서 수집/집계된 요소를 반환하는 열거가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">컬렉션 중에 병합 작업에서 생성되는 요소의 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="getInitialCollector">초기 수집기 개체를 만들 수 있습니다.</param>
            <param name="merge">시퀀스 요소를 현재 수집기와 병합합니다.</param>
            <param name="getNewCollector">현재 수집기를 새 수집기로 대체할 팩터리입니다.</param>
            <returns>각 반복 시 소스 시퀀스에서 수집/집계된 요소를 반환하는 열거 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="getInitialCollector"/> 또는 <paramref name="merge"/> 또는 <paramref name="getNewCollector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.First``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 첫 번째 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 마지막 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있습니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.First``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 첫 번째 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 첫 번째 요소를 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">조건자의 조건을 충족하는 요소가 없습니다. - 또한 - 소스 시퀀스가 비어 있습니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FirstOrDefault``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 첫 번째 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 첫 번째 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.FirstOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 첫 번째 요소를 반환하거나 이러한 요소가 없는 경우 기본값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 첫 번째 요소를 반환하거나 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ForEach``1(System.IObservable{``0},System.Action{``0})">
            <summary>관찰 가능한 시퀀스의 각 요소에 대한 작업을 호출하고 시퀀스가 종료될 때까지 차단합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/>은(는) null입니다.</exception>
            <remarks>차단 특성으로 인해 이 연산자는 주로 테스트하는 데 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ForEach``1(System.IObservable{``0},System.Action{``0,System.Int32})">
            <summary>관찰 가능한 시퀀스의 각 요소에 대한 작업을 호출하여 요소의 인덱스를 통합하고 시퀀스가 종료될 때까지 차단합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/>은(는) null입니다.</exception>
            <remarks>차단 특성으로 인해 이 연산자는 주로 테스트하는 데 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GetEnumerator``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 모든 값을 열거하는 열거형 열을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">사전을 만들 수 있는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 요소를 열거하는 데 사용할 수 있는 열거형입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Last``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 마지막 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 마지막 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있습니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Last``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소를 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">조건자의 조건을 충족하는 요소가 없습니다. - 또한 - 소스 시퀀스가 비어 있습니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LastOrDefault``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.LastOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Latest``1(System.IObservable{``0})">
            <summary>열거형이 소스 관찰 가능한 시퀀스에서 최신 관찰 요소를 반환하는 열거형 시퀀스를 반환합니다. 결과 시퀀스의 열거자는 동일한 요소를 반복적으로 생성하지 않으며 다음 요소를 사용할 수 있을 때까지 차단됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>각 반복시 마지막 샘플링된 요소를 반환하고 관찰 가능한 소스 시퀀스의 다음 요소가 사용할 수 있을 때까지 차단하는 열거가능한 시퀀스입니다.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.MostRecent``1(System.IObservable{``0},``0)">
            <summary>아직 샘플링되지 않은 요소가 없는 경우 지정된 초기 값을 사용하여 열거가 소스 관찰 가능한 시퀀스에서 가장 최근에 관찰된 요소를 반환하는 열거형 시퀀스를 반환합니다. 결과 시퀀스의 열거자는 차단되지 않으며 동일한 요소를 반복적으로 생성할 수 있습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="initialValue">아직 샘플링된 요소가 없는 경우 열거 가능한 시퀀스에 의해 산출되는 초기 값입니다.</param>
            <returns>각 반복시 마지막 샘플링된 요소를 반환하는 열거가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Next``1(System.IObservable{``0})">
            <summary>소스 관찰 가능한 시퀀스의 다음 요소가 사용 가능해질 때까지 열거 블록이 있는 열거형 시퀀스를 반환합니다. 결과 시퀀스의 열거자는 다음 요소를 사용할 수 있을 때까지 차단됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 소스 시퀀스의 다음 요소가 사용 가능해질 때까지 각 반복을 차단하는 열거 가능한 시퀀스를 사용할 수 있습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Single``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 유일한 요소를 반환하고 관찰 가능한 시퀀스에 정확히 하나의 요소가 없는 경우 예외를 throw합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 마지막 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">소스 시퀀스에는 두 개 이상의 요소가 포함되어 있습니다. - 또한 - 소스 시퀀스가 비어 있습니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Single``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 조정하는 관찰 가능한 시퀀스의 유일한 요소를 반환하고 관찰 가능한 시퀀스에서 조건어와 일치하는 요소가 하나도 없는 경우 예외를 throw합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소를 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">조건자의 조건을 충족하는 요소가 없습니다. - 또는 - 하나 이상의 요소가 조건자의 조건을 충족합니다. - 또한 - 소스 시퀀스가 비어 있습니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SingleOrDefault``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 유일한 요소 또는 관찰 가능한 시퀀스가 비어 있는 경우 기본값을 반환합니다. 이 메서드는 관찰 가능한 시퀀스에 두 개 이상의 요소가 있는 경우 예외를 throw합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">소스 시퀀스에는 두 개 이상의 요소가 포함되어 있습니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SingleOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자의 조건을 만족하는 관찰 가능한 시퀀스의 유일한 요소를 반환하거나 이러한 요소가 없는 경우 기본값을 반환합니다. 이 메서드는 관찰 가능한 시퀀스에서 조건어와 일치하는 요소가 두 개 이상 인 경우 예외를 throw합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <param name="predicate">소스 시퀀스의 요소를 평가하는 조건자 함수입니다.</param>
            <returns>조건자의 조건을 충족하는 관찰 가능한 시퀀스의 마지막 요소 또는 이러한 요소가 없는 경우 기본값을 반환합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">- 또는 - 하나 이상의 요소가 조건자의 조건을 충족합니다.</exception>
            <seealso cref="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})"/>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Wait``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스가 완료될 때까지 기다렸다가 시퀀스의 마지막 요소를 반환합니다. 시퀀스가 OnError 알림으로 종료되면 예외가 throw됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 관찰 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 마지막 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러에서 관찰자 콜백을 실행하기 위해 소스 시퀀스를 래핑합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="scheduler">스케줄러를 사용하여 관찰자에게 알립니다.</param>
            <returns>지정된 스케줄러에서 관찰이 이루어지는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <remarks>이렇게 하면 스케줄러에서 관찰자 콜백만 호출됩니다. 구독 및/또는 구독 취소 작업에 스케줄러에서 실행해야 하는 부작용이 있는 경우을 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>지정된 동기화 컨텍스트에서 관찰자 콜백을 실행하기 위해 소스 시퀀스를 래핑합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="context">관찰자에게 알리는 동기화 컨텍스트입니다.</param>
            <returns>지정된 동기화 컨텍스트에서 관찰이 발생하는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="context"/>은(는) null입니다.</exception>
            <remarks>이렇게 하면 동기화 컨텍스트에서 관찰자 콜백만 호출됩니다. 구독 및/또는 구독 취소 작업에 동기화 컨텍스트에서 실행해야 하는 부작용이 있는 경우을 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러에서 구독 및 구독 취소 논리를 실행하기 위해 소스 시퀀스를 래핑합니다. 이 작업은 일반적으로 사용되지 않습니다. SubscribeOn과 ObserveOn의 차이점에 대한 자세한 내용은 비고 섹션을 참조하세요.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="scheduler">스케줄러에서 구독 및 구독 취소 작업을 수행합니다.</param>
            <returns>구독 및 구독 취소가 지정된 스케줄러에서 발생하는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <remarks>이렇게 하면 지정된 스케줄러에서 구독 및 구독 취소의 부작용만 수행합니다. 스케줄러에서 관찰자 콜백을 호출하려면을 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>지정된 동기화 컨텍스트에서 구독 및 구독 취소 논리를 실행하기 위해 소스 시퀀스를 래핑합니다. 이 작업은 일반적으로 사용되지 않습니다. SubscribeOn과 ObserveOn의 차이점에 대한 자세한 내용은 비고 섹션을 참조하세요.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="context">동기화 컨텍스트를 사용하여 구독 및 구독 취소 작업을 수행할 수 있습니다.</param>
            <returns>지정된 동기화 컨텍스트에서 구독 및 구독 취소가 발생하는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="context"/>은(는) null입니다.</exception>
            <remarks>이렇게 하면 지정된 동기화 컨텍스트에서 구독 및 구독 취소의 부작용만 수행합니다. 동기화 컨텍스트에서 관찰자 콜백을 호출하려면을 사용합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Synchronize``1(System.IObservable{``0})">
            <summary>관찰자 알림이 동시에 배달될 수 없도록 관찰 가능한 시퀀스를 동기화합니다. 이 오버로드는 쿼리 프로세서에 대해 잘못된 동작인 개별 관찰자에 대한 동시 콜백을 나타내는 관찰 가능한 시퀀스를 &quot;수정&quot;하는 데 유용합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <returns>관찰자에 대한 나가는 호출이 동기화되는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>관찰자 문법에 따라 시퀀스가 지정된 관찰자에 동시 콜백을 나타내는 것은 잘못된 동작입니다. 이 연산자는 이 규칙을 준수하지 않는 소스를 &quot;수정&quot;하는 데 사용할 수 있습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Synchronize``1(System.IObservable{``0},System.Object)">
            <summary>지정된 게이트 개체를 사용하여 관찰자 알림을 동시에 전달할 수 없도록 관찰 가능한 시퀀스를 동기화합니다. 이 오버로드는 공통 게이트 개체에 동기화하여 다른 소스의 동시 콜백을 방지하기 위해 n-ary 쿼리 연산자를 작성할 때 유용합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="gate">각 관찰자 호출을 동기화하는 게이트 개체입니다.</param>
            <returns>지정된 게이트 개체에서 관찰자에 대해 나가는 호출이 동기화되는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="gate"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
            <summary>관찰자를 열거 가능한 시퀀스에 구독합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 열거 가능한 시퀀스입니다.</param>
            <param name="observer">열거 가능한 시퀀스에서 알림을 받게 됩니다.</param>
            <returns>열거 가능한 시퀀스에서 관찰자의 구독을 취소하는 데 사용할 수 있는 일회용 개체</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="observer"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 열거 루프를 실행하여 관찰자를 열거 가능한 시퀀스에 구독합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독할 열거 가능한 시퀀스입니다.</param>
            <param name="observer">열거 가능한 시퀀스에서 알림을 받게 됩니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>열거 가능한 시퀀스에서 관찰자의 구독을 취소하는 데 사용할 수 있는 일회용 개체</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="observer"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToEnumerable``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스를 열거 가능한 시퀀스로 변환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">관찰 가능한 시퀀스로 변환할 열거 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 요소를 포함하는 열거 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})">
            <summary>관찰 가능한 시퀀스를 Action 기반 .NET 이벤트가 있는 개체로 노출합니다.</summary>
            <param name="source">관찰 가능한 소스 시퀀스입니다.</param>
            <returns>이벤트 소스 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToEvent``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스를 Action&lt;TSource&gt;기반 .NET 이벤트가 있는 개체로 노출합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">관찰 가능한 소스 시퀀스입니다.</param>
            <returns>이벤트 소스 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})">
            <summary>관찰 가능한 시퀀스를 표준 .NET 이벤트 패턴을 준수하여 .NET 이벤트가 있는 개체로 노출합니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
            <param name="source">관찰 가능한 소스 시퀀스입니다.</param>
            <returns>이벤트 소스 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>열거형 시퀀스를 관찰 가능한 시퀀스로 변환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">관찰 가능한 시퀀스로 변환할 열거 가능한 시퀀스입니다.</param>
            <returns>지정된 열거 가능한 시퀀스에서 요소를 가져온 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 열거형 시퀀스를 관찰 가능한 시퀀스로 변환하여 열거 루프를 실행합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">관찰 가능한 시퀀스로 변환할 열거 가능한 시퀀스입니다.</param>
            <param name="scheduler">스케줄러는 소스 시퀀스를 열거합니다.</param>
            <returns>지정된 열거 가능한 시퀀스에서 요소를 가져온 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.IDisposable})">
            <summary>지정된 Subscribe 메서드 구현에서 관찰 가능한 시퀀스를 만듭니다.</summary>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="subscribe">결과 관찰 가능한 시퀀스의 구독 메서드 구현입니다.</param>
            <returns>Subscribe 메서드에 대해 지정된 구현이 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribe"/> null입니다.</exception>
            <remarks>IObservable&lt;T&gt; 인터페이스의 수동 구현보다 이 연산자의 사용이 선호됩니다. 익명 구현이 아닌 IObservable&lt;T&gt;를 구현하는 형식이 필요한 경우 <see cref="T:System.Reactive.ObservableBase`1"/>추상 기본 클래스를 사용하는 것이 좋습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Action})">
            <summary>지정된 Subscribe 메서드 구현에서 관찰 가능한 시퀀스를 만듭니다.</summary>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="subscribe">결과 시퀀스의 구독 메서드를 구현하는 데 사용되는 비동기 메서드, IDisposable에 래핑될 작업 대리자를 반환합니다.</param>
            <returns>Subscribe 메서드에 대해 지정된 구현이 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribe"/> null입니다.</exception>
            <remarks>IObservable&lt;T&gt; 인터페이스의 수동 구현보다 이 연산자의 사용이 선호됩니다. 익명 구현이 아닌 IObservable&lt;T&gt;를 구현하는 형식이 필요한 경우 <see cref="T:System.Reactive.ObservableBase`1"/>추상 기본 클래스를 사용하는 것이 좋습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>지정된 취소 가능 비동기 구독 메서드에서 관찰 가능한 시퀀스를 만듭니다. 비동기 구독 메서드에 전달된 CancelToken은 반환된 일회용 구독에 연결되므로 최상의 방법으로 취소할 수 있습니다.</summary>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="subscribeAsync">요소를 생성하는 데 사용되는 비동기 메서드입니다.</param>
            <returns>비동기 메서드에 의해 생성된 요소를 표면화하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribeAsync"/> null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
            <remarks>결과 시퀀스에 대한 구독이 폐기되면 비동기 구독 함수에 공급된 CancelToken이 신호를 제공합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.Tasks.Task})">
            <summary>지정된 비동기 구독 메서드에서 관찰 가능한 시퀀스를 만듭니다.</summary>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="subscribeAsync">요소를 생성하는 데 사용되는 비동기 메서드입니다.</param>
            <returns>비동기 메서드에 의해 생성된 요소를 표면화하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribeAsync"/> null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>지정된 취소 가능 비동기 구독 메서드에서 관찰 가능한 시퀀스를 만듭니다. 비동기 구독 메서드에 전달된 CancelToken은 반환된 일회용 구독에 연결되므로 최상의 방법으로 취소할 수 있습니다.</summary>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="subscribeAsync">결과 시퀀스의 구독 메서드를 구현하는 데 사용되는 비동기 메서드입니다.</param>
            <returns>Subscribe 메서드에 대해 지정된 구현이 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribeAsync"/> null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
            <remarks>결과 시퀀스에 대한 구독이 폐기되면 비동기 구독 함수에 공급된 CancelToken이 신호를 제공합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.Tasks.Task{System.IDisposable}})">
            <summary>지정된 비동기 구독 메서드에서 관찰 가능한 시퀀스를 만듭니다.</summary>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="subscribeAsync">결과 시퀀스의 구독 메서드를 구현하는 데 사용되는 비동기 메서드입니다.</param>
            <returns>Subscribe 메서드에 대해 지정된 구현이 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribeAsync"/> null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Action}})">
            <summary>지정된 취소 가능 비동기 구독 메서드에서 관찰 가능한 시퀀스를 만듭니다. 비동기 구독 메서드에 전달된 CancelToken은 반환된 일회용 구독에 연결되므로 최상의 방법으로 취소할 수 있습니다.</summary>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="subscribeAsync">결과 시퀀스의 구독 메서드를 구현하는 데 사용되는 비동기 메서드, IDisposable에 래핑될 작업 대리자를 반환합니다.</param>
            <returns>Subscribe 메서드에 대해 지정된 구현이 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribeAsync"/> null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
            <remarks>결과 시퀀스에 대한 구독이 폐기되면 비동기 구독 함수에 공급된 CancelToken이 신호를 제공합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.Tasks.Task{System.Action}})">
            <summary>지정된 비동기 구독 메서드에서 관찰 가능한 시퀀스를 만듭니다.</summary>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="subscribeAsync">결과 시퀀스의 구독 메서드를 구현하는 데 사용되는 비동기 메서드, IDisposable에 래핑될 작업 대리자를 반환합니다.</param>
            <returns>Subscribe 메서드에 대해 지정된 구현이 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribeAsync"/> null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Defer``1(System.Func{System.IObservable{``0}})">
            <summary>새 관찰자가 구독할 때마다 지정된 팩터리 함수를 호출하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">팩터리 함수 및 결과 시퀀스에서 반환되는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="observableFactory">비동기 팩터리 함수는 결과 시퀀스를 구독하는 각 관찰자에 대해 시작합니다.</param>
            <returns>관찰자가 지정된 관찰 가능한 팩터리 함수의 호출을 트리거하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observableFactory"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Defer``1(System.Func{System.Threading.Tasks.Task{System.IObservable{``0}}})">
            <summary>새 관찰자가 구독할 때마다 지정된 비동기 팩터리 함수를 시작하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">팩터리 함수 및 결과 시퀀스에서 반환되는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="observableFactoryAsync">비동기 팩터리 함수는 결과 시퀀스를 구독하는 각 관찰자에 대해 시작합니다.</param>
            <returns>지정된 비동기 관찰 가능한 팩터리 함수를 트리거하는 관찰자가 시작될 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observableFactoryAsync"/> null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DeferAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IObservable{``0}}})">
            <summary>새 관찰자가 구독할 때마다 지정된 cancellable 비동기 팩터리 함수를 시작하는 관찰 가능한 시퀀스를 반환합니다. 비동기 구독 메서드에 전달된 CancelToken은 반환된 일회용 구독에 연결되므로 최상의 방법으로 취소할 수 있습니다.</summary>
            <typeparam name="TResult">팩터리 함수 및 결과 시퀀스에서 반환되는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="observableFactoryAsync">비동기 팩터리 함수는 결과 시퀀스를 구독하는 각 관찰자에 대해 시작합니다.</param>
            <returns>지정된 비동기 관찰 가능한 팩터리 함수를 트리거하는 관찰자가 시작될 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observableFactoryAsync"/> null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
            <remarks>결과 시퀀스에 대한 구독이 폐기되면 비동기 구독 함수에 공급된 CancelToken이 신호를 제공합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Empty``1">
            <summary>빈 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 IObservable&lt;T&gt; 형식 매개 변수에 사용되는 형식입니다.</typeparam>
            <returns>요소가 없는 관찰 가능한 시퀀스입니다.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Empty``1(``0)">
            <summary>빈 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 IObservable&lt;T&gt; 형식 매개 변수에 사용되는 형식입니다.</typeparam>
            <param name="witness"><typeparamref name="TResult"/> 형식 매개 변수의 형식을 유추하는 데만 사용되는 개체입니다. 이 매개 변수는 일반적으로 익명으로 입력된 요소의 시퀀스를 만들 때 사용됩니다.</param>
            <returns>요소가 없는 관찰 가능한 시퀀스입니다.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Empty``1(System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 단일 OnCompleted 메시지를 보내는 빈 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 IObservable&lt;T&gt; 형식 매개 변수에 사용되는 형식입니다.</typeparam>
            <param name="scheduler">스케줄러가 종료 호출을 전송합니다.</param>
            <returns>요소가 없는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Empty``1(System.Reactive.Concurrency.IScheduler,``0)">
            <summary>지정된 스케줄러를 사용하여 단일 OnCompleted 메시지를 보내는 빈 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 IObservable&lt;T&gt; 형식 매개 변수에 사용되는 형식입니다.</typeparam>
            <param name="scheduler">스케줄러가 종료 호출을 전송합니다.</param>
            <param name="witness"><typeparamref name="TResult"/> 형식 매개 변수의 형식을 유추하는 데만 사용되는 개체입니다. 이 매개 변수는 일반적으로 익명으로 입력된 요소의 시퀀스를 만들 때 사용됩니다.</param>
            <returns>요소가 없는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})">
            <summary>시퀀스의 요소를 생성하는 상태 기반 및 임시 루프를 실행하여 관찰 가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TState">생성기 루프에 사용되는 상태의 유형입니다.</typeparam>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="initialState">초기 상태입니다.</param>
            <param name="condition">생성을 종료하는 조건(false 반환 시).</param>
            <param name="iterate">반복 단계 기능입니다.</param>
            <param name="resultSelector">시퀀스에서 생성된 결과에 대한 선택기 함수입니다.</param>
            <returns>생성된 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> <paramref name="iterate"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하고 관찰자 메시지를 보내는 상태 기반 및 임시 루프를 실행하여 시퀀스의 요소를 생성하는 관찰 가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TState">생성기 루프에 사용되는 상태의 유형입니다.</typeparam>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="initialState">초기 상태입니다.</param>
            <param name="condition">생성을 종료하는 조건(false 반환 시).</param>
            <param name="iterate">반복 단계 기능입니다.</param>
            <param name="resultSelector">시퀀스에서 생성된 결과에 대한 선택기 함수입니다.</param>
            <param name="scheduler">생성기 루프를 실행할 스케줄러입니다.</param>
            <returns>생성된 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> 또는 <paramref name="iterate"/> 또는 <paramref name="resultSelector"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Never``1">
            <summary>무한 기간을 나타내는 데 사용할 수 있는 비종료 관찰 가능한 시퀀스를 반환합니다(예: 반응성 조인 사용 시).</summary>
            <typeparam name="TResult">결과 시퀀스의 IObservable&lt;T&gt; 형식 매개 변수에 사용되는 형식입니다.</typeparam>
            <returns>관찰자가 호출되지 않는 관찰 가능한 시퀀스입니다.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Never``1(``0)">
            <summary>무한 기간을 나타내는 데 사용할 수 있는 비종료 관찰 가능한 시퀀스를 반환합니다(예: 반응성 조인 사용 시).</summary>
            <typeparam name="TResult">결과 시퀀스의 IObservable&lt;T&gt; 형식 매개 변수에 사용되는 형식입니다.</typeparam>
            <param name="witness"><typeparamref name="TResult"/> 형식 매개 변수의 형식을 유추하는 데만 사용되는 개체입니다. 이 매개 변수는 일반적으로 익명으로 입력된 요소의 시퀀스를 만들 때 사용됩니다.</param>
            <returns>관찰자가 호출되지 않는 관찰 가능한 시퀀스입니다.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Range(System.Int32,System.Int32)">
            <summary>지정된 범위 내에서 관찰 가능한 정수 시퀀스를 생성합니다.</summary>
            <param name="start">시퀀스의 첫 번째 정수 값입니다.</param>
            <param name="count">생성할 순차 적정 수입니다.</param>
            <returns>순차적 정수 범위가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적습니다. - 또는 - <paramref name="start"/> + <paramref name="count"/> - 1이 <see cref="M:System.Int32.MaxValue"/>보다 큽니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Range(System.Int32,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 관찰자 메시지를 보내는 지정된 범위 내에서 관찰 가능한 정수 번호 시퀀스를 생성합니다.</summary>
            <param name="start">시퀀스의 첫 번째 정수 값입니다.</param>
            <param name="count">생성할 순차 적정 수입니다.</param>
            <param name="scheduler">프로듀서 루프를 실행하는 스케줄러입니다.</param>
            <returns>순차적 정수 범위가 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적습니다. - 또는 - <paramref name="start"/> + <paramref name="count"/> - 1이 <see cref="M:System.Int32.MaxValue"/>보다 큽니다.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0)">
            <summary>지정된 요소를 무한히 반복하는 관찰 가능한 시퀀스입니다.</summary>
            <typeparam name="TResult">생성된 시퀀스에서 반복될 요소의 유형입니다.</typeparam>
            <param name="value">반복할 요소입니다.</param>
            <returns>지정된 요소를 무한히 반복하는 관찰 가능한 시퀀스입니다.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 지정된 요소를 무한히 반복하여 관찰자 메시지를 보내는 관찰 가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TResult">생성된 시퀀스에서 반복될 요소의 유형입니다.</typeparam>
            <param name="value">반복할 요소입니다.</param>
            <param name="scheduler">프로듀서 루프를 실행하는 스케줄러입니다.</param>
            <returns>지정된 요소를 무한히 반복하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Int32)">
            <summary>지정된 수의 지정된 요소를 반복하는 관찰 가능한 시퀀스입니다.</summary>
            <typeparam name="TResult">생성된 시퀀스에서 반복될 요소의 유형입니다.</typeparam>
            <param name="value">반복할 요소입니다.</param>
            <param name="repeatCount">요소를 반복할 횟수입니다.</param>
            <returns>지정된 수의 지정된 요소를 반복하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="repeatCount"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 지정된 수의 지정된 수의 지정된 요소를 반복하여 관찰자 메시지를 보내는 관찰 가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TResult">생성된 시퀀스에서 반복될 요소의 유형입니다.</typeparam>
            <param name="value">반복할 요소입니다.</param>
            <param name="repeatCount">요소를 반복할 횟수입니다.</param>
            <param name="scheduler">프로듀서 루프를 실행하는 스케줄러입니다.</param>
            <returns>지정된 수의 지정된 요소를 반복하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="repeatCount"/> 0보다 적습니다.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Return``1(``0)">
            <summary>단일 요소를 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">생성된 시퀀스에서 반환될 요소의 형식입니다.</typeparam>
            <param name="value">결과적으로 관찰 가능한 시퀀스의 단일 요소입니다.</param>
            <returns>지정된 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Return``1(``0,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 단일 OnError 메시지를 보내는 예외로 종료되는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">생성된 시퀀스에서 반환될 요소의 형식입니다.</typeparam>
            <param name="value">결과적으로 관찰 가능한 시퀀스의 단일 요소입니다.</param>
            <param name="scheduler">스케줄러가 종료 호출을 전송합니다.</param>
            <returns>지정된 단일 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)">
            <summary>예외를 사용하여 종료되는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 IObservable&lt;T&gt; 형식 매개 변수에 사용되는 형식입니다.</typeparam>
            <param name="exception">시퀀스의 종료에 사용되는 예외 개체입니다.</param>
            <returns>지정된 예외 개체를 사용하여 예외적으로 종료되는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception,``0)">
            <summary>예외를 사용하여 종료되는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 IObservable&lt;T&gt; 형식 매개 변수에 사용되는 형식입니다.</typeparam>
            <param name="exception">시퀀스의 종료에 사용되는 예외 개체입니다.</param>
            <param name="witness"><typeparamref name="TResult"/> 형식 매개 변수의 형식을 유추하는 데만 사용되는 개체입니다. 이 매개 변수는 일반적으로 익명으로 입력된 요소의 시퀀스를 만들 때 사용됩니다.</param>
            <returns>지정된 예외 개체를 사용하여 예외적으로 종료되는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 단일 OnError 메시지를 보내는 예외로 종료되는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 IObservable&lt;T&gt; 형식 매개 변수에 사용되는 형식입니다.</typeparam>
            <param name="exception">시퀀스의 종료에 사용되는 예외 개체입니다.</param>
            <param name="scheduler">예외적 종료 호출을 보내는 스케줄러입니다.</param>
            <returns>지정된 예외 개체를 사용하여 예외적으로 종료되는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception,System.Reactive.Concurrency.IScheduler,``0)">
            <summary>지정된 스케줄러를 사용하여 단일 OnError 메시지를 보내는 예외로 종료되는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">결과 시퀀스의 IObservable&lt;T&gt; 형식 매개 변수에 사용되는 형식입니다.</typeparam>
            <param name="exception">시퀀스의 종료에 사용되는 예외 개체입니다.</param>
            <param name="scheduler">예외적 종료 호출을 보내는 스케줄러입니다.</param>
            <param name="witness"><typeparamref name="TResult"/> 형식 매개 변수의 형식을 유추하는 데만 사용되는 개체입니다. 이 매개 변수는 일반적으로 익명으로 입력된 요소의 시퀀스를 만들 때 사용됩니다.</param>
            <returns>지정된 예외 개체를 사용하여 예외적으로 종료되는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Using``2(System.Func{``1},System.Func{``1,System.IObservable{``0}})">
            <summary>리소스 개체에 종속된 관찰 가능한 시퀀스를 생성하며, 수명은 결과적으로 발생하는 관찰 가능한 시퀀스의 수명과 연결됩니다.</summary>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResource">결과적으로 발생하는 시퀀스를 생성하는 동안 사용되는 리소스의 형식입니다. <see cref="T:System.IDisposable"/>을(를) 구현해야 합니다.</typeparam>
            <param name="resourceFactory">리소스 개체를 가져오는 팩터리 함수입니다.</param>
            <param name="observableFactory">팩터리 함수는 얻은 리소스에 종속된 관찰 가능한 시퀀스를 가져옵니다.</param>
            <returns>종속 리소스 개체의 수명을 평생 제어하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceFactory"/> 또는 <paramref name="observableFactory"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Using``2(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IObservable{``0}}})">
            <summary>리소스 개체에 종속된 관찰 가능한 시퀀스를 생성하며, 수명은 결과적으로 발생하는 관찰 가능한 시퀀스의 수명과 연결됩니다. 리소스는 비동기 메서드를 통해 가져오고 사용됩니다. 비동기 메서드에 전달된 CancelToken은 반환된 일회용 구독과 연결되므로 리소스 획득 또는 사용의 모든 단계에서 최상의 방법으로 취소할 수 있습니다.</summary>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResource">결과적으로 발생하는 시퀀스를 생성하는 동안 사용되는 리소스의 형식입니다. <see cref="T:System.IDisposable"/>을(를) 구현해야 합니다.</typeparam>
            <param name="resourceFactoryAsync">리소스 개체를 가져오는 비동기 팩터리 함수입니다.</param>
            <param name="observableFactoryAsync">비동기 팩터리 함수는 얻은 리소스에 종속된 관찰 가능한 시퀀스를 가져옵니다.</param>
            <returns>종속 리소스 개체의 수명을 평생 제어하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceFactoryAsync"/> 또는 <paramref name="observableFactoryAsync"/>은(는) null입니다.</exception>
            <remarks>이 연산자는 C# 5.0 및 Visual Basic 11에 도입된 비동기 프로그래밍 기능과 함께 특히 유용하게 사용됩니다.</remarks>
            <remarks>결과 시퀀스에 대한 구독이 폐기되면 비동기 구독 함수에 공급된 CancelToken이 신호를 제공합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.And``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TLeft">왼쪽 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TRight">오른쪽 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="left">올바른 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <param name="right">왼쪽 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> 또는 <paramref name="right"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Then``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">선택기를 적용하기 위한 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.When``1(System.Reactive.Joins.Plan{``0}[])">
            <summary>여러 패턴의 결과를 함께 결합합니다.</summary>
            <typeparam name="TResult">지정된 패턴에서 가져온 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="plans">패턴에 Then 연산자의 사용에 의해 만들어진 일련의 계획입니다.</param>
            <returns>여러 패턴을 일치시키는 결과와 함께 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plans"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.When``1(System.Collections.Generic.IEnumerable{System.Reactive.Joins.Plan{``0}})">
            <summary>여러 패턴의 결과를 함께 결합합니다.</summary>
            <typeparam name="TResult">지정된 패턴에서 가져온 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="plans">패턴에 Then 연산자의 사용에 의해 만들어진 일련의 계획입니다.</param>
            <returns>결과가 있는 관찰 가능한 시퀀스는 여러 패턴과 일치합니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="plans"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>먼저 반응하는 관찰 가능한 시퀀스를 전파합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">첫 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="second">두 번째 관찰 가능한 시퀀스입니다.</param>
            <returns>먼저 반응했는지 여부에 관계없이 지정된 시퀀스를 표면화하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> 또는 <paramref name="second"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0}[])">
            <summary>먼저 반응하는 관찰 가능한 시퀀스를 전파합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">먼저 반응하기 위해 경쟁하는 관찰 가능한 소스입니다.</param>
            <returns>먼저 반응했는지 여부에 관계없이 지정된 시퀀스를 표면화하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Amb``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>먼저 반응하는 관찰 가능한 시퀀스를 전파합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">먼저 반응하기 위해 경쟁하는 관찰 가능한 소스입니다.</param>
            <returns>먼저 반응했는지 여부에 관계없이 지정된 시퀀스를 표면화하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``2(System.IObservable{``0},System.Func{System.IObservable{``1}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 연속적으로 겹치지 않는 버퍼로 투영합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <typeparam name="TBufferClosing">버퍼 종료 이벤트를 나타내는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="bufferClosingSelector">생성된 버퍼의 경계를 정의하기 위해 호출된 함수입니다. 새 버퍼는 이전 버퍼가 닫히면 시작됩니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="bufferClosingSelector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``3(System.IObservable{``0},System.IObservable{``1},System.Func{``1,System.IObservable{``2}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 연속적으로 겹치지 않는 버퍼로 투영합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <typeparam name="TBufferOpening">버퍼 개방 이벤트를 나타내는 시퀀스의 요소 형식도 버퍼 닫기 이벤트 시퀀스를 얻기 위해 닫는 선택기로 전달됩니다.</typeparam>
            <typeparam name="TBufferClosing">버퍼 종료 이벤트를 나타내는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="bufferOpenings">요소가 새 버퍼의 생성을 나타내는 관찰 가능한 시퀀스입니다.</param>
            <param name="bufferClosingSelector">생성된 각 버퍼의 닫기를 정의하기 위해 호출된 함수입니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="bufferOpenings"/> 또는 <paramref name="bufferClosingSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>관찰 가능한 시퀀스의 각 요소를 연속적으로 겹치지 않는 버퍼로 투영합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <typeparam name="TBufferBoundary">버퍼 종료 이벤트를 나타내는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="bufferBoundaries">버퍼 경계 마커의 시퀀스입니다. 현재 버퍼가 닫히고 경계 마커를 받으면 새 버퍼가 열립니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="bufferBoundaries"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Catch``2(System.IObservable{``0},System.Func{``1,System.IObservable{``0}})">
            <summary>처리기에서 생성된 관찰 가능한 시퀀스와 지정된 형식의 예외에 의해 종료되는 관찰 가능한 시퀀스를 계속합니다.</summary>
            <typeparam name="TSource">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TException">catch 및 처리할 예외의 유형입니다.  <see cref="T:System.Exception"/>에서 파생해야 합니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="handler">예외 처리기 함수를 사용하여 다른 관찰 가능한 시퀀스를 생성합니다.</param>
            <returns>소스 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스다음에 예외가 발생한 경우 처리기의 결과 관찰 가능한 시퀀스에서 생성된 요소가 표시됩니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="handler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Catch``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>다음 관찰 가능한 시퀀스를 사용하여 예외에 의해 종료되는 관찰 가능한 시퀀스를 계속합니다.</summary>
            <typeparam name="TSource">소스 및 처리기 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">예외(해당하는 경우)가 catch된 첫 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="second">첫 번째 시퀀스에서 오류가 발생했을 때 결과를 생성하는 데 사용되는 두 번째 관찰 가능한 시퀀스입니다.</param>
            <returns>첫 번째 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스다음에 예외가 발생한 경우 두 번째 시퀀스의 요소가 뒤따릅니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> 또는 <paramref name="second"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Catch``1(System.IObservable{``0}[])">
            <summary>다음 관찰 가능한 시퀀스를 사용하여 예외에 의해 종료되는 관찰 가능한 시퀀스를 계속합니다.</summary>
            <typeparam name="TSource">소스 및 처리기 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">예외를 catch하는 관찰 가능한 시퀀스입니다.</param>
            <returns>소스 시퀀스가 성공적으로 종료될 때까지 연속된 소스 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Catch``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>다음 관찰 가능한 시퀀스를 사용하여 예외에 의해 종료되는 관찰 가능한 시퀀스를 계속합니다.</summary>
            <typeparam name="TSource">소스 및 처리기 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">예외를 catch하는 관찰 가능한 시퀀스입니다.</param>
            <returns>소스 시퀀스가 성공적으로 종료될 때까지 연속된 소스 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="second">두 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> <paramref name="second"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.Func{``0,``1,``2,``3})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``8(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``9(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``10(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``11(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``12(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="source11"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``13(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="source12">열두 번째 관찰 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="source11"/> 또는 <paramref name="source12"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``14(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="source12">열두 번째 관찰 소스입니다.</param>
            <param name="source13">13번째 관찰 가능한 출처.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="source11"/> 또는 <paramref name="source12"/> 또는 <paramref name="source13"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``15(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource14">14번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="source12">열두 번째 관찰 소스입니다.</param>
            <param name="source13">13번째 관찰 가능한 출처.</param>
            <param name="source14">14번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="source11"/> 또는 <paramref name="source12"/> 또는 <paramref name="source13"/> 또는 <paramref name="source14"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``16(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource14">14번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource15">15번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="source12">열두 번째 관찰 소스입니다.</param>
            <param name="source13">13번째 관찰 가능한 출처.</param>
            <param name="source14">14번째 관찰 가능한 소스입니다.</param>
            <param name="source15">15 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source3"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="source11"/> 또는 <paramref name="source12"/> 또는  또는 <paramref name="source14"/> 또는 <paramref name="source15"/> 또는 이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``17(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.IObservable{``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource14">14번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource15">15번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource16">16번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="source12">열두 번째 관찰 소스입니다.</param>
            <param name="source13">13번째 관찰 가능한 출처.</param>
            <param name="source14">14번째 관찰 가능한 소스입니다.</param>
            <param name="source15">15 번째 관찰 가능한 소스입니다.</param>
            <param name="source16">16번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source4"/> 또는 <paramref name="source4"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="source11"/> 또는 <paramref name="source12"/> 또는 <paramref name="source13"/> 또는 <paramref name="source14"/> 또는 <paramref name="source15"/> 또는 <paramref name="source16"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``2(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Func{System.Collections.Generic.IList{``0},``1})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스가 요소를 생성할 때마다 호출하는 함수입니다. 효율성을 위해 선택자가 반환된 후 입력 목록이 다시 사용됩니다. 함수 호출 중에 값을 집계하거나 복사합니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> 또는 <paramref name="resultSelector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 목록을 최신 소스 요소로 내보내서 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 목록에 있는 요소의 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 소스입니다.</param>
            <returns>원본의 최신 요소 목록을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.CombineLatest``1(System.IObservable{``0}[])">
            <summary>관찰 가능한 시퀀스가 요소를 생성할 때마다 목록을 최신 소스 요소로 내보내서 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 목록에 있는 요소의 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 소스입니다.</param>
            <returns>원본의 최신 요소 목록을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>첫 번째 시퀀스를 성공적으로 종료하면 두 번째 관찰 가능한 시퀀스를 첫 번째 관찰 가능한 시퀀스에 연결합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">첫 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="second">두 번째 관찰 가능한 시퀀스입니다.</param>
            <returns>첫 번째 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스다음에 두 번째 시퀀스의 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> 또는 <paramref name="second"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{``0}[])">
            <summary>이전 관찰 가능한 시퀀스가 성공적으로 종료된 한 지정된 관찰 가능한 모든 시퀀스를 연결합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 시퀀스를 연결합니다.</param>
            <returns>지정된 각 시퀀스의 요소를 순차적으로 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Concat``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>이전 관찰 가능한 시퀀스가 성공적으로 종료된 경우 지정된 열거형 시퀀스의 모든 관찰 가능한 시퀀스를 연결합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 시퀀스를 연결합니다.</param>
            <returns>지정된 각 시퀀스의 요소를 순차적으로 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{System.IObservable{``0}})">
            <summary>이전 관찰 가능한 시퀀스가 성공적으로 종료되는 한 모든 내부 관찰 가능한 시퀀스를 연결합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">내부 관찰 시퀀스의 관찰 가능한 시퀀스입니다.</param>
            <returns>지정된 각 시퀀스의 요소를 순차적으로 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{System.Threading.Tasks.Task{``0}})">
            <summary>이전 작업이 성공적으로 종료된 한 모든 작업 결과를 연결합니다.</summary>
            <typeparam name="TSource">원본 작업에서 생성된 결과의 유형입니다.</typeparam>
            <param name="sources">관찰 가능한 작업 시퀀스입니다.</param>
            <returns>지정된 각 시퀀스의 요소를 순차적으로 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
            <remarks>작업이 취소를 지원하는 경우을 사용하여 작업을 수동으로 변환한 <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})"/>다음을 사용하여 연결 작업을 수행하는 것이 좋습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}})">
            <summary>모든 내부 관찰 시퀀스의 요소를 관찰 가능한 단일 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">내부 관찰 시퀀스의 관찰 가능한 시퀀스입니다.</param>
            <returns>내부 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.Threading.Tasks.Task{``0}})">
            <summary>모든 원본 작업의 결과를 관찰 가능한 단일 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">원본 작업에서 생성된 결과의 유형입니다.</typeparam>
            <param name="sources">관찰 가능한 작업 시퀀스입니다.</param>
            <returns>지정된 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
            <remarks>작업이 취소를 지원하는 경우을 사용하는 작업의 수동 변환을 고려한 <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})"/>다음을 사용하는 병합 작업을 고려합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}},System.Int32)">
            <summary>모든 내부 관찰 가능한 시퀀스의 요소를 관찰 가능한 단일 시퀀스로 병합하여 동시 구독 수를 내부 시퀀스로 제한합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">내부 관찰 시퀀스의 관찰 가능한 시퀀스입니다.</param>
            <param name="maxConcurrent">동시 구독 중인 관찰 가능한 시퀀스의 최대 수입니다.</param>
            <returns>내부 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxConcurrent"/> 0보다 적거나 같습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Int32)">
            <summary>지정된 열거 가능한 시퀀스의 모든 관찰 가능한 시퀀스의 요소를 단일 관찰 가능한 시퀀스로 병합하여 동시 구독 수를 내부 시퀀스로 제한합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 시퀀스의 열거 가능한 시퀀스입니다.</param>
            <param name="maxConcurrent">동시 구독 중인 관찰 가능한 시퀀스의 최대 수입니다.</param>
            <returns>관찰 가능한 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxConcurrent"/> 0보다 적거나 같습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 열거 형 시퀀스의 모든 관찰 가능한 시퀀스의 요소를 단일 관찰 가능한 시퀀스로 병합하여 동시 구독 수를 내부 시퀀스로 제한하고 지정된 스케줄러를 사용하여 열거 및 구독을 소스.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 시퀀스의 열거 가능한 시퀀스입니다.</param>
            <param name="maxConcurrent">동시 구독 중인 관찰 가능한 시퀀스의 최대 수입니다.</param>
            <param name="scheduler">스케줄러는 소스 시퀀스를 열거합니다.</param>
            <returns>관찰 가능한 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxConcurrent"/> 0보다 적거나 같습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>관찰 가능한 두 시퀀스의 요소를 관찰 가능한 단일 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">첫 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="second">두 번째 관찰 가능한 시퀀스입니다.</param>
            <returns>지정된 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> 또는 <paramref name="second"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>원본에 대한 열거 및 구독을 위해 지정된 스케줄러를 사용하여 두 관찰 가능한 시퀀스의 요소를 단일 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">첫 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="second">두 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="scheduler">스케줄러는 지정된 시퀀스에 대한 구독을 만들기 위한 동시성을 도입하는 데 사용됩니다.</param>
            <returns>지정된 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> <paramref name="second"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0}[])">
            <summary>지정된 모든 관찰 가능한 시퀀스의 요소를 관찰 가능한 단일 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Reactive.Concurrency.IScheduler,System.IObservable{``0}[])">
            <summary>지정된 스케줄러를 사용하여 지정된 모든 관찰 가능한 시퀀스의 요소를 원본 열거지 및 구독에 대해 단일 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 시퀀스입니다.</param>
            <param name="scheduler">스케줄러는 소스 시퀀스를 열거합니다.</param>
            <returns>관찰 가능한 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> 또는 <paramref name="sources"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>주어진 열거 가능한 시퀀스의 모든 관찰 가능한 시퀀스의 요소를 관찰 가능한 단일 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 시퀀스의 열거 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 지정된 열거형 시퀀스의 모든 관찰 가능한 시퀀스의 요소를 원본에 대한 열거 및 구독을 사용하여 단일 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 시퀀스의 열거 가능한 시퀀스입니다.</param>
            <param name="scheduler">스케줄러는 소스 시퀀스를 열거합니다.</param>
            <returns>관찰 가능한 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>첫 번째 시퀀스의 성공 적 또는 예외적 종료 시 두 번째 관찰 가능한 시퀀스에 두 번째 관찰 가능한 시퀀스를 연결합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">예외(해당하는 경우)가 catch된 첫 번째 관찰 가능한 시퀀스입니다.</param>
            <param name="second">첫 번째 시퀀스가 종료된 후 결과를 생성하는 데 사용되는 두 번째 관찰 가능한 시퀀스입니다.</param>
            <returns>시퀀스가 예외적으로 종료되더라도 소스 시퀀스를 통합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> 또는 <paramref name="second"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0}[])">
            <summary>이전의 관찰 가능한 시퀀스가 예외적으로 종료된 경우에도 지정된 관찰 가능한 모든 시퀀스를 연결합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 시퀀스를 연결합니다.</param>
            <returns>시퀀스가 예외적으로 종료되더라도 소스 시퀀스를 통합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>이전 관찰 가능한 시퀀스가 예외적으로 종료된 경우에도 지정된 열거형 시퀀스의 모든 관찰 가능한 시퀀스를 연결합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 시퀀스를 연결합니다.</param>
            <returns>시퀀스가 예외적으로 종료되더라도 소스 시퀀스를 통합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipUntil``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>다른 관찰 가능한 시퀀스가 요소를 생성한 후에만 소스 관찰 가능한 시퀀스의 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TOther">건너뛰기 동작의 끝을 나타내는 다른 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 전파하는 소스 시퀀스입니다.</param>
            <param name="other">소스 시퀀스의 요소 전파를 트리거하는 관찰 가능한 시퀀스입니다.</param>
            <returns>다른 시퀀스가 전파를 트리거한 지점에서 시작하는 소스 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="other"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Switch``1(System.IObservable{System.IObservable{``0}})">
            <summary>관찰 가능한 시퀀스의 시퀀스를 가장 최근의 관찰 가능한 시퀀스에서만 값을 생성하는 관찰 가능한 시퀀스로 변환합니다. 새 내부 관찰 시퀀스가 수신될 때마다 이전 내부 관찰 시퀀스에서 구독을 취소합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">내부 관찰 시퀀스의 관찰 가능한 시퀀스입니다.</param>
            <returns>언제든지 수신된 가장 최근의 내부 관찰 가능한 시퀀스의 요소를 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Switch``1(System.IObservable{System.Threading.Tasks.Task{``0}})">
            <summary>관찰 가능한 작업 시퀀스를 가장 최근의 관찰 가능한 시퀀스에서만 값을 생성하는 관찰 가능한 시퀀스로 변환합니다. 새 작업을 받을 때마다 이전 작업의 결과가 무시됩니다.</summary>
            <typeparam name="TSource">원본 작업에서 생성된 결과의 유형입니다.</typeparam>
            <param name="sources">관찰 가능한 작업 시퀀스입니다.</param>
            <returns>언제든지 수신된 가장 최근 작업의 결과를 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
            <remarks>작업이 취소를 지원하는 경우을 사용하는 작업의 수동 변환을 고려한 <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})"/>다음을 사용하는 스위치 작업을 고려하십시오.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeUntil``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>다른 관찰 가능한 시퀀스가 요소를 생성할 때까지 소스 관찰 가능한 시퀀스의 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TOther">테이크 동작의 끝을 나타내는 다른 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 전파하는 소스 시퀀스입니다.</param>
            <param name="other">소스 시퀀스의 요소 전파를 종료하는 관찰 가능한 시퀀스입니다.</param>
            <returns>소스 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스는 다른 시퀀스가 추가 전파를 중단한 지점까지입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="other"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``2(System.IObservable{``0},System.Func{System.IObservable{``1}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 연속적으로 겹치지 않는 창으로 투영합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <typeparam name="TWindowClosing">창 종료 이벤트를 나타내는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="windowClosingSelector">생성된 창의 경계를 정의하기 위해 호출된 함수입니다. 이전 창이 닫히면 새 창이 시작됩니다.</param>
            <returns>관찰 가능한 창 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="windowClosingSelector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``3(System.IObservable{``0},System.IObservable{``1},System.Func{``1,System.IObservable{``2}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 연속적으로 겹치지 않는 창으로 투영합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <typeparam name="TWindowOpening">윈도우 개방 이벤트를 나타내는 시퀀스의 엘리먼트의 유형은 또한 윈도우 닫기 이벤트의 시퀀스를 얻기 위해 닫는 선택기로 전달되었다.</typeparam>
            <typeparam name="TWindowClosing">창 종료 이벤트를 나타내는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="windowOpenings">그 요소는 새 창의 생성을 나타내는 관찰 가능한 시퀀스입니다.</param>
            <param name="windowClosingSelector">생성된 각 창의 닫기를 정의하기 위해 호출된 함수입니다.</param>
            <returns>관찰 가능한 창 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="windowOpenings"/> 또는 <paramref name="windowClosingSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>관찰 가능한 시퀀스의 각 요소를 연속적으로 겹치지 않는 창으로 투영합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <typeparam name="TWindowBoundary">창 종료 이벤트를 나타내는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="windowBoundaries">창 경계 마커의 시퀀스입니다. 현재 창이 닫히고 경계 마커를 받으면 새 창이 열립니다.</param>
            <returns>관찰 가능한 창 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="windowBoundaries"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
            <summary>두 개의 관찰 가능한 시퀀스를 쌍방식으로 요소를 결합하여 관찰 가능한 시퀀스 로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="second">두 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">첫 번째 및 두 번째 소스에서 각 연속된 요소 쌍에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 첫 번째 및 두 번째 소스의 요소를 쌍으로 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> <paramref name="second"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.Func{``0,``1,``2,``3})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``8(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``9(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``10(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``11(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``12(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="source11"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``13(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="source12">열두 번째 관찰 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="source11"/> 또는 <paramref name="source12"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``14(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="source12">열두 번째 관찰 소스입니다.</param>
            <param name="source13">13번째 관찰 가능한 출처.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="source11"/> 또는 <paramref name="source12"/> 또는 <paramref name="source13"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``15(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource14">14번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="source12">열두 번째 관찰 소스입니다.</param>
            <param name="source13">13번째 관찰 가능한 출처.</param>
            <param name="source14">14번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는 <paramref name="source2"/> 또는 <paramref name="source3"/> 또는 <paramref name="source4"/> 또는 <paramref name="source5"/> 또는 <paramref name="source6"/> 또는 <paramref name="source7"/> 또는 <paramref name="source8"/> 또는 <paramref name="source9"/> 또는 <paramref name="source10"/> 또는 <paramref name="source11"/> 또는 <paramref name="source12"/> 또는 <paramref name="source13"/> 또는 <paramref name="source14"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``16(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource14">14번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource15">15번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="source12">열두 번째 관찰 소스입니다.</param>
            <param name="source13">13번째 관찰 가능한 출처.</param>
            <param name="source14">14번째 관찰 가능한 소스입니다.</param>
            <param name="source15">15 번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는 이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``17(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.IObservable{``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource14">14번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource15">15번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource16">16번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source1">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="source2">두 번째 관찰 가능한 소스입니다.</param>
            <param name="source3">세 번째 관찰 가능한 소스입니다.</param>
            <param name="source4">네 번째 관찰 가능한 소스입니다.</param>
            <param name="source5">다섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source6">여섯 번째 관찰 가능한 소스입니다.</param>
            <param name="source7">일곱 번째 관찰 가능한 소스입니다.</param>
            <param name="source8">여덟 번째 관찰 가능한 소스입니다.</param>
            <param name="source9">아홉 번째 관찰 가능한 소스입니다.</param>
            <param name="source10">열 번째 관찰 가능한 소스입니다.</param>
            <param name="source11">11번째 관찰 가능한 소스입니다.</param>
            <param name="source12">열두 번째 관찰 소스입니다.</param>
            <param name="source13">13번째 관찰 가능한 출처.</param>
            <param name="source14">14번째 관찰 가능한 소스입니다.</param>
            <param name="source15">15 번째 관찰 가능한 소스입니다.</param>
            <param name="source16">16번째 관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source1"/> 또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는  또는 이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``2(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Func{System.Collections.Generic.IList{``0},``1})">
            <summary>관찰 가능한 모든 시퀀스가 해당 인덱스에서 요소를 생성할 때마다 선택기 함수를 사용하여 지정된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 소스입니다.</param>
            <param name="resultSelector">소스의 해당 인덱스에서 각 요소 계열에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 소스의 요소를 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> 또는 <paramref name="resultSelector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>지정된 관찰 가능한 시퀀스를 해당 인덱스에서 관찰 가능한 시퀀스의 요소로 목록을 내보내서 관찰 가능한 시퀀스를 하나의 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 목록에 있는 요소의 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 소스입니다.</param>
            <returns>해당 인덱스의 요소 목록을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``1(System.IObservable{``0}[])">
            <summary>지정된 관찰 가능한 시퀀스를 해당 인덱스에서 관찰 가능한 시퀀스의 요소로 목록을 내보내서 관찰 가능한 시퀀스를 하나의 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 목록에 있는 요소의 형식입니다.</typeparam>
            <param name="sources">관찰 가능한 소스입니다.</param>
            <returns>해당 인덱스의 요소 목록을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Zip``3(System.IObservable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>선택기 함수를 사용하여 관찰 가능한 시퀀스와 열거 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="first">첫 번째 관찰 가능한 소스입니다.</param>
            <param name="second">두 번째 열거 가능한 소스입니다.</param>
            <param name="resultSelector">첫 번째 및 두 번째 소스에서 각 연속된 요소 쌍에 대해 호출하는 함수입니다.</param>
            <returns>지정된 결과 선택기 함수를 사용하여 첫 번째 및 두 번째 소스의 요소를 쌍으로 결합한 결과를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> <paramref name="second"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.AsObservable``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 ID를 숨깁니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">필터링할 요소가 있는 관찰 가능한 시퀀스입니다.</param>
            <returns>원본 시퀀스의 ID를 숨기는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.Int32)">
            <summary>관찰 가능한 시퀀스의 각 요소를 요소 개수 정보를 기반으로 생성되는 연속적인 겹치지 않는 버퍼로 프로젝트합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="count">각 버퍼의 길이입니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적거나 같습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.Int32,System.Int32)">
            <summary>관찰 가능한 시퀀스의 각 요소를 요소 개수 정보를 기반으로 생성되는 0개 이상의 버퍼로 프로젝션합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="count">각 버퍼의 길이입니다.</param>
            <param name="skip">연속 버퍼 생성 사이에 건너뛸 요소 수입니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 또는 <paramref name="skip"/>0보다 적거나 같습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">
            <summary>관찰 가능한 시퀀스의 명시적 알림 값을 암시적 알림으로 비구체화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">암시적 알림으로 전환해야 하는 명시적 알림 값을 포함하는 관찰 가능한 시퀀스입니다.</param>
            <returns>소스 시퀀스의 알림 값에 해당하는 동작을 나타내는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0})">
            <summary>고유한 연속 요소만 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">고유한 연속 요소를 유지하는 관찰 가능한 시퀀스입니다.</param>
            <returns>소스 시퀀스의 고유한 연속 요소만 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>비교에 따라 고유한 연속 요소만 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">고유한 연속 요소를 유지하는 관찰 가능한 시퀀스입니다.</param>
            <param name="comparer">소스 요소에 대한 동일성 비교자입니다.</param>
            <returns>소스 시퀀스의 고유한 연속 요소만 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="comparer"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>keySelector에 따라 고유한 연속 요소만 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 판별자 키의 유형입니다.</typeparam>
            <param name="source">계산된 키 값을 기반으로 고유한 연속 요소를 유지하는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 비교 키를 계산하는 함수입니다.</param>
            <returns>소스 시퀀스에서 계산된 키 값을 기반으로 고유한 연속 요소만 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>키선택자 및 비교에 따라 고유한 연속 요소만 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 판별자 키의 유형입니다.</typeparam>
            <param name="source">계산된 키 값을 기반으로 고유한 연속 요소를 유지하는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 비교 키를 계산하는 함수입니다.</param>
            <param name="comparer">계산된 키 값에 대한 같음 비교기입니다.</param>
            <returns>소스 시퀀스에서 계산된 키 값을 기반으로 고유한 연속 요소만 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0})">
            <summary>관찰 가능한 시퀀스의 각 요소에 대한 작업을 호출하고 결과 시퀀스를 통해 모든 관찰자 메시지를 전파합니다. 이 메서드는 파이프라인의 메시지에 대한 임의의 작업을 실행하기 위해 메시지 스트림을 가로채 쿼리 동작의 디버깅, 로깅 등에 사용할 수 있습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <returns>부작용 동작이 적용된 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action)">
            <summary>관찰 가능한 시퀀스의 각 요소에 대한 작업을 호출하고 관찰 가능한 시퀀스를 정상적으로 종료할 때 작업을 호출합니다. 이 메서드는 파이프라인의 메시지에 대한 임의의 작업을 실행하기 위해 메시지 스트림을 가로채 쿼리 동작의 디버깅, 로깅 등에 사용할 수 있습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="onCompleted">관찰 가능한 시퀀스가 정상적으로 종료될 때 호출하는 작업입니다.</param>
            <returns>부작용 동작이 적용된 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="onNext"/> 또는 <paramref name="onCompleted"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>관찰 가능한 시퀀스의 각 요소에 대한 작업을 호출하고 관찰 가능한 시퀀스의 예외적종료 시 작업을 호출합니다. 이 메서드는 파이프라인의 메시지에 대한 임의의 작업을 실행하기 위해 메시지 스트림을 가로채 쿼리 동작의 디버깅, 로깅 등에 사용할 수 있습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="onError">관찰 가능한 시퀀스의 예외적 종료 시 호출하는 작업입니다.</param>
            <returns>부작용 동작이 적용된 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="onNext"/> 또는 <paramref name="onError"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>관찰 가능한 시퀀스의 각 요소에 대한 작업을 호출하고 관찰 가능한 시퀀스의 정상 또는 예외적 종료시 작업을 호출합니다. 이 메서드는 파이프라인의 메시지에 대한 임의의 작업을 실행하기 위해 메시지 스트림을 가로채 쿼리 동작의 디버깅, 로깅 등에 사용할 수 있습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="onNext">관찰 가능한 시퀀스의 각 요소에 대해 호출하는 작업입니다.</param>
            <param name="onError">관찰 가능한 시퀀스의 예외적 종료 시 호출하는 작업입니다.</param>
            <param name="onCompleted">관찰 가능한 시퀀스가 정상적으로 종료될 때 호출하는 작업입니다.</param>
            <returns>부작용 동작이 적용된 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/> 또는 <paramref name="onError"/> 또는 <paramref name="onCompleted"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.IObserver{``0})">
            <summary>소스 시퀀스의 각 메시지에 대한 관찰자의 메서드를 호출합니다. 이 메서드는 파이프라인의 메시지에 대한 임의의 작업을 실행하기 위해 메시지 스트림을 가로채 쿼리 동작의 디버깅, 로깅 등에 사용할 수 있습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="observer">소스 시퀀스의 관찰의 일부로 호출하는 메서드를 관찰자로 합니다.</param>
            <returns>부작용 동작이 적용된 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="observer"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Finally``1(System.IObservable{``0},System.Action)">
            <summary>소스 관찰 시퀀스가 우아하거나 예외적으로 종료된 후 지정된 작업을 호출합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="finallyAction">소스 관찰 가능한 시퀀스가 종료된 후 호출하는 작업입니다.</param>
            <returns>작업 호출 종료 동작이 적용된 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="finallyAction"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.IgnoreElements``1(System.IObservable{``0})">
            <summary>종료 메시지만 남기고 관찰 가능한 시퀀스의 모든 요소를 무시합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <returns>소스 시퀀스의 종료, 성공 또는 뛰어난 신호를 주는 빈 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 암시적 알림을 명시적 알림 값으로 구체화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">사전을 만들 수 있는 관찰 가능한 시퀀스입니다.</param>
            <returns>소스 시퀀스의 고유한 연속 요소만 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스를 무기한 반복합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">반복할 관찰 가능한 시퀀스입니다.</param>
            <returns>지정된 시퀀스의 요소를 성공적으로 종료할 때까지 반복적으로 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Repeat``1(System.IObservable{``0},System.Int32)">
            <summary>코드를 지정한 횟수만큼 반복합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">반복할 관찰 가능한 시퀀스입니다.</param>
            <param name="repeatCount">시퀀스를 반복할 횟수입니다.</param>
            <returns>지정된 시퀀스의 요소를 병합하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="repeatCount"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Retry``1(System.IObservable{``0})">
            <summary>소스가 성공적으로 종료될 때까지 관찰 가능한 시퀀스를 반복합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">성공적으로 종료될 때까지 반복하는 관찰 가능한 시퀀스입니다.</param>
            <returns>지정된 시퀀스의 요소를 성공적으로 종료할 때까지 반복적으로 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Retry``1(System.IObservable{``0},System.Int32)">
            <summary>지정된 횟수 또는 성공적으로 종료될 때까지 소스를 관찰 가능한 시퀀스를 반복합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">성공적으로 종료될 때까지 반복하는 관찰 가능한 시퀀스입니다.</param>
            <param name="retryCount">시퀀스를 반복할 횟수입니다.</param>
            <returns>지정된 시퀀스의 요소를 성공적으로 종료할 때까지 반복적으로 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="retryCount"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Scan``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
            <summary>관찰 가능한 시퀀스에 누적 함수를 적용하고 각 중간 결과를 반환합니다. 지정된 시드 값은 초기 누적값으로 사용됩니다. 중간 결과가 없는 집계 동작은을(를) 참조하세요.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TAccumulate">집계 결과의 형식입니다.</typeparam>
            <param name="source">누적되는 관찰 가능한 시퀀스입니다.</param>
            <param name="seed">초기 누적값입니다.</param>
            <param name="accumulator">각 요소에 대해 호출할 누적 함수입니다.</param>
            <returns>누적된 값을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="accumulator"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Scan``1(System.IObservable{``0},System.Func{``0,``0,``0})">
            <summary>관찰 가능한 시퀀스에 누적 함수를 적용하고 각 중간 결과를 반환합니다. 중간 결과가 없는 집계 동작은을(를) 참조하세요.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식 및 집계 결과입니다.</typeparam>
            <param name="source">누적되는 관찰 가능한 시퀀스입니다.</param>
            <param name="accumulator">각 요소에 대해 호출할 누적 함수입니다.</param>
            <returns>누적된 값을 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="accumulator"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipLast``1(System.IObservable{``0},System.Int32)">
            <summary>관찰 가능한 시퀀스의 끝에 지정된 수의 요소를 무시합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="count">소스 시퀀스의 끝에서 가져갈 요소 수입니다.</param>
            <returns>끝에 있는 우회된 시퀀스를 제외하고 소스 시퀀스 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적습니다.</exception>
            <remarks>이 연산자는 <paramref name="count"/>요소를 저장할 수 있을 만큼 길이가 있는 버퍼를 누적합니다. 더 많은 요소가 수신되면 지정된 보다 오래된 요소가 큐에서 수집되어 결과 시퀀스에서 생성됩니다. 이로 인해 요소가 지연됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},``0[])">
            <summary>값 시퀀스를 관찰 가능한 시퀀스로 미리 정렬합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 앞에 추가할 소스 시퀀스입니다.</param>
            <param name="values">지정된 시퀀스에 앞에 추가할 값입니다.</param>
            <returns>지정된 값으로 준비된 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="values"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>값 시퀀스를 관찰 가능한 시퀀스로 미리 정렬합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 앞에 추가할 소스 시퀀스입니다.</param>
            <param name="values">지정된 시퀀스에 앞에 추가할 값입니다.</param>
            <returns>지정된 값으로 준비된 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="values"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,``0[])">
            <summary>값 시퀀스를 관찰 가능한 시퀀스로 미리 정렬합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 앞에 추가할 소스 시퀀스입니다.</param>
            <param name="scheduler">앞에 추가할 값을 방출하는 스캐줄러입니다.</param>
            <param name="values">지정된 시퀀스에 앞에 추가할 값입니다.</param>
            <returns>지정된 값으로 준비된 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="scheduler"/> 또는 <paramref name="values"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,System.Collections.Generic.IEnumerable{``0})">
            <summary>값 시퀀스를 관찰 가능한 시퀀스로 미리 정렬합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 앞에 추가할 소스 시퀀스입니다.</param>
            <param name="scheduler">앞에 추가할 값을 방출하는 스캐줄러입니다.</param>
            <param name="values">지정된 시퀀스에 앞에 추가할 값입니다.</param>
            <returns>지정된 값으로 준비된 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="scheduler"/> 또는 <paramref name="values"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.Int32)">
            <summary>관찰 가능한 시퀀스의 끝에서 지정된 수의 연속 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="count">소스 시퀀스의 끝에서 가져갈 요소 수입니다.</param>
            <returns>소스 시퀀스의 끝에서 지정된 수의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적습니다.</exception>
            <remarks>이 연산자는 <paramref name="count"/>요소를 저장할 수 있을 만큼 길이가 있는 버퍼를 누적합니다. 소스 시퀀스가 완료되면 이 버퍼는 결과 시퀀스에서 배출됩니다. 이로 인해 요소가 지연됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 큐를 드레인하는 관찰 가능한 시퀀스의 끝에서 지정된 수의 연속 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="count">소스 시퀀스의 끝에서 가져갈 요소 수입니다.</param>
            <param name="scheduler">소스 시퀀스가 완료되면 큐를 드레인하는 데 사용되는 스케줄러입니다.</param>
            <returns>소스 시퀀스의 끝에서 지정된 수의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적습니다.</exception>
            <remarks>이 연산자는 <paramref name="count"/>요소를 저장할 수 있을 만큼 길이가 있는 버퍼를 누적합니다. 소스 시퀀스가 완료되면 이 버퍼는 결과 시퀀스에서 배출됩니다. 이로 인해 요소가 지연됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeLastBuffer``1(System.IObservable{``0},System.Int32)">
            <summary>관찰 가능한 시퀀스의 끝에서 지정된 수의 연속 요소가 있는 목록을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스입니다.</param>
            <param name="count">소스 시퀀스의 끝에서 가져갈 요소 수입니다.</param>
            <returns>소스 시퀀스의 끝에서 지정된 수의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적습니다.</exception>
            <remarks>이 연산자는 <paramref name="count"/>요소를 저장할 수 있을 만큼 길이가 있는 버퍼를 누적합니다. 소스 시퀀스가 완료되면 이 버퍼는 결과 시퀀스에서 생성됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.Int32)">
            <summary>관찰 가능한 시퀀스의 각 요소를 요소 개수 정보를 기반으로 생성되는 연속적인 겹치지 않는 창으로 프로젝트합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="count">각 창의 길이입니다.</param>
            <returns>관찰 가능한 창 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적거나 같습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.Int32,System.Int32)">
            <summary>관찰 가능한 시퀀스의 각 요소를 요소 개수 정보를 기반으로 생성되는 창이 0개 이상의 창으로 투영됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="count">각 창의 길이입니다.</param>
            <param name="skip">연속 창 만들기 사이에 건너뛸 요소 수입니다.</param>
            <returns>관찰 가능한 창 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 또는 <paramref name="skip"/>0보다 적거나 같습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Cast``1(System.IObservable{System.Object})">
            <summary>관찰 가능한 시퀀스의 요소를 지정된 형식으로 변환합니다.</summary>
            <typeparam name="TResult">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">계산할 요소를 포함하는 관찰 가능한 시퀀스입니다.</param>
            <returns>지정된 유형으로 변환된 소스 시퀀스의 각 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DefaultIfEmpty``1(System.IObservable{``0})">
            <summary>시퀀스가 비어 있는 경우 지정된 시퀀스 또는 형식 매개 변수의 기본값의 요소를 단일 시퀀스에서 반환합니다.</summary>
            <typeparam name="TSource">시퀀스가 비어 있는 경우 기본값을 사용할 수 있는 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">비어 있는 경우 기본값을 반환하는 시퀀스입니다.</param>
            <returns>소스가 비어 있는 경우 TSource 형식의 기본값을 포함하는 관찰 가능한 시퀀스입니다. 그렇지 않으면 소스 자체의 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DefaultIfEmpty``1(System.IObservable{``0},``0)">
            <summary>시퀀스가 비어 있는 경우 지정된 시퀀스의 요소 또는 단일 시퀀스에서 지정된 값을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식(있는 경우)과 시퀀스가 비어 있는 경우 사용할 지정된 기본값입니다.</typeparam>
            <param name="source">비어 있는 경우 지정된 값을 반환하는 시퀀스입니다.</param>
            <param name="defaultValue">시퀀스가 비어 있는 경우 반환할 값입니다.</param>
            <returns>소스가 비어 있는 경우 지정된 기본값을 포함하는 관찰 가능한 시퀀스입니다. 그렇지 않으면 소스 자체의 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Distinct``1(System.IObservable{``0})">
            <summary>고유한 요소만 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">고유한 요소를 유지하는 관찰 가능한 시퀀스입니다.</param>
            <returns>소스 시퀀스의 고유한 요소만 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>이 연산자의 사용은 크게 성장할 수 있는 내부 조회 구조의 유지 보수로 인해 신중하게 고려해야 합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Distinct``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>비교에 따라 고유한 요소만 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">고유한 요소를 유지하는 관찰 가능한 시퀀스입니다.</param>
            <param name="comparer">소스 요소에 대한 동일성 비교자입니다.</param>
            <returns>소스 시퀀스의 고유한 요소만 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="comparer"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 사용은 크게 성장할 수 있는 내부 조회 구조의 유지 보수로 인해 신중하게 고려해야 합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Distinct``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>keySelector에 따라 고유한 요소만 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 판별자 키의 유형입니다.</typeparam>
            <param name="source">고유한 요소를 유지하는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 비교 키를 계산하는 함수입니다.</param>
            <returns>소스 시퀀스에서 계산된 키 값을 기반으로 고유한 요소만 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/>은(는) null입니다.</exception>
            <remarks>이 연산자의 사용은 크게 성장할 수 있는 내부 조회 구조의 유지 보수로 인해 신중하게 고려해야 합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Distinct``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>키선택자 및 비교에 따라 고유한 요소만 포함하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 판별자 키의 유형입니다.</typeparam>
            <param name="source">고유한 요소를 유지하는 관찰 가능한 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 비교 키를 계산하는 함수입니다.</param>
            <param name="comparer">소스 요소에 대한 동일성 비교자입니다.</param>
            <returns>소스 시퀀스에서 계산된 키 값을 기반으로 고유한 요소만 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <remarks>이 연산자의 사용은 크게 성장할 수 있는 내부 조회 구조의 유지 보수로 인해 신중하게 고려해야 합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>지정된 키 선택기 함수에 따라 관찰 가능한 시퀀스의 요소를 그룹화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택 함수 및 비교자에 따라 관찰 가능한 시퀀스의 요소를 그룹화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>관찰 가능한 시퀀스의 요소를 그룹화하고 지정된 함수를 사용하여 결과 요소를 선택합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 그룹 내의 요소 형식입니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">관찰 가능한 그룹의 요소에 각 소스 요소를 매핑하는 함수입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택기 함수 및 비교에 따라 관찰 가능한 시퀀스의 요소를 그룹화하고 지정된 함수를 사용하여 결과 요소를 선택합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 그룹 내의 요소 형식입니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">관찰 가능한 그룹의 요소에 각 소스 요소를 매핑하는 함수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1},System.Int32)">
            <summary>지정된 키 선택기 함수에 따라 관찰 가능한 시퀀스의 요소를 지정된 초기 용량으로 그룹화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="capacity">기본 사전에 포함할 수 있는 요소의 초기 수입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1},System.Int32,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택기 함수 및 비교에 따라 관찰 가능한 시퀀스의 요소를 지정된 초기 용량으로 그룹화합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="capacity">기본 사전에 포함할 수 있는 요소의 초기 수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Int32)">
            <summary>지정된 키 선택기 함수에 따라 관찰 가능한 시퀀스의 요소를 지정된 초기 용량으로 그룹화하고 비교하여 지정된 함수를 사용하여 결과 요소를 선택합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 그룹 내의 요소 형식입니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">관찰 가능한 그룹의 요소에 각 소스 요소를 매핑하는 함수입니다.</param>
            <param name="capacity">기본 사전에 포함할 수 있는 요소의 초기 수입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Int32,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택기 함수에 따라 관찰 가능한 시퀀스의 요소를 지정된 초기 용량으로 그룹화하고 비교하여 지정된 함수를 사용하여 결과 요소를 선택합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 그룹 내의 요소 형식입니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">관찰 가능한 그룹의 요소에 각 소스 요소를 매핑하는 함수입니다.</param>
            <param name="capacity">기본 사전에 포함할 수 있는 요소의 초기 수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``4(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``2},System.IObservable{``3}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택기 함수 및 비교에 따라 관찰 가능한 시퀀스의 요소를 그룹화하고 지정된 함수를 사용하여 결과 요소를 선택합니다. 기간 선택기 함수는 그룹의 수명을 제어하는 데 사용됩니다. 그룹이 만료되면 OnCompleted 알림을 받습니다. 회수된 그룹과 동일한 키 값을 가진 새 요소가 발생하면 새 수명 요청으로 그룹이 다시 생성됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 그룹 내의 요소 형식입니다.</typeparam>
            <typeparam name="TDuration">각 그룹에 대해 얻은 기간 시퀀스의 요소 형식은 해당 수명을 나타냅니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">관찰 가능한 그룹의 요소에 각 소스 요소를 매핑하는 함수입니다.</param>
            <param name="durationSelector">그룹의 만료를 알리는 함수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다. 그룹의 수명이 만료되면 키 값이 같은 요소가 있는 요소가 발생하면 동일한 키 값을 가진 새 그룹을 만들 수 있습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/> 또는 <paramref name="durationSelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``4(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``2},System.IObservable{``3}})">
            <summary>지정된 키 선택기 함수 및 비교에 따라 관찰 가능한 시퀀스의 요소를 그룹화하고 지정된 함수를 사용하여 결과 요소를 선택합니다. 기간 선택기 함수는 그룹의 수명을 제어하는 데 사용됩니다. 그룹이 만료되면 OnCompleted 알림을 받습니다. 회수된 그룹과 동일한 키 값을 가진 새 요소가 발생하면 새 수명 요청으로 그룹이 다시 생성됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 그룹 내의 요소 형식입니다.</typeparam>
            <typeparam name="TDuration">각 그룹에 대해 얻은 기간 시퀀스의 요소 형식은 해당 수명을 나타냅니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">관찰 가능한 그룹의 요소에 각 소스 요소를 매핑하는 함수입니다.</param>
            <param name="durationSelector">그룹의 만료를 알리는 함수입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다. 그룹 수명이 만료될 경우, 키 값을 갖는 요소와 마주할 때 키 값이 동일한 새 그룹을 생성할 수 있습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/> 또는 <paramref name="durationSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``3(System.IObservable{``0},System.Func{``0,``1},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``0},System.IObservable{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택 함수 및 비교자에 따라 관찰 가능한 시퀀스의 요소를 그룹화합니다. 기간 선택기 함수는 그룹의 수명을 제어하는 데 사용됩니다. 그룹이 만료되면 OnCompleted 알림을 받습니다. 회수된 그룹과 동일한 키 값을 가진 새 요소가 발생하면 새 수명 요청으로 그룹이 다시 생성됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TDuration">각 그룹에 대해 얻은 기간 시퀀스의 요소 형식은 해당 수명을 나타냅니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="durationSelector">그룹의 만료를 알리는 함수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다. 그룹 수명이 만료될 경우, 키 값을 갖는 요소와 마주할 때 키 값이 동일한 새 그룹을 생성할 수 있습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/> 또는 <paramref name="durationSelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``3(System.IObservable{``0},System.Func{``0,``1},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``0},System.IObservable{``2}})">
            <summary>지정된 키 선택기 함수에 따라 관찰 가능한 시퀀스의 요소를 그룹화합니다. 기간 선택기 함수는 그룹의 수명을 제어하는 데 사용됩니다. 그룹이 만료되면 OnCompleted 알림을 받습니다. 회수된 그룹과 동일한 키 값을 가진 새 요소가 발생하면 새 수명 요청으로 그룹이 다시 생성됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TDuration">각 그룹에 대해 얻은 기간 시퀀스의 요소 형식은 해당 수명을 나타냅니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="durationSelector">그룹의 만료를 알리는 함수입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다. 그룹 수명이 만료될 경우, 키 값을 갖는 요소와 마주할 때 키 값이 동일한 새 그룹을 생성할 수 있습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="durationSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``4(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``2},System.IObservable{``3}},System.Int32,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택기 함수에 따라 관찰 가능한 시퀀스의 요소를 지정된 초기 용량으로 그룹화하고 비교하여 지정된 함수를 사용하여 결과 요소를 선택합니다. 기간 선택기 함수는 그룹의 수명을 제어하는 데 사용됩니다. 그룹이 만료되면 OnCompleted 알림을 받습니다. 회수된 그룹과 동일한 키 값을 가진 새 요소가 발생하면 새 수명 요청으로 그룹이 다시 생성됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 그룹 내의 요소 형식입니다.</typeparam>
            <typeparam name="TDuration">각 그룹에 대해 얻은 기간 시퀀스의 요소 형식은 해당 수명을 나타냅니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">관찰 가능한 그룹의 요소에 각 소스 요소를 매핑하는 함수입니다.</param>
            <param name="durationSelector">그룹의 만료를 알리는 함수입니다.</param>
            <param name="capacity">기본 사전에 포함할 수 있는 요소의 초기 수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다. 그룹의 수명이 만료되면 키 값이 같은 요소가 있는 요소가 발생하면 동일한 키 값을 가진 새 그룹을 만들 수 있습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/> 또는 <paramref name="durationSelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``4(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``2},System.IObservable{``3}},System.Int32)">
            <summary>지정된 키 선택기 함수에 따라 관찰 가능한 시퀀스의 요소를 지정된 초기 용량으로 그룹화하고 비교하여 지정된 함수를 사용하여 결과 요소를 선택합니다. 기간 선택기 함수는 그룹의 수명을 제어하는 데 사용됩니다. 그룹이 만료되면 OnCompleted 알림을 받습니다. 회수된 그룹과 동일한 키 값을 가진 새 요소가 발생하면 새 수명 요청으로 그룹이 다시 생성됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TElement">소스 시퀀스의 각 요소에 대해 계산된 그룹 내의 요소 형식입니다.</typeparam>
            <typeparam name="TDuration">각 그룹에 대해 얻은 기간 시퀀스의 요소 형식은 해당 수명을 나타냅니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="elementSelector">관찰 가능한 그룹의 요소에 각 소스 요소를 매핑하는 함수입니다.</param>
            <param name="durationSelector">그룹의 만료를 알리는 함수입니다.</param>
            <param name="capacity">기본 사전에 포함할 수 있는 요소의 초기 수입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다. 그룹 수명이 만료될 경우, 키 값을 갖는 요소와 마주할 때 키 값이 동일한 새 그룹을 생성할 수 있습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/> 또는 <paramref name="elementSelector"/> 또는 <paramref name="durationSelector"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``3(System.IObservable{``0},System.Func{``0,``1},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``0},System.IObservable{``2}},System.Int32,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>지정된 키 선택기 함수 및 비교에 따라 관찰 가능한 시퀀스의 요소를 지정된 초기 용량으로 그룹화합니다. 기간 선택기 함수는 그룹의 수명을 제어하는 데 사용됩니다. 그룹이 만료되면 OnCompleted 알림을 받습니다. 회수된 그룹과 동일한 키 값을 가진 새 요소가 발생하면 새 수명 요청으로 그룹이 다시 생성됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TDuration">각 그룹에 대해 얻은 기간 시퀀스의 요소 형식은 해당 수명을 나타냅니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="durationSelector">그룹의 만료를 알리는 함수입니다.</param>
            <param name="capacity">기본 사전에 포함할 수 있는 요소의 초기 수입니다.</param>
            <param name="comparer">키를 비교하는 동일성 비교자입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다. 그룹 수명이 만료될 경우, 키 값을 갖는 요소와 마주할 때 키 값이 동일한 새 그룹을 생성할 수 있습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="keySelector"/> 또는 <paramref name="durationSelector"/> 또는 <paramref name="comparer"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupByUntil``3(System.IObservable{``0},System.Func{``0,``1},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``0},System.IObservable{``2}},System.Int32)">
            <summary>지정된 키 선택기 함수에 따라 관찰 가능한 시퀀스의 요소를 지정된 초기 용량으로 그룹화합니다. 기간 선택기 함수는 그룹의 수명을 제어하는 데 사용됩니다. 그룹이 만료되면 OnCompleted 알림을 받습니다. 회수된 그룹과 동일한 키 값을 가진 새 요소가 발생하면 새 수명 요청으로 그룹이 다시 생성됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TKey">소스 시퀀스의 각 요소에 대해 계산된 그룹화 키의 유형입니다.</typeparam>
            <typeparam name="TDuration">각 그룹에 대해 얻은 기간 시퀀스의 요소 형식은 해당 수명을 나타냅니다.</typeparam>
            <param name="source">그룹이 종속되는 요소를 관찰할 수 있는 시퀀스입니다.</param>
            <param name="keySelector">각 요소에 대한 키를 추출하는 함수입니다.</param>
            <param name="durationSelector">그룹의 만료를 알리는 함수입니다.</param>
            <param name="capacity">기본 사전에 포함할 수 있는 요소의 초기 수입니다.</param>
            <returns>동일한 키 값을 공유하는 모든 요소가 포함된 고유한 키 값에 해당하는 관찰 가능한 그룹의 시퀀스입니다. 그룹 수명이 만료될 경우, 키 값을 갖는 요소와 마주할 때 키 값이 동일한 새 그룹을 생성할 수 있습니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="keySelector"/> 또는 <paramref name="durationSelector"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.GroupJoin``5(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``2}},System.Func{``1,System.IObservable{``3}},System.Func{``0,System.IObservable{``1},``4})">
            <summary>겹치는 기간에 따라 두 시퀀스의 요소를 상관 관계 및 결과 그룹화 합니다.</summary>
            <typeparam name="TLeft">왼쪽 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TRight">오른쪽 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TLeftDuration">지속 시간 시퀀스의 요소 형식은 왼쪽 소스 시퀀스에서 각 요소의 계산된 지속 시간을 표시합니다.</typeparam>
            <typeparam name="TRightDuration">오른쪽 소스 시퀀스에서 각 요소에 대해 계산된 기간을 나타내는 기간 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">겹치는 기간이 있는 소스 요소에 대한 결과 선택기 함수를 호출하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="left">요소를 연결할 왼쪽 관찰 가능한 시퀀스입니다.</param>
            <param name="right">요소를 연결할 수 있는 오른쪽 관찰 가능한 시퀀스입니다.</param>
            <param name="leftDurationSelector">중접을 결정하는 데 사용되는 왼쪽 관찰 가능한 시퀀스의 각 요소의 지속 시간을 선택하는 함수입니다.</param>
            <param name="rightDurationSelector">오른쪽 관찰 가능한 시퀀스의 각 요소의 지속 시간을 선택하는 함수로, 중첩을 결정하는 데 사용됩니다.</param>
            <param name="resultSelector">오른쪽 관찰 가능한 시퀀스에서 겹치는 요소가 있는 왼쪽 시퀀스의 모든 요소에 대한 결과 요소를 계산하기 위해 호출된 함수입니다.</param>
            <returns>기간이 겹치는 소스 요소에서 계산된 결과 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> 또는 <paramref name="right"/> 또는 <paramref name="leftDurationSelector"/> 또는 <paramref name="rightDurationSelector"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Join``5(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``2}},System.Func{``1,System.IObservable{``3}},System.Func{``0,``1,``4})">
            <summary>겹치는 기간을 기준으로 두 시퀀스의 요소를 상관 관계가 있습니다.</summary>
            <typeparam name="TLeft">왼쪽 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TRight">오른쪽 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TLeftDuration">지속 시간 시퀀스의 요소 형식은 왼쪽 소스 시퀀스에서 각 요소의 계산된 지속 시간을 표시합니다.</typeparam>
            <typeparam name="TRightDuration">오른쪽 소스 시퀀스에서 각 요소에 대해 계산된 기간을 나타내는 기간 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">겹치는 기간이 있는 소스 요소에 대한 결과 선택기 함수를 호출하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="left">요소를 연결할 왼쪽 관찰 가능한 시퀀스입니다.</param>
            <param name="right">요소를 연결할 수 있는 오른쪽 관찰 가능한 시퀀스입니다.</param>
            <param name="leftDurationSelector">중접을 결정하는 데 사용되는 왼쪽 관찰 가능한 시퀀스의 각 요소의 지속 시간을 선택하는 함수입니다.</param>
            <param name="rightDurationSelector">오른쪽 관찰 가능한 시퀀스의 각 요소의 지속 시간을 선택하는 함수로, 중첩을 결정하는 데 사용됩니다.</param>
            <param name="resultSelector">왼쪽 및 오른쪽 관찰 가능한 시퀀스의 두 겹치는 요소에 대한 결과 요소를 계산하기 위해 호출된 함수입니다.</param>
            <returns>기간이 겹치는 소스 요소에서 계산된 결과 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="left"/> 또는 <paramref name="right"/> 또는 <paramref name="leftDurationSelector"/> 또는 <paramref name="rightDurationSelector"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.OfType``1(System.IObservable{System.Object})">
            <summary>지정된 형식을 기반으로 관찰 가능한 시퀀스의 요소를 필터링합니다.</summary>
            <typeparam name="TResult">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">계산할 요소를 포함하는 관찰 가능한 시퀀스입니다.</param>
            <returns>조건을 충족하는 입력 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>관찰 가능한 시퀀스의 각 요소를 연속적으로 겹치지 않는 창으로 투영합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">소스 시퀀스의 각 요소에 대한 선택기 함수를 실행하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">변환 함수를 호출하는 요소 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>소스의 각 요소에 변환 함수를 호출한 결과인 요소를 관찰할 수 있는 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,System.Int32,``1})">
            <summary>관찰 가능한 시퀀스의 각 요소를 요소의 인덱스를 통합하여 새 형식으로 투영합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">소스 시퀀스의 각 요소에 대한 선택기 함수를 실행하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">변환 함수를 호출하는 요소 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <returns>소스의 각 요소에 변환 함수를 호출한 결과인 요소를 관찰할 수 있는 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>소스 관찰 가능한 시퀀스의 각 요소를 다른 관찰 가능한 시퀀스에 투영하고 생성된 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TOther">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="other">소스 시퀀스에서 각 요소를 프로젝트하는 관찰 가능한 시퀀스입니다.</param>
            <returns>각 소스 요소를 다른 시퀀스에 투영하고 모든 결과 시퀀스를 병합한 결과인 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="other"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 관찰 가능한 시퀀스에 투영하고 결과 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">투영된 내부 시퀀스의 요소 형식과 병합된 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>입력 시퀀스의 각 요소에 일대다 변환 함수를 호출한 결과인 요소를 관찰할 수 있는 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.IObservable{``1}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 요소의 인덱스를 통합하여 관찰 가능한 시퀀스에 투영하고 결과 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">투영된 내부 시퀀스의 요소 형식과 병합된 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <returns>입력 시퀀스의 각 요소에 일대다 변환 함수를 호출한 결과인 요소를 관찰할 수 있는 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 작업에 투영하고 모든 작업 결과를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">투영된 작업에서 생성된 결과 유형과 병합된 결과 시퀀스의 요소입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>입력 시퀀스의 각 요소에 대해 실행된 작업의 결과인 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <remarks>이 오버로드는 작업을을 사용하여 관찰 가능한 시퀀스로 수동으로 변환할 필요없이 관찰 가능한 시퀀스 및 작업의 구성을 지원합니다.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{``1}})">
            <summary>요소의 인덱스를 통합하 여 관찰 가능한 시퀀스의 각 요소를 작업에 투영 하 고 모든 작업 결과 하나의 관찰 가능한 시퀀스에 병합 합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">투영된 작업에서 생성된 결과 유형과 병합된 결과 시퀀스의 요소입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <returns>입력 시퀀스의 각 요소에 대해 실행된 작업의 결과인 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <remarks>이 오버로드는 작업을을 사용하여 관찰 가능한 시퀀스로 수동으로 변환할 필요없이 관찰 가능한 시퀀스 및 작업의 구성을 지원합니다.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 취소 지원을 사용하여 작업에 투영하고 모든 작업 결과를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">투영된 작업에서 생성된 결과 유형과 병합된 결과 시퀀스의 요소입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>입력 시퀀스의 각 요소에 대해 실행된 작업의 결과인 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <remarks>이 오버로드는 작업을을 사용하여 관찰 가능한 시퀀스로 수동으로 변환할 필요없이 관찰 가능한 시퀀스 및 작업의 구성을 지원합니다.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 취소 지원과 요소의 인덱스를 통합하여 작업에 투영하고 모든 작업 결과를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">투영된 작업에서 생성된 결과 유형과 병합된 결과 시퀀스의 요소입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <returns>입력 시퀀스의 각 요소에 대해 실행된 작업의 결과인 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <remarks>이 오버로드는 작업을을 사용하여 관찰 가능한 시퀀스로 수동으로 변환할 필요없이 관찰 가능한 시퀀스 및 작업의 구성을 지원합니다.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{``0,``1,``2})">
            <summary>관찰 가능한 시퀀스의 각 요소를 관찰 가능한 시퀀스에 투영하고, 소스 요소와 해당 내부 시퀀스의 각 요소에 대한 결과 선택기를 호출하고 결과를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TCollection">투영된 중간 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기를 사용하여 소스 시퀀스 요소와 해당 중간 시퀀스 요소를 결합하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="collectionSelector">각 요소에 적용할 변환 함수입니다.</param>
            <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변환 함수입니다.</param>
            <returns>요소가 입력 시퀀스의 각 요소에 일대다 변환 함수 collectionSelector를 호출한 다음 해당 시퀀스 요소와 해당 소스 요소를 결과에 매핑한 결과인 관찰 가능한 시퀀스 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="collectionSelector"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Int32,System.IObservable{``1}},System.Func{``0,System.Int32,``1,System.Int32,``2})">
            <summary>관찰 가능한 시퀀스의 각 요소를 요소의 인덱스를 통합하여 관찰 가능한 시퀀스에 투영하고, 소스 요소 및 각 내부 시퀀스 요소에 대한 결과 선택기를 호출하고, 결과를 관찰 가능한 하나의 시퀀스로 병합합니다. 시퀀스.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TCollection">투영된 중간 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기를 사용하여 소스 시퀀스 요소와 해당 중간 시퀀스 요소를 결합하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="collectionSelector">각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타내고 네 번째 매개 변수는 중간 요소의 인덱스를 나타냅니다.</param>
            <returns>요소가 입력 시퀀스의 각 요소에 일대다 변환 함수 collectionSelector를 호출한 다음 해당 시퀀스 요소와 해당 소스 요소를 결과에 매핑한 결과인 관찰 가능한 시퀀스 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="collectionSelector"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>관찰 가능한 시퀀스의 각 요소를 작업에 투영하고, 소스 요소 및 작업 결과에 대한 결과 선택기를 호출하고, 결과를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TTaskResult">투영된 중간 작업에 의해 생성된 결과의 유형입니다.</typeparam>
            <typeparam name="TResult">선택기를 사용하여 소스 시퀀스 요소를 해당 중간 작업 결과와 결합하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="taskSelector">각 요소에 적용할 변환 함수입니다.</param>
            <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변환 함수입니다.</param>
            <returns>입력 시퀀스의 각 요소에 대한 작업을 얻은 다음 작업의 결과와 해당 소스 요소를 결과 요소에 매핑한 결과인 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="taskSelector"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
            <remarks>이 오버로드는을(를) 사용하여 관찰 가능한 시퀀스로 작업을 수동으로 변환할 필요 없이 C# 및 Visual Basic의 LINQ 쿼리 이해 구문을 사용하여 관찰 가능한 시퀀스와 작업을 지원합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Int32,``1,``2})">
            <summary>관찰 가능한 시퀀스의 각 요소를 요소의 인덱스를 통합하여 작업에 투영하고, 소스 요소 및 작업 결과에 대한 결과 선택기를 호출하고, 결과를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TTaskResult">투영된 중간 작업에 의해 생성된 결과의 유형입니다.</typeparam>
            <typeparam name="TResult">선택기를 사용하여 소스 시퀀스 요소를 해당 중간 작업 결과와 결합하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="taskSelector">각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <returns>입력 시퀀스의 각 요소에 대한 작업을 얻은 다음 작업의 결과와 해당 소스 요소를 결과 요소에 매핑한 결과인 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="taskSelector"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
            <remarks>이 오버로드는을(를) 사용하여 관찰 가능한 시퀀스로 작업을 수동으로 변환할 필요 없이 C# 및 Visual Basic의 LINQ 쿼리 이해 구문을 사용하여 관찰 가능한 시퀀스와 작업을 지원합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>관찰 가능한 시퀀스의 각 요소를 취소 지원을 사용하여 작업에 투영하고, 소스 요소 및 작업 결과에 대한 결과 선택기를 호출하고, 결과를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TTaskResult">투영된 중간 작업에 의해 생성된 결과의 유형입니다.</typeparam>
            <typeparam name="TResult">선택기를 사용하여 소스 시퀀스 요소를 해당 중간 작업 결과와 결합하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="taskSelector">각 요소에 적용할 변환 함수입니다.</param>
            <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변환 함수입니다.</param>
            <returns>입력 시퀀스의 각 요소에 대한 작업을 얻은 다음 작업의 결과와 해당 소스 요소를 결과 요소에 매핑한 결과인 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="taskSelector"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
            <remarks>이 오버로드는을(를) 사용하여 관찰 가능한 시퀀스로 작업을 수동으로 변환할 필요 없이 C# 및 Visual Basic의 LINQ 쿼리 이해 구문을 사용하여 관찰 가능한 시퀀스와 작업을 지원합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Int32,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Int32,``1,``2})">
            <summary>관찰 가능한 시퀀스의 각 요소를 취소 지원과 함께 요소의 인덱스를 통합하여 작업에 투영하고, 소스 요소 및 작업 결과에 대한 결과 선택기를 호출하고, 결과를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TTaskResult">투영된 중간 작업에 의해 생성된 결과의 유형입니다.</typeparam>
            <typeparam name="TResult">선택기를 사용하여 소스 시퀀스 요소를 해당 중간 작업 결과와 결합하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="taskSelector">각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <returns>입력 시퀀스의 각 요소에 대한 작업을 얻은 다음 작업의 결과와 해당 소스 요소를 결과 요소에 매핑한 결과인 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="taskSelector"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
            <remarks>이 오버로드는을(를) 사용하여 관찰 가능한 시퀀스로 작업을 수동으로 변환할 필요 없이 C# 및 Visual Basic의 LINQ 쿼리 이해 구문을 사용하여 관찰 가능한 시퀀스와 작업을 지원합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{System.Exception,System.IObservable{``1}},System.Func{System.IObservable{``1}})">
            <summary>관찰 가능한 시퀀스의 각 알림을 관찰 가능한 시퀀스에 투영하고 결과 관찰 가능한 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">투영된 내부 시퀀스의 요소 형식과 병합된 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">프로젝트에 대한 알림의 관찰 가능한 시퀀스입니다.</param>
            <param name="onNext">각 요소에 적용할 변환 함수입니다.</param>
            <param name="onError">소스 시퀀스에서 오류가 발생할 때 적용할 변환 함수입니다.</param>
            <param name="onCompleted">소스 시퀀스의 끝에 도달하면 적용할 변환 함수입니다.</param>
            <returns>요소가 입력 시퀀스의 각 알림에 해당하는 일대다 변환 함수를 호출한 결과인 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/> 또는 <paramref name="onError"/> 또는 <paramref name="onCompleted"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.IObservable{``1}},System.Func{System.Exception,System.IObservable{``1}},System.Func{System.IObservable{``1}})">
            <summary>요소의 인덱스를 통합하여 관찰 가능한 시퀀스의 각 알림을 관찰 가능한 시퀀스에 투영하고 결과 시퀀스를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">투영된 내부 시퀀스의 요소 형식과 병합된 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">프로젝트에 대한 알림의 관찰 가능한 시퀀스입니다.</param>
            <param name="onNext">각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <param name="onError">소스 시퀀스에서 오류가 발생할 때 적용할 변환 함수입니다.</param>
            <param name="onCompleted">소스 시퀀스의 끝에 도달하면 적용할 변환 함수입니다.</param>
            <returns>요소가 입력 시퀀스의 각 알림에 해당하는 일대다 변환 함수를 호출한 결과인 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="onNext"/> 또는 <paramref name="onError"/> 또는 <paramref name="onCompleted"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 열거 가능한 시퀀스에 투영하고 생성된 열거형 시퀀스를 하나의 관찰 가능한 시퀀스로 연결합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">투영된 내부 열거형 시퀀스의 요소 형식과 병합된 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
            <returns>입력 시퀀스의 각 요소에 일대다 변환 함수를 호출한 결과인 요소를 관찰할 수 있는 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>투영된 시퀀스는 소스 시퀀스의 OnNext 호출 내에서 동기화적으로 열거된 순서입니다. 동시, 비차단 병합을 수행하려면 <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})"/> 변환을 사용하여 얻은 관찰 가능한 시퀀스를 반환하도록 선택기를 변경합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <summary>관찰 가능한 시퀀스의 각 요소를 요소의 인덱스를 통합하여 열거형 시퀀스에 투영하고 생성된 열거형 시퀀스를 하나의 관찰 가능한 시퀀스로 연결합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">투영된 내부 열거형 시퀀스의 요소 형식과 병합된 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="selector">각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <returns>입력 시퀀스의 각 요소에 일대다 변환 함수를 호출한 결과인 요소를 관찰할 수 있는 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="selector"/>은(는) null입니다.</exception>
            <remarks>투영된 시퀀스는 소스 시퀀스의 OnNext 호출 내에서 동기화적으로 열거된 순서입니다. 동시, 비차단 병합을 수행하려면 <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})"/> 변환을 사용하여 얻은 관찰 가능한 시퀀스를 반환하도록 선택기를 변경합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>관찰 가능한 시퀀스의 각 요소를 열거 가능한 시퀀스에 투영하고, 소스 요소와 해당 내부 시퀀스의 각 요소에 대한 결과 선택기를 호출하고, 결과를 하나의 관찰 가능한 시퀀스로 병합합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TCollection">투영된 중간 열거형 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기를 사용하여 소스 시퀀스 요소와 해당 중간 시퀀스 요소를 결합하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="collectionSelector">각 요소에 적용할 변환 함수입니다.</param>
            <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변환 함수입니다.</param>
            <returns>요소가 입력 시퀀스의 각 요소에 일대다 변환 함수 collectionSelector를 호출한 다음 해당 시퀀스 요소와 해당 소스 요소를 결과에 매핑한 결과인 관찰 가능한 시퀀스 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="collectionSelector"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
            <remarks>투영된 시퀀스는 소스 시퀀스의 OnNext 호출 내에서 동기화적으로 열거된 순서입니다. 동시, 비차단 병합을 수행하려면 <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})"/> 변환을 사용하여 얻은 관찰 가능한 시퀀스를 반환하도록 선택기를 변경합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,System.Int32,``1,System.Int32,``2})">
            <summary>관찰 가능한 시퀀스의 각 요소를 요소의 인덱스를 통합하여 열거 가능한 시퀀스에 투영하고, 소스 요소와 해당 내부 시퀀스의 각 요소에 대한 결과 선택기를 호출하고, 결과를 관찰 가능한 하나의 시퀀스로 병합합니다. 시퀀스.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TCollection">투영된 중간 열거형 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">선택기를 사용하여 소스 시퀀스 요소와 해당 중간 시퀀스 요소를 결합하여 얻은 결과 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">투영할 요소의 관찰 가능한 시퀀스입니다.</param>
            <param name="collectionSelector">각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타냅니다.</param>
            <param name="resultSelector">중간 시퀀스의 각 요소에 적용할 변환 함수, 함수의 두 번째 매개 변수는 소스 요소의 인덱스를 나타내고 네 번째 매개 변수는 중간 요소의 인덱스를 나타냅니다.</param>
            <returns>요소가 입력 시퀀스의 각 요소에 일대다 변환 함수 collectionSelector를 호출한 다음 해당 시퀀스 요소와 해당 소스 요소를 결과에 매핑한 결과인 관찰 가능한 시퀀스 요소입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="collectionSelector"/> 또는 <paramref name="resultSelector"/>이(가) null입니다.</exception>
            <remarks>투영된 시퀀스는 소스 시퀀스의 OnNext 호출 내에서 동기화적으로 열거된 순서입니다. 동시, 비차단 병합을 수행하려면 <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})"/> 변환을 사용하여 얻은 관찰 가능한 시퀀스를 반환하도록 선택기를 변경합니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Skip``1(System.IObservable{``0},System.Int32)">
            <summary>관찰 가능한 시퀀스에서 지정된 수의 요소를 무시한 다음 나머지 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 취할 시퀀스입니다.</param>
            <param name="count">나머지 요소를 반환하기 전에 건너뛸 요소 의 수입니다.</param>
            <returns>입력 시퀀스에서 지정된 인덱스 이후에 발생하는 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>지정된 조건이 true인 한 관찰 가능한 시퀀스의 요소를 우회한 다음 나머지 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 반환하는 관찰 가능한 시퀀스입니다.</param>
            <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
            <returns>조건자에 의해 지정된 테스트를 통과하지 않는 선형 계열의 첫 번째 요소에서 시작하는 입력 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>지정된 조건이 true인 한 관찰 가능한 시퀀스의 요소를 우회한 다음 나머지 요소를 반환합니다. 요소의 인덱스는 조건자 함수의 논리에 사용됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 반환하는 관찰 가능한 시퀀스입니다.</param>
            <param name="predicate">조건에 대해 각 요소를 테스트하는 함수, 함수의 두 번째 매개 변수가 소스 요소의 인덱스를 나타냅니다.</param>
            <returns>조건자에 의해 지정된 테스트를 통과하지 않는 선형 계열의 첫 번째 요소에서 시작하는 입력 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.Int32)">
            <summary>관찰 가능한 시퀀스의 시작부터 지정된 수의 연속 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 취할 시퀀스입니다.</param>
            <param name="count">반환할 요소 수입니다.</param>
            <returns>입력 시퀀스의 시작부터 지정된 수의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>Take(0)의 가장자리 케이스에 대해 지정된 스케줄러를 사용하여 관찰 가능한 시퀀스의 시작부터 지정된 수의 연속 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 취할 시퀀스입니다.</param>
            <param name="count">반환할 요소 수입니다.</param>
            <param name="scheduler">개수가 0으로 설정된 경우 OnCompleted 메시지를 생성하는 데 사용되는 <paramref name="count"></paramref>스케줄러입니다. </param>
            <returns>입력 시퀀스의 시작부터 지정된 수의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>지정된 조건이 true인 한 관찰 가능한 시퀀스의 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 반환하는 시퀀스입니다.</param>
            <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
            <returns>테스트가 더 이상 통과하지 않는 요소 이전에 발생하는 입력 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>지정된 조건이 true인 한 관찰 가능한 시퀀스의 요소를 반환합니다. 요소의 인덱스는 조건자 함수의 논리에 사용됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 반환하는 시퀀스입니다.</param>
            <param name="predicate">조건에 대해 각 요소를 테스트하는 함수, 함수의 두 번째 매개 변수가 소스 요소의 인덱스를 나타냅니다.</param>
            <returns>테스트가 더 이상 통과하지 않는 요소 이전에 발생하는 입력 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>조건자 기준으로 관찰 가능한 시퀀스의 요소를 필터링합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">필터링할 요소가 있는 관찰 가능한 시퀀스입니다.</param>
            <param name="predicate">조건에 대해 각 요소를 테스트하는 함수입니다.</param>
            <returns>조건을 충족하는 입력 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>요소의 인덱스를 통합하여 조건어를 기반으로 관찰 가능한 시퀀스의 요소를 필터링합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">필터링할 요소가 있는 관찰 가능한 시퀀스입니다.</param>
            <param name="predicate">조건에 대해 각 요소를 테스트하는 함수, 함수의 두 번째 매개 변수가 소스 요소의 인덱스를 나타냅니다.</param>
            <returns>조건을 충족하는 입력 시퀀스의 요소를 포함하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="predicate"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan)">
            <summary>관찰 가능한 시퀀스의 각 요소를 타이밍 정보를 기반으로 생성되는 연속적인 겹치지 않는 버퍼로 프로젝트합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="timeSpan">각 버퍼의 길이입니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 버퍼를 만듭니다. 모든 소스 시퀀스 요소는 버퍼 중 하나에서 끝나기 때문에 일부 버퍼에는 0 시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 버퍼를 닫고 새 버퍼를 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>관찰 가능한 시퀀스의 각 요소를 지정된 스케줄러를 사용하여 타이머를 실행하는 타이밍 정보를 기반으로 생성되는 연속적인 비겹침 버퍼에 프로젝트합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="timeSpan">각 버퍼의 길이입니다.</param>
            <param name="scheduler">버퍼링 타이머를 실행하는 스케줄러입니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 버퍼를 만듭니다. 모든 소스 시퀀스 요소는 버퍼 중 하나에서 끝나기 때문에 일부 버퍼에는 0 시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 버퍼를 닫고 새 버퍼를 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
            <summary>관찰 가능한 시퀀스의 각 요소를 타이밍 정보를 기반으로 생성되는 0개 이상의 버퍼로 프로젝션합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="timeSpan">각 버퍼의 길이입니다.</param>
            <param name="timeShift">연속 버퍼 생성 사이의 간격입니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> 또는 <paramref name="timeSpan"/>TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 최소 기간 길이의 버퍼를 만듭니다. 그러나 일부 버퍼에는 0시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 버퍼를 닫는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</para>
            <para><paramref name="timeShift"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 버퍼를 만듭니다. 그러나 모든 버퍼가 소스 시퀀스의 시작 부분에서 시작되는 것은 아닙니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 새 버퍼를 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>관찰 가능한 시퀀스의 각 요소를 지정된 스케줄러를 사용하여 타이머를 실행하는 타이밍 정보를 기반으로 생성되는 0개 이상의 버퍼로 프로젝션합니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="timeSpan">각 버퍼의 길이입니다.</param>
            <param name="timeShift">연속 버퍼 생성 사이의 간격입니다.</param>
            <param name="scheduler">버퍼링 타이머를 실행하는 스케줄러입니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> 또는 <paramref name="timeSpan"/>TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 최소 기간 길이의 버퍼를 만듭니다. 그러나 일부 버퍼에는 0시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 버퍼를 닫는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</para>
            <para><paramref name="timeShift"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 버퍼를 만듭니다. 그러나 모든 버퍼가 소스 시퀀스의 시작 부분에서 시작되는 것은 아닙니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 새 버퍼를 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
            <summary>관찰 가능한 시퀀스의 각 요소를 전체 또는 지정된 시간이 경과할 때 전송되는 버퍼에 투영합니다. 이 오버로드의 유용한 실제 비유는 모든 좌석을 취할 때 또는 출발 예정 시간 중 이른 시간에 선착장을 떠나는 여객선의 동작입니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="timeSpan">창의 최대 시간 길이입니다.</param>
            <param name="count">창의 최대 요소 수입니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> TimeSpan.Zero보다 적습니다. -또는 - <paramref name="count"/>이(가) 0보다 적거나 같습니다.</exception>
            <remarks><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 버퍼를 만듭니다. 모든 소스 시퀀스 요소는 버퍼 중 하나에서 끝나기 때문에 일부 버퍼에는 0 시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 버퍼를 닫고 새 버퍼를 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>관찰 가능한 시퀀스의 각 요소를 전체 또는 지정된 시간이 경과할 때 전송되는 버퍼에 지정된 스케줄러를 사용하여 타이머를 실행합니다. 이 오버로드의 유용한 실제 비유는 모든 좌석을 취할 때 또는 출발 예정 시간 중 이른 시간에 선착장을 떠나는 여객선의 동작입니다.</summary>
            <typeparam name="TSource">소스 시퀀스와 결과 시퀀스의 에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 버퍼를 생성합니다.</param>
            <param name="timeSpan">창의 최대 시간 길이입니다.</param>
            <param name="count">창의 최대 요소 수입니다.</param>
            <param name="scheduler">버퍼링 타이머를 실행하는 스케줄러입니다.</param>
            <returns>관찰 가능한 버퍼 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> TimeSpan.Zero보다 적습니다. -또는 - <paramref name="count"/>이(가) 0보다 적거나 같습니다.</exception>
            <remarks><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 버퍼를 만듭니다. 모든 소스 시퀀스 요소는 버퍼 중 하나에서 끝나기 때문에 일부 버퍼에는 0 시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 버퍼를 닫고 새 버퍼를 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">
            <summary>시간은 관찰 가능한 시퀀스를 지정된 상대 시간 지속 시간으로 이동합니다. 값 사이의 상대 시간 간격이 유지됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 지연하는 소스 시퀀스입니다.</param>
            <param name="dueTime">관찰 가능한 시퀀스를 이동하는 상대 시간입니다. 이 값이 TimeSpan.Zero와 같으면 스케줄러가 가능한 한 빨리 관찰자 콜백을 디스패치합니다.</param>
            <returns>시간 이동 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para>이 연산자는 모든 알림 및 시간 지연을 기록하기 때문에 <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan)">DelaySubscription</see>보다 효율이 낮습니다. 이렇게 하면 오류를 즉시 전파할 수 있습니다.</para>
            <para>결과 시퀀스에 대한 관찰자 콜백은 기본 스케줄러에서 실행됩니다. 이 효과는 ObserveOn을 사용하는 것과 유사합니다.</para>
            <para>OnError 콜백을 통해 소스 시퀀스에 의해 신호가 전송된 예외는 결과 시퀀스로 즉시 전달됩니다. OnError 콜백 지점에서 큐에 있던 모든 OnNext 알림이 삭제됩니다. 오류 전파를 지연하려면 <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> 및 <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> 연산자를 사용하거나 <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan)">DelaySubscription</see>을 사용하는 것이 좋습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>시간은 지정된 스케줄러를 사용하여 타이머를 실행하는 지정된 상대 시간 기간별로 관찰 가능한 시퀀스를 이동합니다. 값 사이의 상대 시간 간격이 유지됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 지연하는 소스 시퀀스입니다.</param>
            <param name="dueTime">관찰 가능한 시퀀스를 이동하는 상대 시간입니다. 이 값이 TimeSpan.Zero와 같으면 스케줄러가 가능한 한 빨리 관찰자 콜백을 디스패치합니다.</param>
            <param name="scheduler">스케줄러에서 지연 타이머를 실행합니다.</param>
            <returns>시간 이동 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para>이 연산자는 모든 알림 및 시간 지연을 기록하기 때문에 <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see>보다 효율이 낮습니다. 이렇게 하면 오류를 즉시 전파할 수 있습니다.</para>
            <para>결과 시퀀스에 대한 관찰자 콜백은 지정된 스케줄러에서 실행됩니다. 이 효과는 ObserveOn을 사용하는 것과 유사합니다.</para>
            <para>OnError 콜백을 통해 소스 시퀀스에 의해 신호가 전송된 예외는 결과 시퀀스로 즉시 전달됩니다. OnError 콜백 지점에서 큐에 있던 모든 OnNext 알림이 삭제됩니다.</para>
            <para>OnError 콜백을 통해 소스 시퀀스에 의해 신호가 전송된 예외는 결과 시퀀스로 즉시 전달됩니다. OnError 콜백 지점에서 큐에 있던 모든 OnNext 알림이 삭제됩니다. 오류 전파를 지연하려면 <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> 및 <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> 연산자를 사용하거나 <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see>을 사용하는 것이 좋습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">
            <summary>시간은 관찰 가능한 시퀀스를 이동하여 지정된 절대 시간에 알림 전파를 시작합니다. 값 사이의 상대 시간 간격이 유지됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 지연하는 소스 시퀀스입니다.</param>
            <param name="dueTime">관찰 가능한 시퀀스를 이동하는 데 사용되는 절대 시간, 상대 시간 이동은 구독 시 계산됩니다. 이 값이 DateTimeOffset.UtcNow보다 적거나 같으면 스케줄러가 가능한 한 빨리 관찰자 콜백을 디스패치합니다.</param>
            <returns>시간 이동 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>
            <para>이 연산자는 모든 알림 및 시간 지연을 기록하기 때문에 <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset)">DelaySubscription</see>보다 효율이 낮습니다. 이렇게 하면 오류를 즉시 전파할 수 있습니다.</para>
            <para>결과 시퀀스에 대한 관찰자 콜백은 기본 스케줄러에서 실행됩니다. 이 효과는 ObserveOn을 사용하는 것과 유사합니다.</para>
            <para>OnError 콜백을 통해 소스 시퀀스에 의해 신호가 전송된 예외는 결과 시퀀스로 즉시 전달됩니다. OnError 콜백 지점에서 큐에 있던 모든 OnNext 알림이 삭제됩니다. 오류 전파를 지연하려면 <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> 및 <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> 연산자를 사용하거나 <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset)">DelaySubscription</see>을 사용하는 것이 좋습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>시간은 지정된 스케줄러를 사용하여 타이머를 실행하여 지정된 절대 시간에 알림 전파를 시작하도록 관찰 가능한 시퀀스를 이동합니다. 값 사이의 상대 시간 간격이 유지됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 지연하는 소스 시퀀스입니다.</param>
            <param name="dueTime">관찰 가능한 시퀀스를 이동하는 데 사용되는 절대 시간, 상대 시간 이동은 구독 시 계산됩니다. 이 값이 DateTimeOffset.UtcNow보다 적거나 같으면 스케줄러가 가능한 한 빨리 관찰자 콜백을 디스패치합니다.</param>
            <param name="scheduler">스케줄러에서 지연 타이머를 실행합니다.</param>
            <returns>시간 이동 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <remarks>
            <para>이 연산자는 모든 알림 및 시간 지연을 기록하기 때문에 <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see>보다 효율이 낮습니다. 이렇게 하면 오류를 즉시 전파할 수 있습니다.</para>
            <para>결과 시퀀스에 대한 관찰자 콜백은 지정된 스케줄러에서 실행됩니다. 이 효과는 ObserveOn을 사용하는 것과 유사합니다.</para>
            <para>OnError 콜백을 통해 소스 시퀀스에 의해 신호가 전송된 예외는 결과 시퀀스로 즉시 전달됩니다. OnError 콜백 지점에서 큐에 있던 모든 OnNext 알림이 삭제됩니다. 오류 전파를 지연하려면 <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> 및 <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> 연산자를 사용하거나 <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see>을 사용하는 것이 좋습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Delay``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
            <summary>시간은 각 요소에 대한 지연 선택기 함수에 따라 관찰 가능한 시퀀스를 이동합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TDelay">소스 시퀀스에서 각 요소의 지연 기간을 나타내는 데 사용되는 지연 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 지연하는 소스 시퀀스입니다.</param>
            <param name="delayDurationSelector">지정된 각 요소에 대한 지연을 나타내는 시퀀스를 검색하는 선택기 함수입니다.</param>
            <returns>시간 이동 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="delayDurationSelector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Delay``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})">
            <summary>시간은 구독 지연 및 각 요소에 대한 지연 선택기 기능에 따라 관찰 가능한 시퀀스를 이동합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TDelay">소스 시퀀스에서 각 요소의 지연 기간을 나타내는 데 사용되는 지연 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">값을 지연하는 소스 시퀀스입니다.</param>
            <param name="subscriptionDelay">소스에 대한 구독 지연을 나타내는 시퀀스입니다.</param>
            <param name="delayDurationSelector">지정된 각 요소에 대한 지연을 나타내는 시퀀스를 검색하는 선택기 함수입니다.</param>
            <returns>시간 이동 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="subscriptionDelay"/> 또는 <paramref name="delayDurationSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan)">
            <summary>시간은 지정된 상대 시간 기간으로 구독을 지연시켜 관찰 가능한 시퀀스를 이동합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독을 지연하는 소스 시퀀스입니다.</param>
            <param name="dueTime">구독의 상대 시간 이동입니다.</param>
            <returns>시간 이동 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para>이 연산자는 <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">Delay</see>보다 효율적이지만 구독의 모든 부작용을 연기하고 오류 전파 타이밍에 영향을 줍니다.</para>
            <para>소스 시퀀스에 대한 구독의 부작용은 기본 스케줄러에서 실행됩니다. 관찰자 콜백은 영향을 받지 않습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>시간은 지정된 스케줄러를 사용하여 타이머를 실행하여 지정된 상대 시간 기간으로 구독을 지연시켜 관찰 가능한 시퀀스를 이동합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독을 지연하는 소스 시퀀스입니다.</param>
            <param name="dueTime">구독의 상대 시간 이동입니다.</param>
            <param name="scheduler">구독 지연 타이머를 실행하는 스케줄러입니다.</param>
            <returns>시간 이동 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para>이 연산자는 <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">Delay</see>보다 효율적이지만 구독의 모든 부작용을 연기하고 오류 전파 타이밍에 영향을 줍니다.</para>
            <para>소스 시퀀스에 대한 구독의 부작용은 지정된 스케줄러에서 실행됩니다. 관찰자 콜백은 영향을 받지 않습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset)">
            <summary>시간은 구독을 지정된 절대 시간으로 지연시켜 관찰 가능한 시퀀스를 이동합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독을 지연하는 소스 시퀀스입니다.</param>
            <param name="dueTime">구독을 수행할 수 있는 절대 시간입니다.</param>
            <returns>시간 이동 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks>
            <para>이 연산자는 <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">Delay</see>보다 효율적이지만 구독의 모든 부작용을 연기하고 오류 전파 타이밍에 영향을 줍니다.</para>
            <para>소스 시퀀스에 대한 구독의 부작용은 기본 스케줄러에서 실행됩니다. 관찰자 콜백은 영향을 받지 않습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>시간은 지정된 스케줄러를 사용하여 타이머를 실행하여 구독을 지정된 절대 시간으로 지연시켜 관찰 가능한 시퀀스를 이동합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">구독을 지연하는 소스 시퀀스입니다.</param>
            <param name="dueTime">구독을 수행할 수 있는 절대 시간입니다.</param>
            <param name="scheduler">구독 지연 타이머를 실행하는 스케줄러입니다.</param>
            <returns>시간 이동 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <remarks>
            <para>이 연산자는 <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">Delay</see>보다 효율적이지만 구독의 모든 부작용을 연기하고 오류 전파 타이밍에 영향을 줍니다.</para>
            <para>소스 시퀀스에 대한 구독의 부작용은 지정된 스케줄러에서 실행됩니다. 관찰자 콜백은 영향을 받지 않습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan})">
            <summary>시퀀스의 요소를 생성하는 상태 기반 및 임시 루프를 실행하여 관찰 가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TState">생성기 루프에 사용되는 상태의 유형입니다.</typeparam>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="initialState">초기 상태입니다.</param>
            <param name="condition">생성을 종료하는 조건(false 반환 시).</param>
            <param name="iterate">반복 단계 기능입니다.</param>
            <param name="resultSelector">시퀀스에서 생성된 결과에 대한 선택기 함수입니다.</param>
            <param name="timeSelector">각 반복에서 생성되는 값의 속도를 제어하는 시간 선택기 함수입니다.</param>
            <returns>생성된 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> 또는 <paramref name="iterate"/> 또는 <paramref name="resultSelector"/> 또는 <paramref name="timeSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하고 관찰자 메시지를 보내는 상태 기반 및 임시 루프를 실행하여 시퀀스의 요소를 생성하는 관찰 가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TState">생성기 루프에 사용되는 상태의 유형입니다.</typeparam>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="initialState">초기 상태입니다.</param>
            <param name="condition">생성을 종료하는 조건(false 반환 시).</param>
            <param name="iterate">반복 단계 기능입니다.</param>
            <param name="resultSelector">시퀀스에서 생성된 결과에 대한 선택기 함수입니다.</param>
            <param name="timeSelector">각 반복에서 생성되는 값의 속도를 제어하는 시간 선택기 함수입니다.</param>
            <param name="scheduler">생성기 루프를 실행할 스케줄러입니다.</param>
            <returns>생성된 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> 또는 <paramref name="iterate"/> 또는 <paramref name="resultSelector"/> 또는 <paramref name="timeSelector"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset})">
            <summary>시퀀스의 요소를 생성하는 상태 기반 및 임시 루프를 실행하여 관찰 가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TState">생성기 루프에 사용되는 상태의 유형입니다.</typeparam>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="initialState">초기 상태입니다.</param>
            <param name="condition">생성을 종료하는 조건(false 반환 시).</param>
            <param name="iterate">반복 단계 기능입니다.</param>
            <param name="resultSelector">시퀀스에서 생성된 결과에 대한 선택기 함수입니다.</param>
            <param name="timeSelector">각 반복에서 생성되는 값의 속도를 제어하는 시간 선택기 함수입니다.</param>
            <returns>생성된 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> 또는 <paramref name="iterate"/> 또는 <paramref name="resultSelector"/> 또는 <paramref name="timeSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하고 관찰자 메시지를 보내는 상태 기반 및 임시 루프를 실행하여 시퀀스의 요소를 생성하는 관찰 가능한 시퀀스를 생성합니다.</summary>
            <typeparam name="TState">생성기 루프에 사용되는 상태의 유형입니다.</typeparam>
            <typeparam name="TResult">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="initialState">초기 상태입니다.</param>
            <param name="condition">생성을 종료하는 조건(false 반환 시).</param>
            <param name="iterate">반복 단계 기능입니다.</param>
            <param name="resultSelector">시퀀스에서 생성된 결과에 대한 선택기 함수입니다.</param>
            <param name="timeSelector">각 반복에서 생성되는 값의 속도를 제어하는 시간 선택기 함수입니다.</param>
            <param name="scheduler">생성기 루프를 실행할 스케줄러입니다.</param>
            <returns>생성된 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="condition"/> 또는 <paramref name="iterate"/> 또는 <paramref name="resultSelector"/> 또는 <paramref name="timeSelector"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Interval(System.TimeSpan)">
            <summary>각 기간 이후에 값을 생성하는 관찰 가능한 시퀀스입니다.</summary>
            <param name="period">결과 시퀀스의 값을 생성하는 기간입니다. 이 값이 TimeSpan.Zero와 같으면 타이머가 가능한 한 빨리 되풀이됩니다.</param>
            <returns>각 기간 이후에 값을 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>간격은 이전 알림의 끝과 다음 알림의 시작 사이가 아니라 후속 알림의 시작 사이에서 측정됩니다. 관찰자가 메시지를 처리하는 데 걸리는 간격 기간보다 오래 걸리는 경우 후속 알림은 현재 알림을 처리한 직후에 전달됩니다. 연속 알림의 끝과 시작 사이의 시간을 제어해야 하는 경우 <see cref="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan})"/> 연산자를 대신 사용하는 것이 좋습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Interval(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하고 관찰자 메시지를 보내는 각 기간 이후에 값을 생성하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <param name="period">결과 시퀀스의 값을 생성하는 기간입니다. 이 값이 TimeSpan.Zero와 같으면 타이머가 가능한 한 빨리 되풀이됩니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>각 기간 이후에 값을 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
            <remarks>간격은 이전 알림의 끝과 다음 알림의 시작 사이가 아니라 후속 알림의 시작 사이에서 측정됩니다. 관찰자가 메시지를 처리하는 데 걸리는 간격 기간보다 오래 걸리는 경우 후속 알림은 현재 알림을 처리한 직후에 전달됩니다. 연속 알림의 끝과 시작 사이의 시간을 제어해야 하는 경우 <see cref="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Reactive.Concurrency.IScheduler)"/> 연산자를 대신 사용하는 것이 좋습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan)">
            <summary>각 간격으로 관찰 가능한 시퀀스를 샘플링합니다. 각 샘플링 틱시 마지막 샘플링 간격 동안 소스 시퀀스의 최신 요소(있는 경우)가 결과 시퀀스로 전송됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">샘플링할 소스 시퀀스입니다.</param>
            <param name="interval">샘플링할 간격입니다. 이 값이 TimeSpan.Zero와 같으면 스케줄러가 스트림을 계속 샘플링합니다.</param>
            <returns>샘플링된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks><paramref name="interval"/>에 대한 TimeSpan.Zero 값을 지정해도 모든 소스 시퀀스 요소가 유지되는 것은 아닙니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 샘플링 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 샘플링 타이머를 실행하여 각 간격에서 관찰 가능한 시퀀스를 샘플링합니다. 각 샘플링 틱시 마지막 샘플링 간격 동안 소스 시퀀스의 최신 요소(있는 경우)가 결과 시퀀스로 전송됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">샘플링할 소스 시퀀스입니다.</param>
            <param name="interval">샘플링할 간격입니다. 이 값이 TimeSpan.Zero와 같으면 스케줄러가 스트림을 계속 샘플링합니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>샘플링된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks><paramref name="interval"/>에 대한 TimeSpan.Zero 값을 지정해도 모든 소스 시퀀스 요소가 유지되는 것은 아닙니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 샘플링 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Sample``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>샘플링 틱을 생성하는 samper 관찰 가능한 시퀀스를 사용하여 소스 관찰 가능한 시퀀스를 샘플링합니다. 각 샘플링 틱시 마지막 샘플링 간격 동안 소스 시퀀스의 최신 요소(있는 경우)가 결과 시퀀스로 전송됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSample">생성된 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">샘플링할 소스 시퀀스입니다.</param>
            <param name="sampler">샘플링된 관찰 가능한 시퀀스입니다.</param>
            <returns>샘플링된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="sampler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Skip``1(System.IObservable{``0},System.TimeSpan)">
            <summary>관찰 가능한 소스 시퀀스의 시작부터 지정된 기간 동안 요소를 건너뜁니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 건너뛰는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 시작에서 요소를 건너뛰는 기간입니다.</param>
            <returns>소스 시퀀스의 시작부터 지정된 기간 동안 건너뛴 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para><paramref name="duration"/>에 대한 TimeSpan.Zero 값을 지정해도 소스 시퀀스의 시작에서 요소가 삭제되지 않습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 소스 시퀀스에서 콜백을 전달하게 하는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</para>
            <para><paramref name="duration"/> 전에 오류가 발생한 경우라도 소스 시퀀스에서 생성된 오류는 항상 결과 시퀀스로 전달됩니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Skip``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하는 동안 관찰 가능한 소스 시퀀스의 시작부터 지정된 기간동안 요소를 건너뜁니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 건너뛰는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 시작에서 요소를 건너뛰는 기간입니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>소스 시퀀스의 시작부터 지정된 기간 동안 건너뛴 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para><paramref name="duration"/>에 대한 TimeSpan.Zero 값을 지정해도 소스 시퀀스의 시작에서 요소가 삭제되지 않습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 소스 시퀀스에서 콜백을 전달하게 하는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</para>
            <para><paramref name="duration"/> 전에 오류가 발생한 경우라도 소스 시퀀스에서 생성된 오류는 항상 결과 시퀀스로 전달됩니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipLast``1(System.IObservable{``0},System.TimeSpan)">
            <summary>관찰 가능한 소스 시퀀스의 끝에서 지정된 기간에 대한 요소를 건너뜁니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 건너뛰는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 끝에서 요소를 건너뛰는 기간입니다.</param>
            <returns>소스 시퀀스의 끝에서 지정된 기간 동안 건너뛴 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>이 연산자는 초기 <paramref name="duration"/>창 동안 받은 요소를 저장할 수 있을 만큼 길이가 긴 큐를 누적합니다. 더 많은 요소가 수신되면 지정된 <paramref name="duration"/>보다 오래된 요소가 큐에서 수집되어 결과 시퀀스에서 생성됩니다. 이로 인해 요소가 <paramref name="duration"/>(으)로 지연됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipLast``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하는 동안 관찰 가능한 소스 시퀀스의 끝에서 지정된 기간동안 요소를 건너뜁니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 건너뛰는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 끝에서 요소를 건너뛰는 기간입니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>소스 시퀀스의 끝에서 지정된 기간 동안 건너뛴 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>이 연산자는 초기 <paramref name="duration"/>창 동안 받은 요소를 저장할 수 있을 만큼 길이가 긴 큐를 누적합니다. 더 많은 요소가 수신되면 지정된 <paramref name="duration"/>보다 오래된 요소가 큐에서 수집되어 결과 시퀀스에서 생성됩니다. 이로 인해 요소가 <paramref name="duration"/>(으)로 지연됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipUntil``1(System.IObservable{``0},System.DateTimeOffset)">
            <summary>관찰 가능한 소스 시퀀스에서 지정된 시작 시간까지 요소를 건너뜁니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 건너뛰는 소스 시퀀스입니다.</param>
            <param name="startTime">소스 시퀀스에서 요소를 취하는 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 크거나 같으면 요소가 건너뜁니다.</param>
            <returns>지정된 시작 시간까지 건너뛴 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <remarks><paramref name="startTime"/> 전에 오류가 발생한 경우라도 소스 시퀀스에서 생성된 오류는 항상 결과 시퀀스로 전달됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.SkipUntil``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하는 지정된 시작 시간까지 관찰 가능한 소스 시퀀스에서 요소를 건너뜁니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 건너뛰는 소스 시퀀스입니다.</param>
            <param name="startTime">소스 시퀀스에서 요소를 취하는 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 크거나 같으면 요소가 건너뜁니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>지정된 시작 시간까지 건너뛴 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <remarks><paramref name="startTime"/> 전에 오류가 발생한 경우라도 소스 시퀀스에서 생성된 오류는 항상 결과 시퀀스로 전달됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.TimeSpan)">
            <summary>관찰 가능한 소스 시퀀스의 시작부터 지정된 기간 동안 요소를 받습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 수집하는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 시작부터 요소를 취하는 기간입니다.</param>
            <returns>소스 시퀀스의 시작부터 지정된 기간 동안 수집된 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks><paramref name="duration"/>에 대한 TimeSpan.Zero 값을 지정해도 빈 시퀀스가 반환되는 것을 보장하지는 않습니다. 이는 TimeSpan.Zero 기한에도 불구하고 소스 시퀀스에서 전달 콜백을 중지하는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하는 관찰 가능한 소스 시퀀스의 시작부터 지정된 기간 동안 요소를 취합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 수집하는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 시작부터 요소를 취하는 기간입니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>소스 시퀀스의 시작부터 지정된 기간 동안 수집된 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks><paramref name="duration"/>에 대한 TimeSpan.Zero 값을 지정해도 빈 시퀀스가 반환되는 것을 보장하지는 않습니다. 이는 TimeSpan.Zero 기한에도 불구하고 소스 시퀀스에서 전달 콜백을 중지하는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.TimeSpan)">
            <summary>관찰 가능한 소스 시퀀스의 끝에서 지정된 기간 내에 있는 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 수집하는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 끝에서 요소를 취하는 기간입니다.</param>
            <returns>소스 시퀀스의 끝에서 지정된 기간 동안 수집한 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>이 연산자는 소스 시퀀스의 수명 동안 모든 <paramref name="duration"/> 창에 대한 요소를 저장할 수 있을 만큼 길이가 긴 버퍼를 누적합니다. 소스 시퀀스가 완료되면 이 버퍼는 결과 시퀀스에서 배출됩니다. 이렇게 하면 결과 요소가 <paramref name="duration"/>(으)로 지연됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하는 관찰 가능한 소스 시퀀스의 끝에서 지정된 기간 내에 있는 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 수집하는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 끝에서 요소를 취하는 기간입니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>소스 시퀀스의 끝에서 지정된 기간 동안 수집한 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>이 연산자는 소스 시퀀스의 수명 동안 모든 <paramref name="duration"/> 창에 대한 요소를 저장할 수 있을 만큼 길이가 긴 버퍼를 누적합니다. 소스 시퀀스가 완료되면 이 버퍼는 결과 시퀀스에서 배출됩니다. 이렇게 하면 결과 요소가 <paramref name="duration"/>(으)로 지연됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하고 수집된 요소를 드레인하기 위해 관찰 가능한 소스 시퀀스의 끝에서 지정된 기간 내에 있는 요소를 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 수집하는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 끝에서 요소를 취하는 기간입니다.</param>
            <param name="timerScheduler">타이머를 실행하는 스케줄러입니다.</param>
            <param name="loopScheduler">수집된 요소를 드레인하는 스케줄러입니다.</param>
            <returns>소스 시퀀스의 끝에서 지정된 기간 동안 수집한 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="timerScheduler"/> 또는 <paramref name="loopScheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>이 연산자는 소스 시퀀스의 수명 동안 모든 <paramref name="duration"/> 창에 대한 요소를 저장할 수 있을 만큼 길이가 긴 버퍼를 누적합니다. 소스 시퀀스가 완료되면 이 버퍼는 결과 시퀀스에서 배출됩니다. 이렇게 하면 결과 요소가 <paramref name="duration"/>(으)로 지연됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeLastBuffer``1(System.IObservable{``0},System.TimeSpan)">
            <summary>소스 시퀀스의 끝에서 지정된 기간 동안 수집한 요소가 있는 단일 목록이 포함된 관찰 가능한 시퀀스입니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 수집하는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 끝에서 요소를 취하는 기간입니다.</param>
            <returns>소스 시퀀스의 끝에서 지정된 기간 동안 수집한 요소가 있는 단일 목록이 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>이 연산자는 소스 시퀀스의 수명 동안 모든 <paramref name="duration"/> 창에 대한 요소를 저장할 수 있을 만큼 길이가 긴 버퍼를 누적합니다. 소스 시퀀스가 완료되면 이 버퍼는 결과 시퀀스에서 생성됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeLastBuffer``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하는 동안 관찰 가능한 소스 시퀀스의 끝에서 지정된 기간 내에 있는 요소가 있는 목록을 반환합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 수집하는 소스 시퀀스입니다.</param>
            <param name="duration">시퀀스의 끝에서 요소를 취하는 기간입니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>소스 시퀀스의 끝에서 지정된 기간 동안 수집한 요소가 있는 단일 목록이 포함된 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="duration"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>이 연산자는 소스 시퀀스의 수명 동안 모든 <paramref name="duration"/> 창에 대한 요소를 저장할 수 있을 만큼 길이가 긴 버퍼를 누적합니다. 소스 시퀀스가 완료되면 이 버퍼는 결과 시퀀스에서 생성됩니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeUntil``1(System.IObservable{``0},System.DateTimeOffset)">
            <summary>지정된 종료 시간까지 지정된 기간동안의 요소를 받습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 수집하는 소스 시퀀스입니다.</param>
            <param name="endTime">소스 시퀀스에서 요소 수집을 중지할 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 적거나 같으면 결과 스트림이 즉시 완료됩니다.</param>
            <returns>지정된 종료 시간까지 수집된 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TakeUntil``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하는 지정된 종료 시간까지 지정된 기간의 요소를 이동합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">요소를 수집하는 소스 시퀀스입니다.</param>
            <param name="endTime">소스 시퀀스에서 요소 수집을 중지할 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 적거나 같으면 결과 스트림이 즉시 완료됩니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>지정된 종료 시간까지 수집된 요소가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan)">
            <summary>지정된 상대 시간 기간 내에 다른 요소가 뒤에 오는 관찰 가능한 시퀀스의 요소를 무시합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">스로틀에 대한 소스 시퀀스입니다.</param>
            <param name="dueTime">각 요소에 대한 제한 기간입니다.</param>
            <returns>제한된 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para>이 연산자는 <paramref name="dueTime"/>에 지정된 기간 동안 각 요소를 유지하여 소스 시퀀스를 제한합니다. 이 시간 창 내에 다른 요소가 생성되면 요소가 삭제되고 현재 요소에 대한 새 타이머가 시작되어 이 전체 프로세스를 반복합니다. 요소 사이에서 간극이 <paramref name="dueTime"/>보다 크거나 같지 않은 스트림의 경우 <paramref name="dueTime"/>결과 스트림은 어떠한 요소도 생성하지 않습니다. 요소의 주기적인 생산을 보장하는 동안 스트림의 볼륨을 줄이려면 Observable.Sample 연산자 집합을 사용하는 것이 좋습니다.</para>
            <para><paramref name="dueTime"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 즉시 기한이 되는 제한 타이머를 예약할 수 있습니다. 그러나 모든 요소가 결과 시퀀스에서 유지되는 것을 보장하지는 않습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 요소를 전달하는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다. 이러한 경우 스케줄러가 제한 작업을 실행할 기회를 얻기 전에 다음 요소가 도착할 수 있습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 제한 타이머를 실행하는 지정된 상대 시간 기간 내에 다른 요소가 뒤에 오는 관찰 가능한 시퀀스의 요소를 무시합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">스로틀에 대한 소스 시퀀스입니다.</param>
            <param name="dueTime">각 요소에 대한 제한 기간입니다.</param>
            <param name="scheduler">시간 초과 타이머를 실행하는 스케줄러입니다.</param>
            <returns>제한된 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para>이 연산자는 <paramref name="dueTime"/>에 지정된 기간 동안 각 요소를 유지하여 소스 시퀀스를 제한합니다. 이 시간 창 내에 다른 요소가 생성되면 요소가 삭제되고 현재 요소에 대한 새 타이머가 시작되어 이 전체 프로세스를 반복합니다. 요소 사이에서 간극이 <paramref name="dueTime"/>보다 크거나 같지 않은 스트림의 경우 <paramref name="dueTime"/>결과 스트림은 어떠한 요소도 생성하지 않습니다. 요소의 주기적인 생산을 보장하는 동안 스트림의 볼륨을 줄이려면 Observable.Sample 연산자 집합을 사용하는 것이 좋습니다.</para>
            <para><paramref name="dueTime"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 즉시 기한이 되는 제한 타이머를 예약할 수 있습니다. 그러나 모든 요소가 결과 시퀀스에서 유지되는 것을 보장하지는 않습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 요소를 전달하는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다. 이러한 경우 스케줄러가 제한 작업을 실행할 기회를 얻기 전에 다음 요소가 도착할 수 있습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Throttle``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
            <summary>계산된 스로틀 지속 시간 내에 다른 값이 뒤에 오는 관찰 가능한 시퀀스의 요소를 무시합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TThrottle">소스 시퀀스의 각 요소에 대해 계산된 그룹 내의 요소 형식입니다.</typeparam>
            <param name="source">스로틀에 대한 소스 시퀀스입니다.</param>
            <param name="throttleDurationSelector">지정된 각 요소에 대한 지연을 나타내는 시퀀스를 검색하는 선택기 함수입니다.</param>
            <returns>제한된 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="throttleDurationSelector"/>은(는) null입니다.</exception>
            <remarks>이 연산자는 <paramref name="throttleDurationSelector"/>에 지정된 기간 동안 각 요소를 유지하여 소스 시퀀스를 제한합니다. 이 시간 창 내에 다른 요소가 생성되면 요소가 삭제되고 현재 요소에 대한 새 타이머가 시작되어 이 전체 프로세스를 반복합니다. 각 요소에 적용하여 계산된 기간이 <paramref name="throttleDurationSelector"/>후속 요소의 발생과 겹치는 스트림의 경우 결과 스트림은 요소를 생성하지 않습니다. 요소의 주기적인 생산을 보장하는 동안 스트림의 볼륨을 줄이려면 Observable.Sample 연산자 집합을 사용하는 것이 좋습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TimeInterval``1(System.IObservable{``0})">
            <summary>연속된 요소 사이의 시간 간격을 관찰 가능한 시퀀스에서 기록합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">시간 간격을 기록하는 소스 시퀀스입니다.</param>
            <returns>요소에 대한 시간 간격 정보가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.TimeInterval``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 시간 간격을 계산하여 관찰 가능한 시퀀스에서 연속된 요소 사이의 시간 간격을 기록합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">시간 간격을 기록하는 소스 시퀀스입니다.</param>
            <param name="scheduler">시간 간격을 계산하는 데 사용되는 스케줄러입니다.</param>
            <returns>요소에 대한 시간 간격 정보가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan)">
            <summary>관찰 가능한 시퀀스의 각 요소에 대해 시간 제한 정책을 적용합니다. 다음 요소가 이전 요소에서 시작하는 지정된 시간 초과 기간 내에 수신되지 않으면 TimeoutException이 관찰자에게 전파됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="dueTime">시간 초과가 발생하기 전에 값 사이의 최대 지속 시간입니다.</param>
            <returns>시간 초과의 경우 TimeoutException이 있는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> TimeSpan.Zero보다 적습니다.</exception>
            <exception cref="T:System.TimeoutException">(비동기) 이전 요소의 <paramref name="dueTime"/> 내에서 생성되는 요소가 없는 경우.</exception>
            <remarks>
            <para>첫 번째 요소에서만 시간 초과를 지정하려는 경우 소스 시퀀스에 적용된 <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})"/> 연산자와 지연된 <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)"/> 시퀀스를 또는 타임아웃의 범용 오버로드인을(를) 사용할 수 있습니다.</para>
            <para><paramref name="dueTime"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 즉시 기한이 되는 시간 초과 타이머를 예약할 수 있습니다. 그러나 첫 번째 요소에 대해서도 시간 초과가 발생하는 것을 보장하지는 않습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 시간 시간을 전파하는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다. 이 경우 스케줄러가 시간 초과 작업을 실행하기 전에 다음 요소가 도착할 수 있습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 시간 초과 타이머를 실행하는 관찰 가능한 시퀀스의 각 요소에 대해 시간 초과 정책을 적용합니다. 다음 요소가 이전 요소에서 시작하는 지정된 시간 초과 기간 내에 수신되지 않으면 TimeoutException이 관찰자에게 전파됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="dueTime">시간 초과가 발생하기 전에 값 사이의 최대 지속 시간입니다.</param>
            <param name="scheduler">시간 초과 타이머를 실행하는 스케줄러입니다.</param>
            <returns>시간 초과의 경우 TimeoutException이 있는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> TimeSpan.Zero보다 적습니다.</exception>
            <exception cref="T:System.TimeoutException">(비동기) 이전 요소의 <paramref name="dueTime"/> 내에서 생성되는 요소가 없는 경우.</exception>
            <remarks>
            <para>첫 번째 요소에서만 시간 초과를 지정하려는 경우 소스 시퀀스에 적용된 <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})"/> 연산자와 지연된 <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)"/> 시퀀스를 또는 타임아웃의 범용 오버로드인을(를) 사용할 수 있습니다.</para>
            <para><paramref name="dueTime"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 즉시 기한이 되는 시간 초과 타이머를 예약할 수 있습니다. 그러나 첫 번째 요소에 대해서도 시간 초과가 발생하는 것을 보장하지는 않습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 시간 시간을 전파하는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다. 이 경우 스케줄러가 시간 초과 작업을 실행하기 전에 다음 요소가 도착할 수 있습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스의 각 요소에 대해 시간 제한 정책을 적용합니다. 이전 요소에서 시작하여 지정된 시간 초과 기간 내에 다음 요소가 수신되지 않으면 다른 관찰 가능한 시퀀스가 해당 시점부터 이후 메시지를 생성하는 데 사용됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 시간 초과 시 사용되는 다른 시퀀스입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="dueTime">시간 초과가 발생하기 전에 값 사이의 최대 지속 시간입니다.</param>
            <param name="other">시간 초과의 경우 반환할 시퀀스입니다.</param>
            <returns>시간 초과의 경우 소스 시퀀스가 다른 시퀀스로 전환됩니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="other"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para>첫 번째 요소에서만 시간 초과를 지정하려는 경우 소스 시퀀스에 적용된 <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})"/> 연산자와 지연된 <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)"/> 시퀀스를 또는 타임아웃의 범용 오버로드인을(를) 사용할 수 있습니다.</para>
            <para><paramref name="dueTime"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 즉시 기한이 되는 시간 초과 타이머를 예약할 수 있습니다. 그러나 첫 번째 요소에 대해서도 시간 초과가 발생하는 것을 보장하지는 않습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 시간 시간을 전파하는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다. 이 경우 스케줄러가 시간 초과 작업을 실행하기 전에 다음 요소가 도착할 수 있습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 시간 초과 타이머를 실행하는 관찰 가능한 시퀀스의 각 요소에 대해 시간 초과 정책을 적용합니다. 이전 요소에서 시작하여 지정된 시간 초과 기간 내에 다음 요소가 수신되지 않으면 다른 관찰 가능한 시퀀스가 해당 시점부터 이후 메시지를 생성하는 데 사용됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 시간 초과 시 사용되는 다른 시퀀스입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="dueTime">시간 초과가 발생하기 전에 값 사이의 최대 지속 시간입니다.</param>
            <param name="other">시간 초과의 경우 반환할 시퀀스입니다.</param>
            <param name="scheduler">시간 초과 타이머를 실행하는 스케줄러입니다.</param>
            <returns>시간 초과의 경우 소스 시퀀스가 다른 시퀀스로 전환됩니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="other"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dueTime"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para>첫 번째 요소에서만 시간 초과를 지정하려는 경우 소스 시퀀스에 적용된 <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})"/> 연산자와 지연된 <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)"/> 시퀀스를 또는 타임아웃의 범용 오버로드인을(를) 사용할 수 있습니다.</para>
            <para><paramref name="dueTime"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 즉시 기한이 되는 시간 초과 타이머를 예약할 수 있습니다. 그러나 첫 번째 요소에 대해서도 시간 초과가 발생하는 것을 보장하지는 않습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 시간 시간을 전파하는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다. 이 경우 스케줄러가 시간 초과 작업을 실행하기 전에 다음 요소가 도착할 수 있습니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset)">
            <summary>절대 시간을 기준으로 관찰 가능한 시퀀스에 시간 제한 정책을 적용합니다. 지정된 절대 기한 시간 전에 시퀀스가 종료되지 않으면 TimeoutException이 관찰자에게 전파됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="dueTime">시간 제한이 발생하는 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 적거나 같으면 시간 제한이 즉시 발생합니다.</param>
            <returns>시간 초과의 경우 TimeoutException이 있는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.TimeoutException">(비동기) 시퀀스가 <paramref name="dueTime"/> 이전에 종료되지 않은 경우.</exception>
            <remarks>첫 번째 요소에서만 시간 초과를 지정하려는 경우 소스 시퀀스에 적용된 <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})"/> 연산자와 지연된 <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)"/> 시퀀스를 또는 타임아웃의 범용 오버로드인을(를) 사용할 수 있습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 시간 제한 타이머를 실행하는 절대 시간을 기준으로 관찰 가능한 시퀀스에 시간 제한 정책을 적용합니다. 지정된 절대 기한 시간 전에 시퀀스가 종료되지 않으면 TimeoutException이 관찰자에게 전파됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="dueTime">시간 제한이 발생하는 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 적거나 같으면 시간 제한이 즉시 발생합니다.</param>
            <param name="scheduler">시간 초과 타이머를 실행하는 스케줄러입니다.</param>
            <returns>시간 초과의 경우 TimeoutException이 있는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.TimeoutException">(비동기) 시퀀스가 <paramref name="dueTime"/> 이전에 종료되지 않은 경우.</exception>
            <remarks>첫 번째 요소에서만 시간 초과를 지정하려는 경우 소스 시퀀스에 적용된 <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})"/> 연산자와 지연된 <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)"/> 시퀀스를 또는 타임아웃의 범용 오버로드인을(를) 사용할 수 있습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0})">
            <summary>절대 시간을 기준으로 관찰 가능한 시퀀스에 시간 제한 정책을 적용합니다. 지정된 절대 기한 시간 전에 시퀀스가 종료되지 않으면 다른 관찰 가능한 시퀀스가 해당 시점의 이후 메시지를 생성하는 데 사용됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 시간 초과 시 사용되는 다른 시퀀스입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="dueTime">시간 제한이 발생하는 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 적거나 같으면 시간 제한이 즉시 발생합니다.</param>
            <param name="other">시간 초과의 경우 반환할 시퀀스입니다.</param>
            <returns>시간 초과의 경우 소스 시퀀스가 다른 시퀀스로 전환됩니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="other"/>은(는) null입니다.</exception>
            <remarks>첫 번째 요소에서만 시간 초과를 지정하려는 경우 소스 시퀀스에 적용된 <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})"/> 연산자와 지연된 <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)"/> 시퀀스를 또는 타임아웃의 범용 오버로드인을(를) 사용할 수 있습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 시간 제한 타이머를 실행하는 절대 시간을 기준으로 관찰 가능한 시퀀스에 시간 제한 정책을 적용합니다. 지정된 절대 기한 시간 전에 시퀀스가 종료되지 않으면 다른 관찰 가능한 시퀀스가 해당 시점의 이후 메시지를 생성하는 데 사용됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 시간 초과 시 사용되는 다른 시퀀스입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="dueTime">시간 제한이 발생하는 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 적거나 같으면 시간 제한이 즉시 발생합니다.</param>
            <param name="other">시간 초과의 경우 반환할 시퀀스입니다.</param>
            <param name="scheduler">시간 초과 타이머를 실행하는 스케줄러입니다.</param>
            <returns>시간 초과의 경우 소스 시퀀스가 다른 시퀀스로 전환됩니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="other"/> 또는 <paramref name="scheduler"/>이(가) null입니다.</exception>
            <remarks>첫 번째 요소에서만 시간 초과를 지정하려는 경우 소스 시퀀스에 적용된 <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})"/> 연산자와 지연된 <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)"/> 시퀀스를 또는 타임아웃의 범용 오버로드인을(를) 사용할 수 있습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
            <summary>각 요소에 대해 계산된 시간 제한 기간을 기준으로 관찰 가능한 시퀀스에 시간 제한 정책을 적용합니다. 이전 요소부터 시작된 계산된 기간 내에 다음 요소가 수신되지 않으면 TimeoutException이 관찰자에게 전파됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TTimeout">소스 시퀀스의 각 요소에 대한 시간 제한 기간을 나타내는 데 사용되는 시간 제한 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="timeoutDurationSelector">선택기는 현재 요소와 다음 요소 사이의 시간 제한을 나타내는 관찰 가능한 시퀀스를 검색합니다.</param>
            <returns>시간 초과의 경우 TimeoutException이 있는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="timeoutDurationSelector"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.IObservable{``0})">
            <summary>각 요소에 대해 계산된 시간 제한 기간을 기준으로 관찰 가능한 시퀀스에 시간 제한 정책을 적용합니다. 이전 요소부터 시작된 계산된 기간 내에 다음 요소가 수신되지 않으면 다른 관찰 가능한 시퀀스가 해당 시점부터 이후 메시지를 생성하는 데 사용됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 시간 초과 시 사용되는 다른 시퀀스입니다.</typeparam>
            <typeparam name="TTimeout">소스 시퀀스의 각 요소에 대한 시간 제한 기간을 나타내는 데 사용되는 시간 제한 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="timeoutDurationSelector">선택기는 현재 요소와 다음 요소 사이의 시간 제한을 나타내는 관찰 가능한 시퀀스를 검색합니다.</param>
            <param name="other">시간 초과의 경우 반환할 시퀀스입니다.</param>
            <returns>시간 초과의 경우 소스 시퀀스가 다른 시퀀스로 전환됩니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="timeoutDurationSelector"/> 또는 <paramref name="other"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})">
            <summary>첫 번째 요소의 초기 시간 제한 기간 및 각 후속 요소에 대해 계산된 시간 제한 기간을 기반으로 관찰 가능한 시퀀스에 시간 제한 정책을 적용합니다. 이전 요소부터 시작된 계산된 기간 내에 다음 요소가 수신되지 않으면 TimeoutException이 관찰자에게 전파됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TTimeout">소스 시퀀스의 각 요소에 대한 시간 제한 기간을 나타내는 데 사용되는 시간 제한 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="firstTimeout">첫 번째 요소에 대한 시간 제한을 나타내는 관찰 가능한 시퀀스입니다.</param>
            <param name="timeoutDurationSelector">선택기는 현재 요소와 다음 요소 사이의 시간 제한을 나타내는 관찰 가능한 시퀀스를 검색합니다.</param>
            <returns>시간 초과의 경우 TimeoutException이 있는 소스 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> <paramref name="firstTimeout"/> 또는 <paramref name="timeoutDurationSelector"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}},System.IObservable{``0})">
            <summary>첫 번째 요소의 초기 시간 제한 기간 및 각 후속 요소에 대해 계산된 시간 제한 기간을 기반으로 관찰 가능한 시퀀스에 시간 제한 정책을 적용합니다. 이전 요소부터 시작된 계산된 기간 내에 다음 요소가 수신되지 않으면 다른 관찰 가능한 시퀀스가 해당 시점부터 이후 메시지를 생성하는 데 사용됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 시간 초과 시 사용되는 다른 시퀀스입니다.</typeparam>
            <typeparam name="TTimeout">소스 시퀀스의 각 요소에 대한 시간 제한 기간을 나타내는 데 사용되는 시간 제한 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">시간 초과를 수행하는 소스 시퀀스입니다.</param>
            <param name="firstTimeout">첫 번째 요소에 대한 시간 제한을 나타내는 관찰 가능한 시퀀스입니다.</param>
            <param name="timeoutDurationSelector">선택기는 현재 요소와 다음 요소 사이의 시간 제한을 나타내는 관찰 가능한 시퀀스를 검색합니다.</param>
            <param name="other">시간 초과의 경우 반환할 시퀀스입니다.</param>
            <returns>시간 초과의 경우 소스 시퀀스가 다른 시퀀스로 전환됩니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="firstTimeout"/> 또는 <paramref name="timeoutDurationSelector"/> 또는 <paramref name="other"/>이(가) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan)">
            <summary>기한이 경과한 후 값을 생성하는 관찰 가능한 시퀀스입니다.</summary>
            <param name="dueTime">값을 생성할 상대 시간입니다. 이 값이 TimeSpan.Zero보다 작거나 같으면 타이머가 가능한 한 빨리 발생합니다.</param>
            <returns>기한이 경과한 후 값을 생성하는 관찰 가능한 시퀀스입니다.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset)">
            <summary>지정된 절대 기한 시간에 단일 값을 생성하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <param name="dueTime">값을 생성할 절대 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 작거나 같으면 타이머가 가능한 한 빨리 발생합니다.</param>
            <returns>기한에 값을 생성하는 관찰 가능한 시퀀스입니다.</returns>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan)">
            <summary>기한이 경과한 후 값을 생성하는 관찰 가능한 시퀀스입니다.</summary>
            <param name="dueTime">첫 번째 값을 생성할 상대 시간입니다. 이 값이 TimeSpan.Zero보다 작거나 같으면 타이머가 가능한 한 빨리 발생합니다.</param>
            <param name="period">후속 값을 생성하는 기간입니다. 이 값이 TimeSpan.Zero와 같으면 타이머가 가능한 한 빨리 되풀이됩니다.</param>
            <returns>기한 내에 값을 생성한 다음 각 기간이 지난 후에 값을 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan)">
            <summary>지정된 초기 절대 기한 시간부터 시작하는 값을 주기적으로 생성하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <param name="dueTime">첫 번째 값을 생성할 절대 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 작거나 같으면 타이머가 가능한 한 빨리 발생합니다.</param>
            <param name="period">후속 값을 생성하는 기간입니다. 이 값이 TimeSpan.Zero와 같으면 타이머가 가능한 한 빨리 되풀이됩니다.</param>
            <returns>기한 내에 값을 생성한 다음 각 기간이 지난 후에 값을 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 상대 적기 시간이 경과한 후 타이머를 실행하기 위해 지정된 스케줄러를 사용하여 단일 값을 생성하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <param name="dueTime">값을 생성할 상대 시간입니다. 이 값이 TimeSpan.Zero보다 작거나 같으면 타이머가 가능한 한 빨리 발생합니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>기한이 경과한 후 값을 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하는 지정된 절대 기한 시간에 단일 값을 생성하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <param name="dueTime">값을 생성할 절대 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 작거나 같으면 타이머가 가능한 한 빨리 발생합니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>기한에 값을 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 지정된 초기 상대 적기 시간이 경과한 후 주기적으로 값을 생성하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <param name="dueTime">첫 번째 값을 생성할 상대 시간입니다. 이 값이 TimeSpan.Zero보다 작거나 같으면 타이머가 가능한 한 빨리 발생합니다.</param>
            <param name="period">후속 값을 생성하는 기간입니다. 이 값이 TimeSpan.Zero와 같으면 타이머가 가능한 한 빨리 되풀이됩니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>기한 내에 값을 생성한 다음 각 기간이 지난 후에 값을 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러를 사용하여 타이머를 실행하는 지정된 초기 절대 기한 시간부터 시작하는 값을 주기적으로 생성하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <param name="dueTime">첫 번째 값을 생성할 절대 시간입니다. 이 값이 DateTimeOffset.UtcNow보다 작거나 같으면 타이머가 가능한 한 빨리 발생합니다.</param>
            <param name="period">후속 값을 생성하는 기간입니다. 이 값이 TimeSpan.Zero와 같으면 타이머가 가능한 한 빨리 되풀이됩니다.</param>
            <param name="scheduler">타이머를 실행하는 스케줄러입니다.</param>
            <returns>기한 내에 값을 생성한 다음 각 기간이 지난 후에 값을 생성하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timestamp``1(System.IObservable{``0})">
            <summary>로컬 시스템 시계를 사용하여 관찰 가능한 시퀀스의 각 요소를 타임스탬프로 합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스에서 타임스탬프 요소에 대한 소스 시퀀스입니다.</param>
            <returns>요소에 대한 타임스탬프 정보가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Timestamp``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 스케줄러의 시계를 사용하여 관찰 가능한 시퀀스의 각 요소를 타임스탬프로 찍습니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="source">소스 시퀀스에서 타임스탬프 요소에 대한 소스 시퀀스입니다.</param>
            <param name="scheduler">타임스탬프를 계산하는 데 사용되는 스케줄러입니다.</param>
            <returns>요소에 대한 타임스탬프 정보가 있는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan)">
            <summary>관찰 가능한 시퀀스의 각 요소를 타이밍 정보를 기반으로 생성되는 연속적인 겹치지 않는 창으로 투영합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="timeSpan">각 창의 길이입니다.</param>
            <returns>창의 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 창을 만들 수 있습니다. 모든 소스 시퀀스 요소는 창 중 하나에 끝나기 때문에 일부 창에는 0 시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 창을 닫고 새 창을 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>관찰 가능한 시퀀스의 각 요소를 지정된 스케줄러를 사용하여 타이머를 실행하는 타이밍 정보를 기반으로 생성되는 연속적인 겹치지 않는 창으로 프로젝트합니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="timeSpan">각 창의 길이입니다.</param>
            <param name="scheduler">창 타이머를 실행하는 스케줄러입니다.</param>
            <returns>관찰 가능한 창 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> TimeSpan.Zero보다 적습니다.</exception>
            <remarks><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 창을 만들 수 있습니다. 모든 소스 시퀀스 요소는 창 중 하나에 끝나기 때문에 일부 창에는 0 시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 창을 닫고 새 창을 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
            <summary>관찰 가능한 시퀀스의 각 요소를 타이밍 정보를 기반으로 생성되는 창이 0개 이상의 창으로 투영됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="timeSpan">각 창의 길이입니다.</param>
            <param name="timeShift">연속 창 생성 사이의 간격입니다.</param>
            <returns>관찰 가능한 창 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> 또는 <paramref name="timeSpan"/>TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 최소 기간 길이의 창을 만들 수 있습니다. 그러나 일부 창에는 0시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 창을 닫는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</para>
            <para><paramref name="timeShift"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 창을 만들 수 있습니다. 그러나 모든 창이 소스 시퀀스의 시작 부분에서 시작되는 것은 아닙니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 새 창을 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>관찰 가능한 시퀀스의 각 요소를 지정된 스케줄러를 사용하여 타이머를 실행하는 타이밍 정보를 기반으로 생성되는 창이 0개 이상의 창으로 투영됩니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="timeSpan">각 창의 길이입니다.</param>
            <param name="timeShift">연속 창 생성 사이의 간격입니다.</param>
            <param name="scheduler">창 타이머를 실행하는 스케줄러입니다.</param>
            <returns>관찰 가능한 창 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> 또는 <paramref name="timeSpan"/>TimeSpan.Zero보다 적습니다.</exception>
            <remarks>
            <para><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 최소 기간 길이의 창을 만들 수 있습니다. 그러나 일부 창에는 0시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 창을 닫는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</para>
            <para><paramref name="timeShift"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 창을 만들 수 있습니다. 그러나 모든 창이 소스 시퀀스의 시작 부분에서 시작되는 것은 아닙니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 새 창을 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</para>
            </remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
            <summary>관찰 가능한 시퀀스의 각 요소를 전체 또는 지정된 시간이 경과할 때 완료되는 창으로 투영합니다. 이 오버로드의 유용한 실제 비유는 모든 좌석을 취할 때 또는 출발 예정 시간 중 이른 시간에 선착장을 떠나는 여객선의 동작입니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="timeSpan">창의 최대 시간 길이입니다.</param>
            <param name="count">창의 최대 요소 수입니다.</param>
            <returns>관찰 가능한 창 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> TimeSpan.Zero보다 적습니다. -또는 - <paramref name="count"/>이(가) 0보다 적거나 같습니다.</exception>
            <remarks><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 창을 만들 수 있습니다. 모든 소스 시퀀스 요소는 창 중 하나에 끝나기 때문에 일부 창에는 0 시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 창을 닫고 새 창을 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>관찰 가능한 시퀀스의 각 요소를 전체 또는 지정된 시간이 경과할 때 완료되는 창에 지정된 스케줄러를 사용하여 타이머를 실행하는 데 사용됩니다. 이 오버로드의 유용한 실제 비유는 모든 좌석을 취할 때 또는 출발 예정 시간 중 이른 시간에 선착장을 떠나는 여객선의 동작입니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식과 결과 시퀀스의 창에 있는 요소의 형식입니다.</typeparam>
            <param name="source">소스 시퀀스를 사용하여 창을 생성합니다.</param>
            <param name="timeSpan">창의 최대 시간 길이입니다.</param>
            <param name="count">창의 최대 요소 수입니다.</param>
            <param name="scheduler">창 타이머를 실행하는 스케줄러입니다.</param>
            <returns>관찰 가능한 창 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeSpan"/> TimeSpan.Zero보다 적습니다. -또는 - <paramref name="count"/>이(가) 0보다 적거나 같습니다.</exception>
            <remarks><paramref name="timeSpan"/>에 대한 TimeSpan.Zero 값을 지정하는 것은 권장 및 지원되지 않아 스케줄러가 가능한 한 빨리 창을 만들 수 있습니다. 모든 소스 시퀀스 요소는 창 중 하나에 끝나기 때문에 일부 창에는 0 시간 범위가 없습니다. 이는 TimeSpan.Zero 기한이 있음에도 불구하고 현재 창을 닫고 새 창을 만드는 작업이 즉시 실행되지 않을 수 있는 스케줄러에 의해 도입된 비동기의 부작용입니다.</remarks>
        </member>
        <member name="T:System.Reactive.Linq.IQueryLanguage">
            <summary>LINQ to Events 쿼리 언어를 설명하는 내부 인터페이스입니다.</summary>
        </member>
        <member name="T:System.Reactive.EventPatternSourceBase`2">
            <summary>관찰 가능한 시퀀스를 잘 알려진 이벤트 패턴(보낸 자, 이벤트 인수)으로 노출하는 클래스의 기본 클래스입니다. 관찰 가능한 시퀀스 구독에 대한 이벤트 처리기 대리자의 맵을 유지하는 기능을 포함합니다. 하위 클래스는 기본 클래스의 작업에 호출하는 메서드를 사용자 지정 추가 및 제거하는 이벤트만 추가해야 합니다.</summary>
            <typeparam name="TSender">이벤트를 발생시키는 보낸 사람의 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.EventPatternSourceBase`2.#ctor(System.IObservable{System.Reactive.EventPattern{`0,`1}},System.Action{System.Action{`0,`1},System.Reactive.EventPattern{`0,`1}})">
            <summary>새 이벤트 패턴 원본을 만듭니다.</summary>
            <param name="source">이벤트로 노출할 소스 시퀀스입니다.</param>
            <param name="invokeHandler">시퀀스의 각 요소에 대해 이벤트를 호출하는 데 사용되는 대리자입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> 또는 <paramref name="invokeHandler"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.EventPatternSourceBase`2.Add(System.Delegate,System.Action{`0,`1})">
            <summary>지정된 이벤트 처리기를 추가하여 기본 원본에 대한 구독을 발생시입니다.</summary>
            <param name="handler">추가할 이벤트 처리기입니다. 이벤트 처리기를 제거하려면 동일한 대리자를 Remove 작업에 전달해야 합니다.</param>
            <param name="invoke">파생 클래스에서 이벤트를 발생시키기 위한 호출 대리자입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> 또는 <paramref name="invoke"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.EventPatternSourceBase`2.Remove(System.Delegate)">
            <summary>지정된 이벤트 처리기를 제거하여 Add 작업 중에 만들어진 기본 원본에 대한 해당 구독을 폐기합니다.</summary>
            <param name="handler">제거할 이벤트 처리기입니다. 이 대리자는 Add 작업에 전달된 대리자여야 합니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="handler"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.EventPattern`1">
            <summary>이벤트를 발생시키는 강력한 형식의 개체와 이벤트에 의해 생성된 데이터로 구성된 .NET 이벤트 호출을 나타냅니다.</summary>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
        </member>
        <member name="T:System.Reactive.EventPattern`2">
            <summary>이벤트를 발생시키는 강력한 형식의 개체와 이벤트에 의해 생성된 데이터로 구성된 .NET 이벤트 호출을 나타냅니다.</summary>
            <typeparam name="TSender">이벤트를 발생시킨 보낸 사람의 유형입니다.</typeparam>
            <typeparam name="TEventArgs">이벤트에서 생성된 이벤트 데이터의 유형입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.EventPattern`2.#ctor(`0,`1)">
            <summary>지정된 보낸 사람과 이벤트 데이터를 사용하여 .NET 이벤트 호출의 새 데이터 표현 인스턴스를 만듭니다.</summary>
            <param name="sender">이벤트를 발생시킨 보낸 개체입니다.</param>
            <param name="e">이벤트에 의해 생성된 이벤트 데이터입니다.</param>
        </member>
        <member name="M:System.Reactive.EventPattern`2.Equals(System.Reactive.EventPattern{`0,`1})">
            <summary>현재 EventPattern 개체가&lt;TSender, teventargs=&quot;&quot;&gt; 지정된 EventPattern 개체와 동일한&lt;TSender, teventargs=&quot;&quot;&gt; &lt;/TSender,&gt; 이벤트를&lt;/TSender,&gt; 나타내는지 여부를 결정합니다.</summary>
            <param name="other">현재 EventPattern 개체와 비교할&lt;TSender, teventargs=&quot;&quot;&gt; &lt;/TSender,&gt; 개체입니다.</param>
            <returns>두 EventPattern&lt;TSender, TEventArgs&gt; 개체가 동일한 이벤트를 나타내는 경우 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:System.Reactive.EventPattern`2.Equals(System.Object)">
            <summary>지정된 System.Object가 현재 EventPattern&lt;TSender, teventargs=&quot;&quot;&gt;.&lt;/TSender,&gt;</summary>
            <param name="obj">현재 이벤트 패턴과 비교할 System.Object&lt;TSender, teventargs=&quot;&quot;&gt;.&lt;/TSender,&gt;</param>
            <returns>지정된 개체가 현재 개체와 같으면 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:System.Reactive.EventPattern`2.GetHashCode">
            <summary>현재 EventPattern 인스턴스에 대&lt;TSender, teventargs=&quot;&quot;&gt; &lt;/TSender,&gt; 한 해시 코드를 반환 합니다.</summary>
            <returns>현재 EventPattern 인스턴스에 대한 해시&lt;TSender, teventargs=&quot;&quot;&gt; 코드입니다.&lt;/TSender,&gt;</returns>
        </member>
        <member name="M:System.Reactive.EventPattern`2.op_Equality(System.Reactive.EventPattern{`0,`1},System.Reactive.EventPattern{`0,`1})">
            <summary>지정된 두 개의 EventPattern 개체가&lt;TSender, teventargs=&quot;&quot;&gt; 동일한 이벤트를&lt;/TSender,&gt; 나타내는지 여부를 결정합니다.</summary>
            <param name="first">비교할 첫 번째 EventPattern&lt;TSender, TEventArgs&gt; 또는 null입니다.</param>
            <param name="second">비교할 두 번째 EventPattern&lt;TSender, TEventArgs&gt; 또는 null입니다.</param>
            <returns>두 EventPattern&lt;TSender, TEventArgs&gt; 개체가 동일한 이벤트를 나타내는 경우 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:System.Reactive.EventPattern`2.op_Inequality(System.Reactive.EventPattern{`0,`1},System.Reactive.EventPattern{`0,`1})">
            <summary>지정된 두 개의 EventPattern 개체가&lt;TSender, teventargs=&quot;&quot;&gt; 다른 이벤트를&lt;/TSender,&gt; 나타내는지 여부를 결정합니다.</summary>
            <param name="first">비교할 첫 번째 EventPattern&lt;TSender, TEventArgs&gt; 또는 null입니다.</param>
            <param name="second">비교할 두 번째 EventPattern&lt;TSender, TEventArgs&gt; 또는 null입니다.</param>
            <returns>두 EventPattern&lt;TSender, TEventArgs&gt; 개체가 동일한 이벤트를 나타내는 경우 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="P:System.Reactive.EventPattern`2.Sender">
            <summary>이벤트를 발생시킨 보낸 개체를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.EventPattern`2.EventArgs">
            <summary>이벤트에 의해 생성된 이벤트 데이터를 가져옵니다.</summary>
        </member>
        <member name="M:System.Reactive.EventPattern`1.#ctor(System.Object,`0)">
            <summary>지정된 보낸 사람과 이벤트 데이터를 사용하여 .NET 이벤트 호출의 새 데이터 표현 인스턴스를 만듭니다.</summary>
            <param name="sender">이벤트를 발생시킨 보낸 개체입니다.</param>
            <param name="e">이벤트에 의해 생성된 이벤트 데이터입니다.</param>
        </member>
        <member name="T:System.Reactive.Concurrency.HistoricalSchedulerBase">
            <summary>DateTimeOffset을 상대 시간 동안 절대 시간 및 TimeSpan에 사용하는 가상 시간 스케줄러인 기록 스케줄러의 기본 클래스입니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2">
            <summary>가상 시간 스케줄러의 기본 클래스입니다.</summary>
            <typeparam name="TAbsolute">절대 시간 표현 형식입니다.</typeparam>
            <typeparam name="TRelative">상대 시간 표현 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.#ctor">
            <summary>TAbsolute의 기본값을 초기 클럭 값으로 새 가상 시간 스케줄러를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.#ctor(`0,System.Collections.Generic.IComparer{`0})">
            <summary>지정된 초기 클럭 값과 절대 시간 비교자를 가진 새 가상 시간 스케줄러를 만듭니다.</summary>
            <param name="initialClock">시계의 초기 값입니다.</param>
            <param name="comparer">절대 시간을 기준으로 이벤트의 인과 관계를 결정하는 비교자입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Add(`0,`1)">
            <summary>절대 시간 값에 상대 시간 값을 추가합니다.</summary>
            <param name="absolute">절대 시간 값입니다.</param>
            <param name="relative">추가할 상대 시간 값입니다.</param>
            <returns>결과적으로 발생하는 절대 시간 합계 값입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ToDateTimeOffset(`0)">
            <summary>절대 시간 값을 DateTimeOffset 값으로 변환합니다.</summary>
            <param name="absolute">변환할 절대 시간 값입니다.</param>
            <returns>해당 DateTimeOffset 값입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ToRelative(System.TimeSpan)">
            <summary>TimeSpan 값을 상대 시간 값으로 변환합니다.</summary>
            <param name="timeSpan">변환할 TimeSpan 값입니다.</param>
            <returns>해당 상대 시간 값입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ScheduleAbsolute``1(``0,`0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ScheduleRelative``1(``0,`1,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Start">
            <summary>가상 시간 스케줄러를 시작합니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Stop">
            <summary>가상 시간 스케줄러를 중지합니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.AdvanceTo(`0)">
            <summary>스케줄러의 시계를 지정된 시간으로 이동하여 해당 시점까지 모든 작업을 실행합니다.</summary>
            <param name="time">스케줄러의 시계를 진행하는 상대 시간입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> 과거에 있습니다.</exception>
            <exception cref="T:System.InvalidOperationException">스케줄러가 이미 실행 중입니다. VirtualTimeScheduler는 중첩된 작업 디스패치 루프의 실행을 지원하지 않습니다. 스케줄러에서 작업을 실행하는 동안 시간 미끄러짐을 시뮬레이션하려면을(를) 사용합니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.AdvanceBy(`1)">
            <summary>스케줄러의 시계를 지정된 상대 시간으로 진행하여 해당 시간 범위에 대해 예약된 모든 작업을 실행합니다.</summary>
            <param name="time">스케줄러의 시계를 진행하는 상대 시간입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> 음수입니다.</exception>
            <exception cref="T:System.InvalidOperationException">스케줄러가 이미 실행 중입니다. VirtualTimeScheduler는 중첩된 작업 디스패치 루프의 실행을 지원하지 않습니다. 스케줄러에서 작업을 실행하는 동안 시간 미끄러짐을 시뮬레이션하려면을(를) 사용합니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Sleep(`1)">
            <summary>지정된 상대 시간으로 스케줄러의 시계를 진행합니다.</summary>
            <param name="time">스케줄러의 시계를 진행하는 상대 시간입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="time"/> 음수입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.GetNext">
            <summary>실행할 다음 예약된 항목을 가져옵니다.</summary>
            <returns>다음 예약된 항목입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.GetService(System.Type)">
            <summary>인터페이스 유형별로 스케줄러 서비스를 검색합니다. 기본 클래스 구현은 IStopwatchProvider 서비스만 지원합니다. 다른 스케줄러 서비스에 대한 지원 추가와 같은 서비스 검색에 영향을 주려면 파생 형식이 이 메서드를 재정의할 수 있습니다.</summary>
            <param name="serviceType">검색할 스케줄러 서비스 인터페이스 유형입니다.</param>
            <returns>요청된 서비스를 구현하는 개체(가능한 경우), 그렇지 않으면 null입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.StartStopwatch">
            <summary>새 스톱워치 개체를 시작합니다.</summary>
            <returns>새 스톱워치 개체, 요청 시 시작됩니다.</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.IsEnabled">
            <summary>스케줄러가 작업을 실행할 수 있는지 여부를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Comparer">
            <summary>절대 시간 값을 비교하는 데 사용되는 비교자를 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Clock">
            <summary>스케줄러의 절대 시간 시계 값을 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Now">
            <summary>현재 시간에 대한 스케줄러의 개념을 가져옵니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.#ctor">
            <summary>DateTimeOffset의 최소 값을 초기 클럭 값으로 사용하여 새 기록 스케줄러를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.#ctor(System.DateTimeOffset)">
            <summary>지정된 초기 클럭 값을 사용하여 새 기록 스케줄러를 만듭니다.</summary>
            <param name="initialClock">초기 클럭 값입니다.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.#ctor(System.DateTimeOffset,System.Collections.Generic.IComparer{System.DateTimeOffset})">
            <summary>지정된 초기 클럭 값을 사용하여 새 기록 스케줄러를 만듭니다.</summary>
            <param name="initialClock">시계의 초기 값입니다.</param>
            <param name="comparer">절대 시간을 기준으로 이벤트의 인과 관계를 결정하는 비교자입니다.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.Add(System.DateTimeOffset,System.TimeSpan)">
            <summary>절대 시간 값에 상대 시간 값을 추가합니다.</summary>
            <param name="absolute">절대 시간 값입니다.</param>
            <param name="relative">추가할 상대 시간 값입니다.</param>
            <returns>결과적으로 발생하는 절대 시간 합계 값입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.ToDateTimeOffset(System.DateTimeOffset)">
            <summary>절대 시간 값을 DateTimeOffset 값으로 변환합니다.</summary>
            <param name="absolute">변환할 절대 시간 값입니다.</param>
            <returns>해당 DateTimeOffset 값입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.ToRelative(System.TimeSpan)">
            <summary>TimeSpan 값을 상대 시간 값으로 변환합니다.</summary>
            <param name="timeSpan">변환할 TimeSpan 값입니다.</param>
            <returns>해당 상대 시간 값입니다.</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.HistoricalScheduler">
            <summary>상대 시간에 대한 절대 시간 및 TimeSpan에 대한 DateTimeOffset를 사용 하는 가상 시간 스케줄러를 제공 합니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalScheduler.#ctor">
            <summary>DateTimeOffset의 최소 값을 초기 클럭 값으로 사용하여 새 기록 스케줄러를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalScheduler.#ctor(System.DateTimeOffset)">
            <summary>지정된 초기 클럭 값을 사용하여 새 기록 스케줄러를 만듭니다.</summary>
            <param name="initialClock">시계의 초기 값입니다.</param>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalScheduler.#ctor(System.DateTimeOffset,System.Collections.Generic.IComparer{System.DateTimeOffset})">
            <summary>지정된 초기 클럭 값을 사용하여 새 기록 스케줄러를 만듭니다.</summary>
            <param name="initialClock">시계의 초기 값입니다.</param>
            <param name="comparer">절대 시간을 기준으로 이벤트의 인과 관계를 결정하는 비교자입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalScheduler.GetNext">
            <summary>실행할 다음 예약된 항목을 가져옵니다.</summary>
            <returns>다음 예약된 항목입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.HistoricalScheduler.ScheduleAbsolute``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Concurrency.VirtualTimeScheduler`2">
            <summary>예약된 항목에 대한 우선 순위 큐를 사용하는 가상 시간 스케줄러의 기본 클래스입니다.</summary>
            <typeparam name="TAbsolute">절대 시간 표현 형식입니다.</typeparam>
            <typeparam name="TRelative">상대 시간 표현 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.#ctor">
            <summary>TAbsolute의 기본값을 초기 클럭 값으로 새 가상 시간 스케줄러를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.#ctor(`0,System.Collections.Generic.IComparer{`0})">
            <summary>새 가상 시간 스케줄러를 만듭니다.</summary>
            <param name="initialClock">시계의 초기 값입니다.</param>
            <param name="comparer">절대 시간을 기준으로 이벤트의 인과 관계를 결정하는 비교자입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.GetNext">
            <summary>실행할 다음 예약된 항목을 가져옵니다.</summary>
            <returns>다음 예약된 항목입니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.ScheduleAbsolute``1(``0,`0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 절대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Subjects.ConnectableObservable`2">
            <summary>기본 관찰 가능한 시퀀스에서 연결하고 분리할 수 있는 관찰 가능한 래퍼를 나타냅니다.</summary>
            <typeparam name="TSource">소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TResult">피사체를 통해 변환한 후 결과 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Subjects.ConnectableObservable`2.#ctor(System.IObservable{`0},System.Reactive.Subjects.ISubject{`0,`1})">
            <summary>원본에서 연결하고 연결을 끊을 수 있는 관찰 가능한 검색 가능을 만듭니다.</summary>
            <param name="source">래퍼에서 연결하고 연결을 끊을 수 있는 기본 관찰 가능한 소스 시퀀스입니다.</param>
            <param name="subject">연결 가능한 관찰 가능한 대상에 의해 노출되며 연결 시 기본 소스 시퀀스에서 데이터를 수신합니다.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ConnectableObservable`2.Connect">
            <summary>관찰 가능한 래퍼를 해당 소스에 연결합니다. 구독된 모든 관찰자는 연결이 수립되는 한 기본 관찰 가능한 시퀀스에서 값을 수신합니다.</summary>
            <returns>관찰 가능한 래퍼를 소스에서 분리하는 데 사용되는 일회용 개체로 인해 구독된 관찰자가 기본 관찰 가능한 시퀀스에서 값 수신을 중지합니다.</returns>
        </member>
        <member name="M:System.Reactive.Subjects.ConnectableObservable`2.Subscribe(System.IObserver{`1})">
            <summary>대상에 대한 관찰자를 구독합니다. Connect 메서드를 통해 연결이 설정되지 않는 한 기본 관찰 가능한 원본의 값이 수신되지 않습니다.</summary>
            <param name="observer">현재 ConnectableObservable 인스턴스가 Connect 호출을 통해 연결될 때 기본 관찰 가능한 소스에서 값을 수신하는 관찰자입니다.</param>
            <returns>관찰 가능한 시퀀스에서 구독을 취소하는 데 사용되는 IDisposable 개체입니다.</returns>
        </member>
        <member name="T:System.Reactive.Subjects.Subject">
            <summary>주제를 만들기 위한 정적 메서드 집합을 제공합니다.</summary>
        </member>
        <member name="M:System.Reactive.Subjects.Subject.Create``2(System.IObserver{``0},System.IObservable{``1})">
            <summary>지정된 관찰자에서 관찰 가능한 피사체를 만듭니다.</summary>
            <typeparam name="TSource">관찰자가 수신한 요소의 유형입니다.</typeparam>
            <typeparam name="TResult">주체에서 생성된 요소의 유형입니다.</typeparam>
            <param name="observer">대상에 메시지를 보내는 데 사용되는 관찰자입니다.</param>
            <param name="observable">제목에서 보낸 메시지를 구독하는 데 사용되는 관찰 가능 입니다.</param>
            <returns>주어진 관찰자를 사용하여 구현된 주체 및 관찰 가능.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> 또는 <paramref name="observable"/>은(는) null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.Subject.Synchronize``2(System.Reactive.Subjects.ISubject{``0,``1})">
            <summary>제목에 전송된 메시지를 동기화합니다.</summary>
            <typeparam name="TSource">주체에서 수신한 요소의 유형입니다.</typeparam>
            <typeparam name="TResult">주체에서 생성된 요소의 유형입니다.</typeparam>
            <param name="subject">동기화할 주체입니다.</param>
            <returns>메시지가 동기화되는 제목입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subject"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.Subject.Synchronize``2(System.Reactive.Subjects.ISubject{``0,``1},System.Reactive.Concurrency.IScheduler)">
            <summary>제목에 전송된 메시지를 동기화하고 지정된 스케줄러에서 관찰자에게 전송합니다.</summary>
            <typeparam name="TSource">주체에서 수신한 요소의 유형입니다.</typeparam>
            <typeparam name="TResult">주체에서 생성된 요소의 유형입니다.</typeparam>
            <param name="subject">동기화할 주체입니다.</param>
            <param name="scheduler">스케줄러를 사용하여 관찰자에게 알립니다.</param>
            <returns>메시지가 동기화되고 지정된 스케줄러에 관찰자에게 알림이 전송되는 제목입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subject"/> 또는 <paramref name="scheduler"/>은(는) null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Subjects.AsyncSubject`1">
            <summary>비동기 작업의 결과입니다. OnCompleted 알림 이전의 마지막 값 또는 OnError를 통해 수신된 오류는 구독된 모든 관찰자에게 전송됩니다.</summary>
            <typeparam name="T">주체에서 처리하는 요소의 유형입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.#ctor">
            <summary>하나의 값만 받을 수 있고 해당 값이 모든 향후 관측값에 대해 캐시되는 주제를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnCompleted">
            <summary>모든 구독된 관찰자에게 시퀀스의 끝에 대해 알리고 마지막으로 받은 값이 전송되는 경우도 있습니다(있는 경우).</summary>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnError(System.Exception)">
            <summary>구독된 모든 관찰자에게 예외를 알립니다.</summary>
            <param name="error">모든 관찰자에게 보내는 예외입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="error"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnNext(`0)">
            <summary>제목에 값을 보냅니다. 성공적인 종료 전에 받은 마지막 값은 구독된 모든 관찰자와 미래의 관찰자에게 전송됩니다.</summary>
            <param name="value">제목에 저장할 값입니다.</param>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.Subscribe(System.IObserver{`0})">
            <summary>대상에 대한 관찰자를 구독합니다.</summary>
            <param name="observer">주체를 구독하는 관찰자입니다.</param>
            <returns>주체에서 관찰자의 구독을 취소하는 데 사용할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.Dispose">
            <summary>모든 관찰자를 구독 취소하고 리소스를 해제합니다.</summary>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.GetAwaiter">
            <summary>현재 AsyncSubject에 대해 대기 가능한 개체를 가져옵니다.</summary>
            <returns>기다릴 수 있는 개체입니다.</returns>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnCompleted(System.Action)">
            <summary>제목이 완료되면 호출되는 콜백 작업을 지정합니다.</summary>
            <param name="continuation">제목이 완료되면 호출되는 콜백 작업입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="continuation"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.AsyncSubject`1.GetResult">
            <summary>피사체가 성공적으로 또는 예외적으로 완료될 때까지 피사체의 마지막 요소를 차단할 수 있습니다.</summary>
            <returns>주제의 마지막 요소입니다. 요소가 수신되지 않은 경우 유효하지 않은OperationException을 throw합니다.</returns>
            <exception cref="T:System.InvalidOperationException">소스 시퀀스가 비어 있습니다.</exception>
        </member>
        <member name="P:System.Reactive.Subjects.AsyncSubject`1.HasObservers">
            <summary>주체에 관찰자가 등록되어 있는지 여부를 나타냅니다.</summary>
        </member>
        <member name="P:System.Reactive.Subjects.AsyncSubject`1.IsCompleted">
            <summary>비동기 피사체가 완료되었는지 여부를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Subjects.BehaviorSubject`1">
            <summary>시간이 지남에 따라 변경되는 값을 나타냅니다. 관찰자는 마지막(또는 초기) 값과 모든 후속 알림을 수신하도록 주체를 구독할 수 있습니다.</summary>
            <typeparam name="T">주체에서 처리하는 요소의 유형입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.#ctor(`0)">
            <summary> <see cref="T:System.Reactive.Subjects.BehaviorSubject`1"/>마지막 값을 캐시하고 지정된 값으로 시작하는 제목을 만드는 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="value">피사체가 아직 다른 값을 받지 않았을 때 관찰자에게 전송된 초기 값입니다.</param>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnCompleted">
            <summary>모든 구독된 관찰자에게 시퀀스가 종료되었음을 알립니다.</summary>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnError(System.Exception)">
            <summary>구독된 모든 관찰자에게 예외를 알립니다.</summary>
            <param name="error">모든 관찰자에게 보내는 예외입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="error"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnNext(`0)">
            <summary>구독된 모든 관찰자에게 시퀀스에서 지정된 요소가 도착했음을 알립니다.</summary>
            <param name="value">모든 관찰자에게 보낼 값입니다.</param>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.Subscribe(System.IObserver{`0})">
            <summary>대상에 대한 관찰자를 구독합니다.</summary>
            <param name="observer">주체를 구독하는 관찰자입니다.</param>
            <returns>주체에서 관찰자의 구독을 취소하는 데 사용할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.BehaviorSubject`1.Dispose">
            <summary>모든 관찰자를 구독 취소하고 리소스를 해제합니다.</summary>
        </member>
        <member name="P:System.Reactive.Subjects.BehaviorSubject`1.Value">
            <summary>현재 값을 가져옵니다 또는 예외를 throw합니다.</summary>
            <value>호출될 때까지 생성자에게 전달된 초기 <see cref="M:System.Reactive.Subjects.BehaviorSubject`1.OnNext(`0)"/>  <see cref="M:System.Reactive.Subjects.BehaviorSubject`1.OnNext(`0)"/>값입니다.</value>
            <remarks>
            <para><see cref="P:System.Reactive.Subjects.BehaviorSubject`1.Value"/> 호출된 후 <see cref="M:System.Reactive.Subjects.BehaviorSubject`1.OnCompleted"/>동결됩니다.</para>
            <para>호출 된 후 <see cref="M:System.Reactive.Subjects.BehaviorSubject`1.OnError(System.Exception)"/>  <see cref="P:System.Reactive.Subjects.BehaviorSubject`1.Value"/>항상 지정된 예외를 throw합니다. </para>
            <para>예외는 항상 호출 된 후 <see cref="M:System.Reactive.Subjects.BehaviorSubject`1.Dispose"/>throw됩니다.</para>
            <alert type="caller">읽기는 <see cref="P:System.Reactive.Subjects.BehaviorSubject`1.Value"/> 스레드에서 안전한 작업이지만 <see cref="M:System.Reactive.Subjects.BehaviorSubject`1.OnNext(`0)"/> 동시에 <see cref="M:System.Reactive.Subjects.BehaviorSubject`1.OnError(System.Exception)"/>호출되거나 호출될  수 있는 경합 조건이 있습니다. 경우에 따라 호출자는 경합 조건을 피하기 위해 외부 동기화를 사용해야 할 수도 있습니다.</alert>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">처분이 호출되었습니다.</exception>
        </member>
        <member name="P:System.Reactive.Subjects.BehaviorSubject`1.HasObservers">
            <summary>주체에 관찰자가 등록되어 있는지 여부를 나타냅니다.</summary>
        </member>
        <member name="T:System.Reactive.Subjects.Subject`1">
            <summary>관찰자뿐만 아니라 관찰 가능한 시퀀스인 개체를 나타냅니다. 각 알림은 구독된 모든 관찰자에게 브로드캐스트됩니다.</summary>
            <typeparam name="T">주체에서 처리하는 요소의 유형입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.#ctor">
            <summary>주제를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.OnCompleted">
            <summary>모든 구독된 관찰자에게 시퀀스가 종료되었음을 알립니다.</summary>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.OnError(System.Exception)">
            <summary>구독된 모든 관찰자에게 예외를 알립니다.</summary>
            <param name="error">모든 관찰자에게 보내는 예외입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="error"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.OnNext(`0)">
            <summary>구독된 모든 관찰자에게 시퀀스에서 지정된 요소가 도착했음을 알립니다.</summary>
            <param name="value">모든 관찰자에게 보낼 값입니다.</param>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.Subscribe(System.IObserver{`0})">
            <summary>대상에 대한 관찰자를 구독합니다.</summary>
            <param name="observer">주체를 구독하는 관찰자입니다.</param>
            <returns>주체에서 관찰자의 구독을 취소하는 데 사용할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.Subject`1.Dispose">
            <summary>클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제하고 <see cref="T:System.Reactive.Subjects.Subject`1"/>모든 관찰자를 구독 취소합니다.</summary>
        </member>
        <member name="P:System.Reactive.Subjects.Subject`1.HasObservers">
            <summary>주체에 관찰자가 등록되어 있는지 여부를 나타냅니다.</summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern">
            <summary>조인 패턴에 대한 기본 클래스를 추상화합니다.</summary>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`1">
            <summary>관찰 가능한 하나의 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`1.Then``1(System.Func{`0,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`2">
            <summary>관찰 가능한 두 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`2.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">관찰 가능한 시퀀스가 두 개의 이전 시퀀스와 일치합니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`2.Then``1(System.Func{`0,`1,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`3">
            <summary>세 개의 관찰 가능한 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`3.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">관찰 가능한 시퀀스가 이전 세 개의 시퀀스와 일치합니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`3.Then``1(System.Func{`0,`1,`2,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`4">
            <summary>관찰 가능한 4개의 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`4.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">4개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`4.Then``1(System.Func{`0,`1,`2,`3,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`5">
            <summary>관찰 가능한 5개 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`5.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">5개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`5.Then``1(System.Func{`0,`1,`2,`3,`4,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`6">
            <summary>관찰 가능한 6개 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`6.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">6개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`6.Then``1(System.Func{`0,`1,`2,`3,`4,`5,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`7">
            <summary>관찰 가능한 7개 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`7.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">7개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`7.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`8">
            <summary>관찰 가능한 8개 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`8.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">8개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`8.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`9">
            <summary>9개의 관찰 가능한 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`9.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">9개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`9.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`10">
            <summary>관찰 가능한 10개 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`10.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">10개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`10.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`11">
            <summary>관찰 가능한 11개 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`11.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">11개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`11.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`12">
            <summary>12개의 관찰 가능한 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`12.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">12개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`12.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`13">
            <summary>관찰 가능한 13개 시퀀스에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`13.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource14">14번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">13개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`13.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`14">
            <summary>관찰 가능한 시퀀스 14개이상 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource14">14번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`14.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource15">15번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">14개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`14.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`15">
            <summary>관찰 가능한 시퀀스 15개에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource14">14번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource15">15번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`15.And``1(System.IObservable{``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</summary>
            <typeparam name="TSource16">16번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="other">15개의 이전 시퀀스와 일치하는 관찰 가능한 시퀀스입니다.</param>
            <returns>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있을 때 일치하는 패턴 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="other"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`15.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Pattern`16">
            <summary>관찰 가능한 시퀀스 16개에 대한 조인 패턴을 나타냅니다.</summary>
            <typeparam name="TSource1">첫 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource2">두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource3">세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource4">네 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource5">다섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource6">여섯 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource7">일곱 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource8">여덟 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource9">아홉 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource10">열 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource11">열한 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource12">열두 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource13">열세 번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource14">14번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource15">15번째 소스 시퀀스의 요소 형식입니다.</typeparam>
            <typeparam name="TSource16">16번째 소스 시퀀스의 요소 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Joins.Pattern`16.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,``0})">
            <summary>관찰 가능한 모든 시퀀스에 사용 가능한 요소가 있고 선택기 함수를 호출하여 요소를 투영하는 경우 일치합니다.</summary>
            <typeparam name="TResult">선택기 함수에서 반환되는 결과적으로 발생하는 시퀀스의 요소 형식입니다.</typeparam>
            <param name="selector">소스 시퀀스의 요소에 대해 호출되는 선택기입니다.</param>
            <returns>Plan that produces the projected results, to be fed (with other plans) to the When 연산자에 공급(다른 계획과 함께)되는 예상결과를 생성하는 계획입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="selector"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.Joins.Plan`1">
            <summary>조인 패턴에 대한 실행 계획을 나타냅니다.</summary>
            <typeparam name="TResult">원본 작업에서 생성된 결과의 유형입니다.</typeparam>
        </member>
        <member name="T:System.Reactive.Subjects.ReplaySubject`1">
            <summary>관찰자뿐만 아니라 관찰 가능한 시퀀스인 개체를 나타냅니다. 각 알림은 버퍼 트리밍 정책에 따라 구독된 모든 관찰자와 향후 관찰자에게 브로드캐스트됩니다.</summary>
            <typeparam name="T">주체에서 처리하는 요소의 유형입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 이름과 콘텐츠로 <see cref="T:System.Reactive.Subjects.ReplaySubject`1"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <param name="scheduler">관찰자가 호출되는 스케줄러입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다. - 또는- <paramref name="window"/>이가 TimeSpan.Zero보다 적습니다.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan)">
            <summary>지정된 이름과 콘텐츠로 <see cref="T:System.Reactive.Subjects.ReplaySubject`1"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다. - 또는- <paramref name="window"/>이가 TimeSpan.Zero보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor">
            <summary><see cref="T:System.Reactive.Subjects.ReplaySubject`1"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 콘텐츠로 <see cref="T:System.Reactive.Subjects.ReplaySubject`1"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="scheduler">관찰자가 호출되는 스케줄러입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 이름과 콘텐츠로 <see cref="T:System.Reactive.Subjects.ReplaySubject`1"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <param name="scheduler">관찰자가 호출되는 스케줄러입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32)">
            <summary>지정된 오류 메시지와 함께 <see cref="T:System.Reactive.Subjects.ReplaySubject`1"/>클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="bufferSize">재생 버퍼의 최대 요소 수입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize"/> 0보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>지정된 이름과 콘텐츠로 <see cref="T:System.Reactive.Subjects.ReplaySubject`1"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <param name="scheduler">관찰자가 호출되는 스케줄러입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scheduler"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="window"/> TimeSpan.Zero보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.TimeSpan)">
            <summary>지정된 콘텐츠로 <see cref="T:System.Reactive.Subjects.ReplaySubject`1"/> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="window">재생 버퍼의 최대 시간 길이입니다.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="window"/> TimeSpan.Zero보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnNext(`0)">
            <summary>구독된 모든 관찰자에게 시퀀스에서 지정된 요소가 도착했음을 알립니다.</summary>
            <param name="value">모든 관찰자에게 보낼 값입니다.</param>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnError(System.Exception)">
            <summary>구독된 모든 관찰자에게 예외를 알립니다.</summary>
            <param name="error">모든 관찰자에게 보내는 예외입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="error"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnCompleted">
            <summary>모든 구독된 관찰자에게 시퀀스가 종료되었음을 알립니다.</summary>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.Subscribe(System.IObserver{`0})">
            <summary>대상에 대한 관찰자를 구독합니다.</summary>
            <param name="observer">주체를 구독하는 관찰자입니다.</param>
            <returns>주체에서 관찰자의 구독을 취소하는 데 사용할 수 있는 일회용 개체입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Subjects.ReplaySubject`1.Dispose">
            <summary>클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제하고 <see cref="T:System.Reactive.Subjects.ReplaySubject`1"/>모든 관찰자를 구독 취소합니다.</summary>
        </member>
        <member name="P:System.Reactive.Subjects.ReplaySubject`1.HasObservers">
            <summary>주체에 관찰자가 등록되어 있는지 여부를 나타냅니다.</summary>
        </member>
        <member name="T:System.Reactive.Threading.Tasks.NamespaceDoc">
            <summary> <b>System.Reactive.Threading.Tasks</b>네임스페이스에는 작업과 관찰 가능한 시퀀스 간의 변환을 위한 도우미가 포함되어 있습니다. </summary>
        </member>
        <member name="T:System.Reactive.Threading.Tasks.TaskObservableExtensions">
            <summary>작업을 관찰 가능한 시퀀스로 변환하기 위한 정적 메서드 집합을 제공합니다.</summary>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable(System.Threading.Tasks.Task)">
            <summary>작업이 완료될 때 신호를 주는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <param name="task">관찰 가능한 시퀀스로 변환하는 작업입니다.</param>
            <returns>작업이 완료될 때 단위 값을 생성하거나 작업에 의해 생성된 예외를 전파하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> null입니다.</exception>
            <remarks>지정된 작업 개체가 취소를 지원하는 경우 대신을(를) 사용하는 것이 좋습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})">
            <summary>작업 결과를 전파하는 관찰 가능한 시퀀스를 반환합니다.</summary>
            <typeparam name="TResult">원본 작업에서 생성된 결과의 유형입니다.</typeparam>
            <param name="task">관찰 가능한 시퀀스로 변환하는 작업입니다.</param>
            <returns>작업의 결과를 생성하거나 작업에 의해 생성된 예외를 전파하는 관찰 가능한 시퀀스입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> null입니다.</exception>
            <remarks>지정된 작업 개체가 취소를 지원하는 경우 대신을(를) 사용하는 것이 좋습니다.</remarks>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0})">
            <summary>관찰 가능한 시퀀스에서 생성된 마지막 값 또는 예외를 수신하는 작업을 반환합니다.</summary>
            <typeparam name="TResult">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="observable">작업으로 변환할 수 있는 시퀀스입니다.</param>
            <returns>관찰 가능한 시퀀스에서 생성된 마지막 요소 또는 예외를 수신하는 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observable"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Object)">
            <summary>관찰 가능한 시퀀스에서 생성된 마지막 값 또는 예외를 수신하는 작업을 반환합니다.</summary>
            <typeparam name="TResult">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="observable">작업으로 변환할 수 있는 시퀀스입니다.</param>
            <param name="state">기본 작업의 AsyncState로 사용할 상태입니다.</param>
            <returns>관찰 가능한 시퀀스에서 생성된 마지막 요소 또는 예외를 수신하는 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observable"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Threading.CancellationToken)">
            <summary>관찰 가능한 시퀀스에서 생성된 마지막 값 또는 예외를 수신하는 작업을 반환합니다.</summary>
            <typeparam name="TResult">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="observable">작업으로 변환할 수 있는 시퀀스입니다.</param>
            <param name="cancellationToken">작업을 취소하는 데 사용할 수 있는 취소 토큰으로 인해 관찰 가능한 시퀀스에서 구독이 취소됩니다.</param>
            <returns>관찰 가능한 시퀀스에서 생성된 마지막 요소 또는 예외를 수신하는 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observable"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Threading.CancellationToken,System.Object)">
            <summary>관찰 가능한 시퀀스에서 생성된 마지막 값 또는 예외를 수신하는 작업을 반환합니다.</summary>
            <typeparam name="TResult">소스 시퀀스의 요소 형식입니다.</typeparam>
            <param name="observable">작업으로 변환할 수 있는 시퀀스입니다.</param>
            <param name="cancellationToken">작업을 취소하는 데 사용할 수 있는 취소 토큰으로 인해 관찰 가능한 시퀀스에서 구독이 취소됩니다.</param>
            <param name="state">기본 작업의 AsyncState로 사용할 상태입니다.</param>
            <returns>관찰 가능한 시퀀스에서 생성된 마지막 요소 또는 예외를 수신하는 작업입니다.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observable"/> null입니다.</exception>
        </member>
        <member name="T:System.Reactive.TimeInterval`1">
            <summary>시간 간격 정보와 연결된 값을 나타냅니다. 시간 간격은 값을 생성하는 데 걸린 시간, 이전 값을 기준으로 한 간격, 기준을 기준으로 한 값의 배달 시간 등을 나타낼 수 있습니다.</summary>
            <typeparam name="T">시간 간격 정보로 추가되는 값의 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.#ctor(`0,System.TimeSpan)">
            <summary>시간 간격 값을 생성합니다.</summary>
            <param name="value">타임스탬프가 함께 추가될 값입니다.</param>
            <param name="interval">값과 연결된 시간 간격입니다.</param>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.Equals(System.Reactive.TimeInterval{`0})">
            <summary>현재 TimeInterval 값에 지정된 TimeInterval 값과 동일한 값 및 간격이 있는지 여부를&lt;T&gt; 결정합니다.&lt;T&gt; &lt;/T&gt; &lt;/T&gt;</summary>
            <param name="other">현재 TimeInterval 값과 비교할&lt;T&gt; &lt;/T&gt; 개체입니다.</param>
            <returns>두 TimeInterval 값이 동일한 값과 간격이 있는 경우 true;&lt;T&gt; 그렇지 않으면 false입니다.&lt;/T&gt;</returns>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.op_Equality(System.Reactive.TimeInterval{`0},System.Reactive.TimeInterval{`0})">
            <summary>지정된 두 TimeInterval 값에&lt;T&gt; 동일한 값과 간격이&lt;/T&gt; 있는지 여부를 결정합니다.</summary>
            <param name="first">비교할 첫 번째 TimeInterval&lt;T&gt; 값입니다.&lt;/T&gt;</param>
            <param name="second">비교할 두 번째 TimeInterval&lt;T&gt; 값입니다.&lt;/T&gt;</param>
            <returns>true는 첫 번째 TimeInterval&lt;T&gt; 값이 두 번째 TimeInterval 값과 동일한 값 과 간격을 가지는 경우,&lt;T&gt; 그렇지 않으면 false입니다.&lt;/T&gt; &lt;/T&gt;</returns>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.op_Inequality(System.Reactive.TimeInterval{`0},System.Reactive.TimeInterval{`0})">
            <summary>지정된 두 TimeInterval 값에&lt;T&gt; 동일한 값과 간격이&lt;/T&gt; 없는지 여부를 확인합니다.</summary>
            <param name="first">비교할 첫 번째 TimeInterval&lt;T&gt; 값입니다.&lt;/T&gt;</param>
            <param name="second">비교할 두 번째 TimeInterval&lt;T&gt; 값입니다.&lt;/T&gt;</param>
            <returns>true는 첫 번째 TimeInterval&lt;T&gt; 값이 두 번째 TimeInterval 값으로 다른 값 또는 간격을 가지는 경우,&lt;T&gt; 그렇지 않으면 false입니다.&lt;/T&gt; &lt;/T&gt;</returns>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.Equals(System.Object)">
            <summary>지정된 개체가 현재 개체와 동일한지 여부를 판별합니다.</summary>
            <param name="obj">현재 시간 간격과 비교할 System.Object&lt;T&gt;.&lt;/T&gt;</param>
            <returns>지정된 개체가 현재 개체와 같으면 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.GetHashCode">
            <summary>현재 TimeInterval 값에 대한&lt;T&gt; &lt;/T&gt; 해시 코드를 반환합니다.</summary>
            <returns>현재 TimeInterval 값에 대한 해시&lt;T&gt; 코드입니다.&lt;/T&gt;</returns>
        </member>
        <member name="M:System.Reactive.TimeInterval`1.ToString">
            <summary>현재 TimeInterval 값의 문자열&lt;T&gt; &lt;/T&gt; 표현을 반환합니다.</summary>
            <returns>현재 TimeInterval 값의 문자열&lt;T&gt; 표현입니다.&lt;/T&gt;</returns>
        </member>
        <member name="P:System.Reactive.TimeInterval`1.Value">
            <summary>값을 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.TimeInterval`1.Interval">
            <summary>간격을 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Timestamped`1">
            <summary>타임스탬프가 있는 값을 나타냅니다. 타임스탬프는 일반적으로 IScheduler의 시계를 사용하여 현재 시간을 얻기 위해 값을 받은 시간을 나타냅니다.</summary>
            <typeparam name="T">직렬화되는 값의 형식입니다.</typeparam>
        </member>
        <member name="M:System.Reactive.Timestamped`1.#ctor(`0,System.DateTimeOffset)">
            <summary>타임스탬프가 찍힌 값을 생성합니다.</summary>
            <param name="value">타임스탬프가 함께 추가될 값입니다.</param>
            <param name="timestamp">값과 관련된 타임스탬프입니다.</param>
        </member>
        <member name="M:System.Reactive.Timestamped`1.Equals(System.Reactive.Timestamped{`0})">
            <summary>현재 타임스탬프&lt;T&gt; 가 지정된 타임스탬프 값과 동일한 값 및 타임스탬프를 가지고&lt;T&gt; &lt;/T&gt; &lt;/T&gt; 있는지 여부를 결정합니다.</summary>
            <param name="other">현재 타임스탬프가 찍힌&lt;T&gt; 값과&lt;/T&gt; 비교할 개체입니다.</param>
            <returns>타임스탬프가 두 값 모두&lt;T&gt; 동일한 값과 타임스탬프를 가지는&lt;/T&gt; 경우 true입니다.</returns>
        </member>
        <member name="M:System.Reactive.Timestamped`1.op_Equality(System.Reactive.Timestamped{`0},System.Reactive.Timestamped{`0})">
            <summary>지정된 두 타임스탬프 값의&lt;T&gt; 값과 타임스탬프가&lt;/T&gt; 동일한지 여부를 결정합니다.</summary>
            <param name="first">비교할 첫 번째 Timestamped&lt;T&gt; 값입니다.</param>
            <param name="second">비교할 두 번째 Timestamped&lt;T&gt; 값입니다.</param>
            <returns>true는 첫 번째 타임스탬프&lt;T&gt; 값이 두 번째 타임스탬프가 찍힌 값과 동일한 값과 타임스탬프를 가지는 경우,&lt;T&gt; 그렇지 않으면 false입니다.&lt;/T&gt; &lt;/T&gt;</returns>
        </member>
        <member name="M:System.Reactive.Timestamped`1.op_Inequality(System.Reactive.Timestamped{`0},System.Reactive.Timestamped{`0})">
            <summary>지정된 두 타임스탬프 값에&lt;T&gt; 동일한 값과 타임스탬프가&lt;/T&gt; 없는지 여부를 결정합니다.</summary>
            <param name="first">비교할 첫 번째 Timestamped&lt;T&gt; 값입니다.</param>
            <param name="second">비교할 두 번째 Timestamped&lt;T&gt; 값입니다.</param>
            <returns>true는 첫 번째 타임스탬프&lt;T&gt; 값이 다른 값 또는 타임스탬프를 두 번째 타임스탬프 값으로 가지고 있는 경우, 그렇지 않으면 false입니다.&lt;T&gt; &lt;/T&gt; &lt;/T&gt;</returns>
        </member>
        <member name="M:System.Reactive.Timestamped`1.Equals(System.Object)">
            <summary>지정된 개체가 현재 개체와 동일한지 여부를 판별합니다.</summary>
            <param name="obj">System.Object를 현재 타임스탬프가 있는&lt;T&gt;&lt;/T&gt; .와 비교할 수 있습니다.</param>
            <returns>지정된 개체가 현재 개체와 같으면 true, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="M:System.Reactive.Timestamped`1.GetHashCode">
            <summary>현재 타임스탬프가 찍힌 값에&lt;T&gt; &lt;/T&gt; 대한 해시 코드를 반환합니다.</summary>
            <returns>현재 타임스탬프가 찍힌 값에 대한 해시&lt;T&gt; 코드입니다.&lt;/T&gt;</returns>
        </member>
        <member name="M:System.Reactive.Timestamped`1.ToString">
            <summary>현재 타임스탬프가 찍힌&lt;T&gt; 값의&lt;/T&gt; 문자열 표현을 반환합니다.</summary>
            <returns>현재 타임스탬프 값의 문자열&lt;T&gt; 표현입니다.&lt;/T&gt;</returns>
        </member>
        <member name="P:System.Reactive.Timestamped`1.Value">
            <summary>값을 가져옵니다.</summary>
        </member>
        <member name="P:System.Reactive.Timestamped`1.Timestamp">
            <summary>타임스탬프를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Timestamped">
            <summary>타임스탬프가 찍힌 인스턴스를 만들기 위한&lt;T&gt; &lt;/T&gt; 팩터리 메서드가 있는 도우미 클래스입니다.</summary>
        </member>
        <member name="M:System.Reactive.Timestamped.Create``1(``0,System.DateTimeOffset)">
            <summary>타임스탬프가 있는 의&lt;T&gt;&lt;/T&gt; 인스턴스를 만듭니다. 이것은 형식 추론을 사용하여 생성자 호출에서 형식을 지정하지 않도록 하는 구문 설탕이며 익명 형식을 사용할 때 매우 유용합니다.</summary>
            <param name="value">타임스탬프가 함께 추가될 값입니다.</param>
            <param name="timestamp">값과 관련된 타임스탬프입니다.</param>
            <returns>새 타임스탬프 값을 만듭니다.</returns>
        </member>
        <member name="T:System.Reactive.Strings_Linq">
            <summary>국부화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.ResourceManager">
            <summary>이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.Culture">
            <summary>이 강력하게 형식이 지정된 리소스 클래스를 사용하는 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을 재정의합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.COULD_NOT_FIND_INSTANCE_EVENT">
            <summary>&apos;{1}&apos;의 개체에서 이벤트 &apos;{0}&apos;을 찾을 수 없는 것과 유사한 지역화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.COULD_NOT_FIND_STATIC_EVENT">
            <summary>&apos;{1}&apos;이라는 형식에서 이벤트 &apos;{0}&apos;을 찾을 수 없는 것과 유사한 지역화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.EVENT_ADD_METHOD_SHOULD_TAKE_ONE_PARAMETER">
            <summary>Add 메서드와 유사한 지역화된 문자열을 찾습니다.매개 변수를 1개 사용해야합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.EVENT_ARGS_NOT_ASSIGNABLE">
            <summary>이벤트 대리자의 두 번째 매개 변수와 유사한 지역화된 문자열을 &apos;{0}&apos;에 할당할 수 있어야 합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.EVENT_MISSING_ADD_METHOD">
            <summary>Event와 유사한 지역화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.EVENT_MISSING_REMOVE_METHOD">
            <summary>Event와 유사한 지역화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.EVENT_MUST_RETURN_VOID">
            <summary>이벤트 대리자와 유사한 지역화된 문자열을 찾은 경우 void return 형식이 있어야 합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.EVENT_PATTERN_REQUIRES_TWO_PARAMETERS">
            <summary>이벤트 대리자와 유사한 지역화된 문자열에는 정확히 두 개의 매개 변수가 있어야 합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.EVENT_REMOVE_METHOD_SHOULD_TAKE_ONE_PARAMETER">
            <summary>제거 메서드와 유사한 지역화된 문자열을 찾습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.EVENT_SENDER_NOT_ASSIGNABLE">
            <summary>이벤트 대리자의 첫 번째 매개 변수와 유사한 지역화된 문자열을 &apos;{0}&apos;에 할당할 수 있어야 합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.EVENT_WINRT_REMOVE_METHOD_SHOULD_TAKE_ERT">
            <summary>WinRT 이벤트의 제거 메서드와 유사한 지역화된 문자열을 찾은 경우 EventRegistrationToken을 수행해야 합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.MORE_THAN_ONE_ELEMENT">
            <summary>시퀀스와 유사한 지역화된 문자열에 두 개 이상의 요소가 포함되어 있습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.MORE_THAN_ONE_MATCHING_ELEMENT">
            <summary>시퀀스와 유사한 지역화된 문자열에 일치하는 요소가 두 개 이상 포함되어 있습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.NO_ELEMENTS">
            <summary>시퀀스와 유사한 지역화된 문자열에는 요소가 포함되어 있지 않습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.NO_MATCHING_ELEMENTS">
            <summary>시퀀스와 유사한 지역화된 문자열에 일치하는 요소가 없습니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_Linq.CANT_ADVANCE_WHILE_RUNNING">
            <summary>스케줄러가 이미 실행 중일 때 {0}과 유사한 지역화된 문자열을 호출할 수 없습니다. 대신 절전 모드를 사용해 보십시오.</summary>
        </member>
    </members>
</doc>