<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>System.Reactive.PlatformServices</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.Concurrency.EventLoopScheduler">
            <summary>지정된 스레드에서 각 작업 단위를 예약하는 개체를 나타냅니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler.s_counter">
            <summary>스레드 이름을 지정하기 위한 진단용 카운터입니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler._threadFactory">
            <summary>스레드 팩터리 기능입니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler._stopwatch">
            <summary>절대 시간 종속성이 없는 타이밍을 위한 스톱워치입니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler._thread">
            <summary>이벤트 루프에서 작업 항목을 실행하는 데 사용되는 스레드입니다. 다른 스레드에서 작업을 실행해서는 안 됩니다. ExitIfEmpty가 설정된 경우 스레드가 종료될 수 있고, 새 작업이 예약될 때 새 스레드가 만들어집니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler._gate">
            <summary>작업 대기열 및 준비 목록을 포함하여 데이터 구조를 보호하는 게이트입니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler._evt">
            <summary>Semaphore는 예약 요청에서 또는 타이머가 만료되어 큐의 다음 항목으로 이동할 때 큐를 다시 평가하기 위한 요청을 계산합니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler._queue">
            <summary>작업 항목을 보류하는 큐입니다. 게이트에 의해 보호됩니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler._readyList">
            <summary>가능한 한 빨리 실행할 준비가 된 항목을 큐에 보관합니다. 게이트에 의해 보호됩니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler._nextItem">
            <summary>다음에 예약될 작업 항목입니다. 큐를 재평가할 때 다음 항목이 여전히 동일한지 여부를 확인하는 데 사용됩니다. 그렇지 않은 경우 새 타이머를 시작해야 합니다(아래 참조).</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler._nextTimer">
            <summary>항상 큐의 첫 번째 요소를 디스패치하는 타이머를 보유하는 일회용입니다.</summary>
        </member>
        <member name="F:System.Reactive.Concurrency.EventLoopScheduler._disposed">
            <summary>이벤트 루프를 종료할지 여부를 나타내는 플래그입니다. 설정되면 이벤트 루프 스레드를 깨우기 위해 이벤트 신호를 보내야 하며, 이로 인해 모든 작업이 중단됩니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.#ctor">
            <summary>지정된 스레드에서 각 작업 단위를 예약하는 개체를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.#ctor(System.Func{System.Threading.ThreadStart,System.Threading.Thread})">
            <summary>지정된 팩터리로 스레드 생성 옵션을 제어하여 지정된 스레드에서 작업 단위를 예약하는 개체를 만듭니다.</summary>
            <param name="threadFactory">스레드 생성을 위한 팩터리 함수입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="threadFactory"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
            <exception cref="T:System.ObjectDisposedException">스케줄러가 삭제되었으며 새 작업을 수락하지 않습니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>지정된 스레드에서 주기적인 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">첫 번째 반복시 작업에 전달된 초기 상태입니다.</param>
            <param name="period">주기적으로 작업을 실행하는 기간입니다.</param>
            <param name="action">실행할 작업으로, 잠재적으로 상태를 업데이트할 수 있습니다.</param>
            <returns>예약된 되풀이 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 사용).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
            <exception cref="T:System.ObjectDisposedException">스케줄러가 삭제되었으며 새 작업을 수락하지 않습니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.StartStopwatch">
            <summary>새 스톱워치 개체를 시작합니다.</summary>
            <returns>새 스톱워치 개체, 요청 시 시작됩니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.Dispose">
            <summary>이 스케줄러와 연결된 스레드를 종료합니다. 스케줄러 큐의 나머지 모든 작업이 중단됩니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.EnsureThread">
            <summary>이벤트 루프 스레드가 실행되고 있는지 확인합니다. 게이트 아래에 호출해야 합니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.EventLoopScheduler.Run">
            <summary>지정된 이벤트 루프 스레드에서 예약된 이벤트 루프입니다. 루프는 Schedule, 다음 항목 타이머 또는 Dispose에 대한 호출에 의해 설정되는 이벤트를 사용하여 일시 중단되거나 다시 시작됩니다.</summary>
        </member>
        <member name="P:System.Reactive.Concurrency.EventLoopScheduler.ExitIfEmpty">
            <summary>작업이 남아 있지 않은 경우 이벤트 루프 스레드를 종료할 수 있는지 여부를 나타냅니다. 이후에 새 작업이 예약되면 새 이벤트 루프 스레드가 만들어집니다. 이 속성은 재귀 호출에 대한 이벤트 루프를 사용하는 NewThreadScheduler에서 사용됩니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.NewThreadScheduler">
            <summary>별도의 스레드에서 각 작업 단위를 예약하는 개체를 나타냅니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.#ctor">
            <summary>별도의 스레드에서 각 작업 단위를 예약하는 개체를 만듭니다.</summary>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.#ctor(System.Func{System.Threading.ThreadStart,System.Threading.Thread})">
            <summary>별도의 스레드에서 각 작업 단위를 예약하는 개체를 만듭니다.</summary>
            <param name="threadFactory">스레드 생성을 위한 팩터리 함수입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="threadFactory"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.ScheduleLongRunning``1(``0,System.Action{``0,System.Reactive.Disposables.ICancelable})">
            <summary>새 스레드를 만들어 장기 실행 작업을 예약합니다. 취소는 폴링을 통해 수행됩니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>작업이 디스패치되고 다음 주기적인 기한에 맞춰 다시 깨어나면 절전 모드로 이동하는 새 스레드를 만들어 주기적인 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">첫 번째 반복시 작업에 전달된 초기 상태입니다.</param>
            <param name="period">주기적으로 작업을 실행하는 기간입니다.</param>
            <param name="action">실행할 작업으로, 잠재적으로 상태를 업데이트할 수 있습니다.</param>
            <returns>예약된 되풀이 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 사용).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.NewThreadScheduler.StartStopwatch">
            <summary>새 스톱워치 개체를 시작합니다.</summary>
            <returns>새 스톱워치 개체, 요청 시 시작됩니다.</returns>
        </member>
        <member name="P:System.Reactive.Concurrency.NewThreadScheduler.Default">
            <summary>기본 스레드 생성자를 사용하는 이 스케줄러의 인스턴스를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.EnlightenmentProvider">
            <summary>시스템 성능 및 런타임 효율성을 개선하기 위해 다른 Rx 라이브러리에서 사용하는 플랫폼 계몽에 대한 액세스를 제공합니다. Rx는 로드된 플랫폼 계몽 없이 실행할 수 있지만 애플리케이션과 함께 System.Reactive.PlatformServices 어셈블리를 배포하고 애플리케이션 시작 중에을(를) 호출하여 계몽이 제대로 로드되었는지 확인하는 것이 좋습니다.</summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.EnlightenmentProvider.EnsureLoaded">
            <summary>호출 어셈블리에 System.Reactive.PlatformServices 어셈블리에 대한 참조가 있는지 플랫폼 계몽으로 확인합니다. 사용자 코드에서 참조가 만들어지지 않으면 빌드 프로세스가 System.Reactive.PlatformServices의 배포를 삭제하여 런타임 검색을 방지할 수 있습니다.</summary>
            <returns>로드된 계몽 공급자가 현재 어셈블리에 정의된 공급자와 일치하는 경우 true, 그렇지 않으면 false입니다. 호스트에서 사용자 지정 계몽 공급자를 설치하면 false가 반환됩니다.</returns>
        </member>
        <member name="T:System.Reactive.Concurrency.TaskPoolScheduler">
            <summary>TPL(작업 병렬 라이브러리) 태스크 풀에서 작업 단위를 예약하는 개체를 나타냅니다.</summary>
            <seealso cref="P:System.Reactive.Concurrency.TaskPoolScheduler.Default">이러한 유형의 인스턴스는 기본 TaskScheduler를 사용하여 TPL 태스크 풀에서 작업을 예약합니다.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.TaskPoolScheduler.#ctor(System.Threading.Tasks.TaskFactory)">
            <summary>제공된 TaskFactory를 사용하여 작업 단위를 예약하는 개체를 만듭니다.</summary>
            <param name="taskFactory">작업 단위를 실행하는 태스크를 만드는 데 사용되는 태스크 팩터리입니다.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="taskFactory"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.TaskPoolScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.TaskPoolScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.TaskPoolScheduler.ScheduleLongRunning``1(``0,System.Action{``0,System.Reactive.Disposables.ICancelable})">
            <summary>TaskCreationOptions.LongRunning을 사용하는 새 태스크를 만들어 장기 실행 작업을 예약합니다. 취소는 폴링을 통해 수행됩니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.TaskPoolScheduler.StartStopwatch">
            <summary>새 스톱워치 개체를 가져옵니다.</summary>
            <returns>새 스톱워치 개체, 요청 시 시작됩니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.TaskPoolScheduler.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>주기적으로 작업을 생성하도록 플랫폼별 타이머를 실행하여 주기적으로 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">첫 번째 반복시 작업에 전달된 초기 상태입니다.</param>
            <param name="period">주기적으로 작업을 실행하는 기간입니다.</param>
            <param name="action">실행할 작업으로, 잠재적으로 상태를 업데이트할 수 있습니다.</param>
            <returns>예약된 되풀이 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 사용).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> TimeSpan.Zero보다 적습니다.</exception>
        </member>
        <member name="P:System.Reactive.Concurrency.TaskPoolScheduler.Default">
            <summary>기본 TaskScheduler를 사용하는 이 스케줄러의 인스턴스를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.Concurrency.ThreadPoolScheduler">
            <summary>CLR 스레드 풀에서 작업 단위를 예약하는 개체를 나타냅니다.</summary>
            <seealso cref="P:System.Reactive.Concurrency.ThreadPoolScheduler.Instance">이 정적 속성을 통해 노출된 이 형식의 Singleton 인스턴스입니다.</seealso>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
            <summary>System.Threading.Timer 개체를 사용하여 dueTime 이후에 실행될 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <param name="dueTime">작업을 실행할 상대 시간입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.ScheduleLongRunning``1(``0,System.Action{``0,System.Reactive.Disposables.ICancelable})">
            <summary>새 스레드를 만들어 장기 실행 작업을 예약합니다. 취소는 폴링을 통해 수행됩니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">실행될 작업에 전달된 상태입니다.</param>
            <param name="action">실행할 작업입니다.</param>
            <returns>예약된 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 노력을 기울임).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.StartStopwatch">
            <summary>새 스톱워치 개체를 시작합니다.</summary>
            <returns>새 스톱워치 개체, 요청 시 시작됩니다.</returns>
        </member>
        <member name="M:System.Reactive.Concurrency.ThreadPoolScheduler.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
            <summary>System.Threading.Timer 개체를 사용하여 주기적인 작업을 예약합니다.</summary>
            <typeparam name="TState">예약된 작업에 전달된 상태의 형식입니다.</typeparam>
            <param name="state">첫 번째 반복시 작업에 전달된 초기 상태입니다.</param>
            <param name="period">주기적으로 작업을 실행하는 기간입니다.</param>
            <param name="action">실행할 작업으로, 잠재적으로 상태를 업데이트할 수 있습니다.</param>
            <returns>예약된 되풀이 작업을 취소하는 데 사용되는 일회용 개체입니다(최선의 사용).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> null입니다.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="period"/> 0보다 적거나 같습니다.</exception>
        </member>
        <member name="P:System.Reactive.Concurrency.ThreadPoolScheduler.Instance">
            <summary>CLR 스레드 풀 스케줄러의 싱글톤 인스턴스를 가져옵니다.</summary>
        </member>
        <member name="T:System.Reactive.PlatformServices.CurrentPlatformEnlightenmentProvider">
            <summary>(인프라) 플랫폼별 프레임워크 이해를 위한 공급자입니다.</summary>
        </member>
        <member name="M:System.Reactive.PlatformServices.CurrentPlatformEnlightenmentProvider.GetService``1(System.Object[])">
            <summary>(인프라) 지정된 서비스를 얻으려고 시도합니다.</summary>
            <typeparam name="T">서비스 유형입니다.</typeparam>
            <param name="args">선택적 인수 집합입니다.</param>
            <returns>서비스 인스턴스 또는 찾을 수 없는 경우 null입니다.</returns>
        </member>
        <member name="T:System.Reactive.Strings_PlatformServices">
            <summary>국부화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_PlatformServices.ResourceManager">
            <summary>이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_PlatformServices.Culture">
            <summary>이 강력하게 형식이 지정된 리소스 클래스를 사용하는 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을 재정의합니다.</summary>
        </member>
        <member name="P:System.Reactive.Strings_PlatformServices.WINRT_NO_SUB1MS_TIMERS">
            <summary>WinRT 스레드 풀이 1밀리초 미만의 기간을 가진 주기적 타이머를 만드는 것을 지원하지 않는 것과 유사한 국부화된 문자열을 찾습니다.</summary>
        </member>
    </members>
</doc>