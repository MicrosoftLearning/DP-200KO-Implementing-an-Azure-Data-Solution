<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>GalaSoft.MvvmLight</name>
    </assembly>
    <members>
        <member name="T:GalaSoft.MvvmLight.Command.RelayCommand">
            <summary>대리자를 호출하여 해당 기능을 다른 개체에 중계하는 것이 유일한 목적인 명령입니다. CanExecute 메서드의 기본 반환 값은 &apos;true&apos;입니다. 이 클래스에서는 Execute 및 CanExecute 콜백 메서드에서 명령 매개 변수를 허용할 수 없습니다.</summary>
            <remarks>WPF4.5 이상의 클래스를 사용하는 경우 GalaSoft.MvvmLight.CommandWpf 네임스페이스(GalaSoft.MvvmLight.Command 대신)를 사용해야 합니다. 이렇게 하면 CanExecute 대리자를 기반으로 컨트롤의 자동 사용/비활성화를 처리하는 CommandManager 클래스를 활성화(또는 복원)합니다.</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand.#ctor(System.Action)">
            <summary>항상 실행할 수 있는 RelayCommand 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="execute">실행 논리입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
            <exception cref="T:System.ArgumentNullException">실행 인수가 null인 경우.</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>RelayCommand 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="execute">실행 논리입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
            <param name="canExecute">실행 상태 논리입니다.</param>
            <exception cref="T:System.ArgumentNullException">실행 인수가 null인 경우. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</exception>
        </member>
        <member name="E:GalaSoft.MvvmLight.Command.RelayCommand.CanExecuteChanged">
            <summary>명령 실행 여부에 영향을 주는 변경 사항이 발생할 때 발생합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand.RaiseCanExecuteChanged">
            <summary><see cref="E:GalaSoft.MvvmLight.Command.RelayCommand.CanExecuteChanged" />이벤트를 발생시킵니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand.CanExecute(System.Object)">
            <summary>명령을 현재 상태에서 실행할 수 있는지 여부를 결정하는 메서드를 정의합니다.</summary>
            <param name="parameter">이 매개 변수는 항상 무시됩니다.</param>
            <returns>이 명령을 실행할 수 있는 경우 true, 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand.Execute(System.Object)">
            <summary>명령을 호출할 때 호출할 메서드를 정의합니다.</summary>
            <param name="parameter">이 매개 변수는 항상 무시됩니다.</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Command.RelayCommand`1">
            <summary>대리자를 호출하여 해당 기능을 다른 개체에 중계하는 것이 유일한 목적인 일반 명령입니다. CanExecute 메서드의 기본 반환 값은 &apos;true&apos;입니다. 이 클래스를 사용하면 Execute 및 CanExecute 콜백 메서드에서 명령 매개 변수를 허용할 수 있습니다.</summary>
            <typeparam name="T">명령 매개 변수의 형식입니다.</typeparam>
            <remarks>WPF4.5 이상의 클래스를 사용하는 경우 GalaSoft.MvvmLight.CommandWpf 네임스페이스(GalaSoft.MvvmLight.Command 대신)를 사용해야 합니다. 이렇게 하면 CanExecute 대리자를 기반으로 컨트롤의 자동 사용/비활성화를 처리하는 CommandManager 클래스를 활성화(또는 복원)합니다.</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>항상 실행할 수 있는 RelayCommand 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="execute">실행 논리입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
            <exception cref="T:System.ArgumentNullException">실행 인수가 null인 경우.</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>RelayCommand 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="execute">실행 논리입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
            <param name="canExecute">실행 상태 논리입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
            <exception cref="T:System.ArgumentNullException">실행 인수가 null인 경우.</exception>
        </member>
        <member name="E:GalaSoft.MvvmLight.Command.RelayCommand`1.CanExecuteChanged">
            <summary>명령 실행 여부에 영향을 주는 변경 사항이 발생할 때 발생합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand`1.RaiseCanExecuteChanged">
            <summary><see cref="E:GalaSoft.MvvmLight.Command.RelayCommand`1.CanExecuteChanged" />이벤트를 발생시킵니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand`1.CanExecute(System.Object)">
            <summary>명령을 현재 상태에서 실행할 수 있는지 여부를 결정하는 메서드를 정의합니다.</summary>
            <param name="parameter">명령에서 사용하는 데이터입니다. 명령에 데이터를 전달할 필요가 없는 경우 이 개체를 null 참조로 설정할 수 있습니다.</param>
            <returns>이 명령을 실행할 수 있는 경우 true, 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Command.RelayCommand`1.Execute(System.Object)">
            <summary>명령을 호출할 때 호출할 메서드를 정의합니다.</summary>
            <param name="parameter">명령에서 사용하는 데이터입니다. 명령에 데이터를 전달할 필요가 없는 경우 이 개체를 null 참조로 설정할 수 있습니다.</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.DesignerLibrary">
            <summary>플랫폼 검색을 위한 도우미 클래스입니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.Empty">
            <summary>비동기 메서드가 필요하지만 컨텍스트가 동기일 때 사용되는 도우미 클래스입니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.Empty.Task">
            <summary>빈 작업을 가져옵니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.FeatureDetection">
            <summary>플랫폼 및 기능 검색을 위한 도우미 클래스입니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.IExecuteWithObject">
            <summary>이 인터페이스는 <see cref="T:GalaSoft.MvvmLight.Helpers.WeakAction`1" /> 클래스를 위한 것이며 여러 WeakAction{T} 인스턴스를 저장하지만 T 형식이 무엇을 나타내는지 미리 알 수 없는 경우에 유용할 수 있습니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.IExecuteWithObject.Target">
            <summary>WeakAction의 대상입니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.IExecuteWithObject.ExecuteWithObject(System.Object)">
            <summary>작업을 실행합니다.</summary>
            <param name="parameter">적절한 형식에 캐스팅할 매개 변수를 개체로 전달합니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.IExecuteWithObject.MarkForDeletion">
            <summary>모든 참조를 삭제하여 정리 메소드에 이 항목을 삭제해야 함을 알립니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.IExecuteWithObjectAndResult">
            <summary>이 인터페이스는 클래스를 위한 것이며 <see cref="T:GalaSoft.MvvmLight.Helpers.WeakFunc`1" />여러 WeakFunc{T} 인스턴스를 저장하지만 T 형식이 무엇을 나타내는지 미리 알 수 없는 경우에 유용할 수 있습니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.IExecuteWithObjectAndResult.ExecuteWithObject(System.Object)">
            <summary>함수를 실행하고 결과를 반환합니다.</summary>
            <param name="parameter">적절한 형식에 캐스팅할 매개 변수를 개체로 전달합니다.</param>
            <returns>작업의 결과입니다.</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.WeakAction">
            <summary>작업 소유자에게 하드 참조를 만들지 않고을(를) 저장합니다. 소유자는 언제든지 가비지 수집될 수 있습니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.Method">
            <summary>생성자에서 전달된 이 WeakAction 메서드에 해당하는을(를) 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.MethodName">
            <summary>이 WeakAction이 나타내는 메서드의 이름을 가져옵니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.ActionReference">
            <summary>이 WeakAction의 동작 대상에 대한 WeakReference를 가져오거나 설정합니다. 메서드가 익명인 경우 <see cref="P:GalaSoft.MvvmLight.Helpers.WeakAction.Reference" />와(과) 반드시 동일하지는 않습니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.Reference">
            <summary>WeakAction을 생성할 때 전달된 대상에 대한 WeakReference를 가져오거나 설정합니다. 메서드가 익명인 경우 <see cref="P:GalaSoft.MvvmLight.Helpers.WeakAction.ActionReference" />와(과) 반드시 동일하지는 않습니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.IsStatic">
            <summary>WeakAction이 정적인지 아닌지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction.#ctor">
            <summary><see cref="T:GalaSoft.MvvmLight.Helpers.WeakAction" /> 클래스의 빈 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction.#ctor(System.Action)">
            <summary><see cref="T:GalaSoft.MvvmLight.Helpers.WeakAction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="action">이 인스턴스와 관련 있는 작업입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction.#ctor(System.Object,System.Action)">
            <summary><see cref="T:GalaSoft.MvvmLight.Helpers.WeakAction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="target">작업의 소유자입니다.</param>
            <param name="action">이 인스턴스와 관련 있는 작업입니다.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.IsAlive">
            <summary>작업의 소유자가 아직 살아 있는지 또는 가비지 수집가에 의해 이미 수집되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.Target">
            <summary>작업의 소유자를 가져옵니다. 이 개체는 <see cref="T:System.WeakReference" />(으)로 저장됩니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction.ActionTarget">
            <summary>약한 참조의 대상입니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction.Execute">
            <summary>작업을 실행합니다. 이 작업은 작업의 소유자가 여전히 살아 있는 경우에만 발생합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction.MarkForDeletion">
            <summary>이 인스턴스가 저장하는 참조를 null로 설정합니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.WeakAction`1">
            <summary>작업 소유자에게 하드 참조를 만들지 않고 작업을 저장합니다. 소유자는 언제든지 가비지 수집될 수 있습니다.</summary>
            <typeparam name="T">작업 매개 변수의 형식입니다.</typeparam>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction`1.MethodName">
            <summary>이 WeakAction이 나타내는 메서드의 이름을 가져옵니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakAction`1.IsAlive">
            <summary>작업의 소유자가 아직 살아 있는지 또는 가비지 수집가에 의해 이미 수집되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.#ctor(System.Action{`0})">
            <summary>WeakAction 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="action">이 인스턴스와 관련 있는 작업입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.#ctor(System.Object,System.Action{`0})">
            <summary>WeakAction 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="target">작업의 소유자입니다.</param>
            <param name="action">이 인스턴스와 관련 있는 작업입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.Execute">
            <summary>작업을 실행합니다. 이 작업은 작업의 소유자가 여전히 살아 있는 경우에만 발생합니다. 작업의 매개 변수가 기본값(T)으로 설정됩니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.Execute(`0)">
            <summary>작업을 실행합니다. 이 작업은 작업의 소유자가 여전히 살아 있는 경우에만 발생합니다.</summary>
            <param name="parameter">작업에 전달할 매개 변수입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.ExecuteWithObject(System.Object)">
            <summary>개체 형식의 매개 변수로 작업을 실행합니다. 이 매개 변수는 T로 캐스팅됩니다. 이 메서드는을(를) 구현하고 여러 WeakAction{T} 인스턴스를 저장하지만 T 형식이 무엇을 나타내는지 미리 알 수 없는 경우에 유용할 수 있습니다.</summary>
            <param name="parameter">T로 캐스팅된 후 작업에 전달될 매개 변수입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakAction`1.MarkForDeletion">
            <summary>이 WeakAction에 포함된 모든 작업을 null로 설정합니다.이는 WeakAction을 삭제해야 하는 개체를 포함하기 위한 신호입니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.WeakFunc`1">
            <summary>함수 소유자에게 하드 참조를 생성하지 않고 Func&lt;/T&gt;를 저장합니다. 소유자는 언제든지 가비지 수집될 수 있습니다.</summary>
            <typeparam name="TResult">이 약한 참조에 의해 저장될 함수 결과의 형식입니다.</typeparam>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Method">
            <summary>생성자에서 전달된 이 WeakFunc 메서드에 해당하는을(를) 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.IsStatic">
            <summary>WeakFunc가 정적인지 아닌지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.MethodName">
            <summary>이 WeakFunc가 나타내는 메서드의 이름을 가져옵니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.FuncReference">
            <summary>이 WeakFunc의 동작 대상에 대한 WeakReference를 가져오거나 설정합니다. 메서드가 익명인 경우 <see cref="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Reference" />와(과) 반드시 동일하지는 않습니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Reference">
            <summary>WeakFunc를 생성할 때 통과된 대상에 대한 WeakReference를 가져오거나 설정합니다. 메서드가 익명인 경우 <see cref="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.FuncReference" />와(과) 반드시 동일하지는 않습니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`1.#ctor">
            <summary>WeakFunc 클래스의 빈 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`1.#ctor(System.Func{`0})">
            <summary>WeakFunc 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="func">이 인스턴스와 관련 있는 함수입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`1.#ctor(System.Object,System.Func{`0})">
            <summary>WeakFunc 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="target">함수 소유자입니다.</param>
            <param name="func">이 인스턴스와 관련 있는 함수입니다.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.IsAlive">
            <summary>함수의 소유자가 아직 살아 있는지 또는 가비지 수집가에 의해 이미 수집되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Target">
            <summary>함수 소유자를 가져옵니다. 이 개체는 <see cref="T:System.WeakReference" />(으)로 저장됩니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.FuncTarget">
            <summary>매개 변수로 전달된 함수의 소유자를 가져옵니다. 메서드가 익명인 경우 <see cref="P:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Target" />와(과) 반드시 동일하지는 않습니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`1.Execute">
            <summary>작업을 실행합니다. 이것은 함수 소유자가 여전히 살아있는 경우에만 발생합니다.</summary>
            <returns>함수의 결과는 참조로 저장됩니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`1.MarkForDeletion">
            <summary>이 인스턴스가 저장하는 참조를 null로 설정합니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Helpers.WeakFunc`2">
            <summary>함수 소유자에게 하드 참조를 생성하지 않고 함수를 저장합니다. 소유자는 언제든지 가비지 수집될 수 있습니다.</summary>
            <typeparam name="T">함수 매개 변수의 형식입니다.</typeparam>
            <typeparam name="TResult">함수 반환 값의 형식입니다.</typeparam>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`2.MethodName">
            <summary>이 WeakFunc가 나타내는 메서드의 이름을 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Helpers.WeakFunc`2.IsAlive">
            <summary>함수의 소유자가 아직 살아 있는지 또는 가비지 수집가에 의해 이미 수집되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.#ctor(System.Func{`0,`1})">
            <summary>WeakFunc 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="func">이 인스턴스와 관련 있는 함수입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.#ctor(System.Object,System.Func{`0,`1})">
            <summary>WeakFunc 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="target">함수 소유자입니다.</param>
            <param name="func">이 인스턴스와 관련 있는 함수입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.Execute">
            <summary>함수를 실행합니다. 이것은 함수 소유자가 여전히 살아있는 경우에만 발생합니다. 함수의 매개 변수가 기본값(T)으로 설정됩니다.</summary>
            <returns>함수의 결과는 참조로 저장됩니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.Execute(`0)">
            <summary>함수를 실행합니다. 이것은 함수 소유자가 여전히 살아있는 경우에만 발생합니다.</summary>
            <param name="parameter">작업에 전달할 매개 변수입니다.</param>
            <returns>함수의 결과는 참조로 저장됩니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.ExecuteWithObject(System.Object)">
            <summary>개체 형식의 매개 변수로 작업을 실행합니다. 이 매개 변수는 T로 캐스팅됩니다. 이 메서드는을(를) 구현하고 여러 WeakFunc{T} 인스턴스를 저장하지만 T 형식이 무엇을 나타내는지 미리 알 수 없는 경우에 유용할 수 있습니다.</summary>
            <param name="parameter">T로 캐스팅된 후 함수에 전달될 매개 변수입니다.</param>
            <returns>개체로 실행한 결과이며, T에 캐스팅 할 수 있습니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Helpers.WeakFunc`2.MarkForDeletion">
            <summary>이 WeakFunc에 포함된 모든 함수를 null로 설정합니다.이는 WeakFunc를 삭제해야 하는 개체를 포함하기 위한 신호입니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.ICleanup">
            <summary>정리해야 하는 클래스에 대한 공통 인터페이스를 정의하지만 IDisposable이 전제로 하는 영향은 없습니다. ICleanup을 구현하는 인스턴스가 삭제되거나 가비지 수집되지 않고 정리될 수 있습니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ICleanup.Cleanup">
            <summary>예를 들어 상태를 저장하고 리소스를 제거하는 등 인스턴스를 정리합니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.GenericMessage`1">
            <summary>일반 값(콘텐츠)을 수신자에게 전달합니다.</summary>
            <typeparam name="T">콘텐츠 속성의 형식입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.GenericMessage`1.#ctor(`0)">
            <summary>GenericMessage 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="content">메시지 내용입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.GenericMessage`1.#ctor(System.Object,`0)">
            <summary>GenericMessage 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="content">메시지 내용입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.GenericMessage`1.#ctor(System.Object,System.Object,`0)">
            <summary>GenericMessage 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="target">메시지의 의도된 대상입니다. 이 매개 변수는 메시지의 의도된 대상을 표시하는 데 사용할 수 있습니다. 물론 이것은 단지 표시일 뿐이고, AMD는 null일 수 있습니다.</param>
            <param name="content">메시지 내용입니다.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.GenericMessage`1.Content">
            <summary>메시지의 콘텐츠를 가져오거나 설정합니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.IMessenger">
            <summary>메신저는 개체가 메시지를 교환할 수 있는 클래스입니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Register``1(System.Object,System.Action{``0})">
            <summary>메시지 TMessage의 형식에 대한 수신자를 등록합니다. 해당 메시지를 보낼 때 작업 매개 변수가 실행됩니다. <para>받는 사람을 등록해도 이 수신자에 대한 하드 참조가 생성되지 않으므로 이 수신자가 삭제되면 메모리 누출이 발생하지 않습니다.</para></summary>
            <typeparam name="TMessage">수신자가 등록하는 메시지 형식입니다.</typeparam>
            <param name="recipient">메시지를 받게 될 수신자입니다.</param>
            <param name="action">TMessage 형식의 메시지가 전송될 때 실행되는 작업입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Register``1(System.Object,System.Object,System.Action{``0})">
            <summary>메시지 TMessage의 형식에 대한 수신자를 등록합니다. 해당 메시지를 보낼 때 작업 매개 변수가 실행됩니다. TMessage에서 파생된 메시지(또는 TMessage가 인터페이스인 경우 TMessage를 구현하는 메시지)도 수신할 수 있는 방법에 대한 자세한 내용은 receiveDerivedMessagesToo 매개 변수를 참조하십시오. <para>받는 사람을 등록해도 이 수신자에 대한 하드 참조가 생성되지 않으므로 이 수신자가 삭제되면 메모리 누출이 발생하지 않습니다.</para></summary>
            <typeparam name="TMessage">수신자가 등록하는 메시지 형식입니다.</typeparam>
            <param name="recipient">메시지를 받게 될 수신자입니다.</param>
            <param name="token">메시징 채널에 대한 토큰입니다. 받는 사람이 토큰을 사용하여 등록하고 보낸 사람이 동일한 토큰을 사용하여 메시지를 보내는 경우 이 메시지가 받는 사람에게 전달됩니다. 등록할 때 토큰을 사용하지 않았거나 다른 토큰을 사용한 다른 수신자에게는 메시지가 제공되지 않습니다. 마찬가지로 토큰 없이 또는 다른 토큰으로 전송된 메시지는 해당 수신자에게 전달되지 않습니다.</param>
            <param name="action">TMessage 형식의 메시지가 전송될 때 실행되는 작업입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Register``1(System.Object,System.Object,System.Boolean,System.Action{``0})">
            <summary>메시지 TMessage의 형식에 대한 수신자를 등록합니다. 해당 메시지를 보낼 때 작업 매개 변수가 실행됩니다. TMessage에서 파생된 메시지(또는 TMessage가 인터페이스인 경우 TMessage를 구현하는 메시지)도 수신할 수 있는 방법에 대한 자세한 내용은 receiveDerivedMessagesToo 매개 변수를 참조하십시오. <para>받는 사람을 등록해도 이 수신자에 대한 하드 참조가 생성되지 않으므로 이 수신자가 삭제되면 메모리 누출이 발생하지 않습니다.</para></summary>
            <typeparam name="TMessage">수신자가 등록하는 메시지 형식입니다.</typeparam>
            <param name="recipient">메시지를 받게 될 수신자입니다.</param>
            <param name="token">메시징 채널에 대한 토큰입니다. 받는 사람이 토큰을 사용하여 등록하고 보낸 사람이 동일한 토큰을 사용하여 메시지를 보내는 경우 이 메시지가 받는 사람에게 전달됩니다. 등록할 때 토큰을 사용하지 않았거나 다른 토큰을 사용한 다른 수신자에게는 메시지가 제공되지 않습니다. 마찬가지로 토큰 없이 또는 다른 토큰으로 전송된 메시지는 해당 수신자에게 전달되지 않습니다.</param>
            <param name="receiveDerivedMessagesToo">true이면 TMessage에서 파생된 메시지 형식도 받는 사람에게 전송됩니다. 예를 들어, SendOrderMessage 및 ExecuteOrderMessage가 OrderMessage에서 파생되는 경우, OrderMessage에 등록하고 receiveDerivedMessagesToo를 true로 설정하면 SendOrderMessage 및 ExecuteOrderMessage가 등록된 수신자에게 전송됩니다. <para>또한 TMessage가 인터페이스인 경우 TMessage를 구현하는 메시지 형식도 받는 사람에게 전송됩니다. 예를 들어, SendOrderMessage 및 ExecuteOrderMessage가 IOrderMessage를 구현할 경우, OrderMessage에 등록하고 receiveDerivedMessagesToo를 true로 설정하면 SendOrderMessage 및 ExecuteOrderMessage가 등록된 수신자에게 전송됩니다.</para></param>
            <param name="action">TMessage 형식의 메시지가 전송될 때 실행되는 작업입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Register``1(System.Object,System.Boolean,System.Action{``0})">
            <summary>메시지 TMessage의 형식에 대한 수신자를 등록합니다. 해당 메시지를 보낼 때 작업 매개 변수가 실행됩니다. TMessage에서 파생된 메시지(또는 TMessage가 인터페이스인 경우 TMessage를 구현하는 메시지)도 수신할 수 있는 방법에 대한 자세한 내용은 receiveDerivedMessagesToo 매개 변수를 참조하십시오. <para>받는 사람을 등록해도 이 수신자에 대한 하드 참조가 생성되지 않으므로 이 수신자가 삭제되면 메모리 누출이 발생하지 않습니다.</para></summary>
            <typeparam name="TMessage">수신자가 등록하는 메시지 형식입니다.</typeparam>
            <param name="recipient">메시지를 받게 될 수신자입니다.</param>
            <param name="receiveDerivedMessagesToo">true이면 TMessage에서 파생된 메시지 형식도 받는 사람에게 전송됩니다. 예를 들어, SendOrderMessage 및 ExecuteOrderMessage가 OrderMessage에서 파생되는 경우, OrderMessage에 등록하고 receiveDerivedMessagesToo를 true로 설정하면 SendOrderMessage 및 ExecuteOrderMessage가 등록된 수신자에게 전송됩니다. <para>또한 TMessage가 인터페이스인 경우 TMessage를 구현하는 메시지 형식도 받는 사람에게 전송됩니다. 예를 들어, SendOrderMessage 및 ExecuteOrderMessage가 IOrderMessage를 구현할 경우, OrderMessage에 등록하고 receiveDerivedMessagesToo를 true로 설정하면 SendOrderMessage 및 ExecuteOrderMessage가 수신자에게 전송됩니다.</para></param>
            <param name="action">TMessage 형식의 메시지가 전송될 때 실행되는 작업입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Send``1(``0)">
            <summary>등록된 수신자에게 메시지를 보냅니다. 메시지는 등록 메서드 중 하나를 사용하여 이 메시지 형식에 등록된 모든 받는 사람에게 전달됩니다.</summary>
            <typeparam name="TMessage">전송될 메시지의 형식입니다.</typeparam>
            <param name="message">등록된 수신자에게 보낼 메시지입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Send``2(``0)">
            <summary>등록된 수신자에게 메시지를 보냅니다. 메시지는 등록 메서드 중 하나를 사용하여 이 메시지 형식에 등록된 수신자에게만 도달하고 targetType에 해당합니다.</summary>
            <typeparam name="TMessage">전송될 메시지의 형식입니다.</typeparam>
            <typeparam name="TTarget">메시지를 받을 수신자 형식입니다. 메시지는 다른 형식의 수신자에게 전송되지 않습니다.</typeparam>
            <param name="message">등록된 수신자에게 보낼 메시지입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Send``1(``0,System.Object)">
            <summary>등록된 수신자에게 메시지를 보냅니다. 메시지는 등록 메서드 중 하나를 사용하여 이 메시지 형식에 등록된 수신자에게만 도달하고 targetType에 해당합니다.</summary>
            <typeparam name="TMessage">전송될 메시지의 형식입니다.</typeparam>
            <param name="message">등록된 수신자에게 보낼 메시지입니다.</param>
            <param name="token">메시징 채널에 대한 토큰입니다. 받는 사람이 토큰을 사용하여 등록하고 보낸 사람이 동일한 토큰을 사용하여 메시지를 보내는 경우 이 메시지가 받는 사람에게 전달됩니다. 등록할 때 토큰을 사용하지 않았거나 다른 토큰을 사용한 다른 수신자에게는 메시지가 제공되지 않습니다. 마찬가지로 토큰 없이 또는 다른 토큰으로 전송된 메시지는 해당 수신자에게 전달되지 않습니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Unregister(System.Object)">
            <summary>메시지 받는 사람을 완전히 등록 취소합니다. 이 메서드가 실행된 후 수신자는 더 이상 메시지를 받지 않습니다.</summary>
            <param name="recipient">등록 취소해야 하는 수신자입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Unregister``1(System.Object)">
            <summary>지정된 형식의 메시지에 대해서만 메시지 수신자를 등록 취소합니다. 이 메서드가 실행된 후 받는 사람은 더 이상 TMessage 형식의 메시지를 받지 않지만 이전에 등록된 경우 다른 메시지 형식을 계속 수신합니다.</summary>
            <typeparam name="TMessage">받는 사람이 등록을 취소할 메시지 형식입니다.</typeparam>
            <param name="recipient">등록 취소해야 하는 수신자입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Unregister``1(System.Object,System.Object)">
            <summary>지정된 형식의 메시지와 지정된 토큰에 대해서만 메시지 수신자를 등록 취소합니다. 이 메서드가 실행된 후 받는 사람은 지정된 토큰으로 더 이상 TMessage 형식의 메시지를 받지 않지만 이전에 등록된 경우 다른 토큰으로 다른 메시지 형식 또는 메시지를 계속 수신합니다.</summary>
            <param name="recipient">등록 취소해야 하는 수신자입니다.</param>
            <param name="token">받는 사람이 등록 취소되어야 하는 토큰입니다.</param>
            <typeparam name="TMessage">받는 사람이 등록을 취소할 메시지 형식입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Unregister``1(System.Object,System.Action{``0})">
            <summary>지정된 형식의 메시지와 지정된 작업에 대해 메시지 받는 사람을 등록 취소합니다. 이전에 등록된 경우 다른 메시지 형식은 여전히 받는 사람에게 전송됩니다. 메시지 형식 TMessage 및 지정된 수신자(해당하는 경우)에게 등록된 다른 작업도 계속해서 사용할 수 있습니다.</summary>
            <typeparam name="TMessage">받는 사람이 등록을 취소할 메시지 형식입니다.</typeparam>
            <param name="recipient">등록 취소해야 하는 수신자입니다.</param>
            <param name="action">받는 사람 및 메시지 형식 TMessage에 대해 등록 취소해야 하는 작업입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.IMessenger.Unregister``1(System.Object,System.Object,System.Action{``0})">
            <summary>지정된 메시지 형식, 지정된 작업 및 지정된 토큰에 대해 메시지 받는 사람을 등록 취소합니다. 이전에 등록된 경우 다른 메시지 형식은 여전히 받는 사람에게 전송됩니다. 메시지 형식 TMessage 및 지정된 수신자와 기타 토큰(해당하는 경우)에 대해 등록된 다른 작업도 계속해서 사용할 수 있습니다.</summary>
            <typeparam name="TMessage">받는 사람이 등록을 취소할 메시지 형식입니다.</typeparam>
            <param name="recipient">등록 취소해야 하는 수신자입니다.</param>
            <param name="token">받는 사람이 등록 취소되어야 하는 토큰입니다.</param>
            <param name="action">받는 사람 및 메시지 형식 TMessage에 대해 등록 취소해야 하는 작업입니다.</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.MessageBase">
            <summary>메신저가 브로드캐스트하는 모든 메시지의 기본 클래스입니다. 이 클래스를 확장하여 사용자 고유의 메시지 형식을 만들 수 있습니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.MessageBase.#ctor">
            <summary>MessageBase 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.MessageBase.#ctor(System.Object)">
            <summary>MessageBase 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지의 원래 발신자입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.MessageBase.#ctor(System.Object,System.Object)">
            <summary>MessageBase 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지의 원래 발신자입니다.</param>
            <param name="target">메시지의 의도된 대상입니다. 이 매개 변수는 메시지의 의도된 대상을 표시하는 데 사용할 수 있습니다. 물론 이것은 단지 표시일 뿐이고, AMD는 null일 수 있습니다.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.MessageBase.Sender">
            <summary>메시지의 발신자를 가져오거나 설정합니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.MessageBase.Target">
            <summary>메시지의 의도된 대상을 가져오거나 설정합니다. 이 속성은 메시지의 의도된 대상을 표시하는 데 사용할 수 있습니다. 물론 이것은 단지 표시일 뿐이고, AMD는 null일 수 있습니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.Messenger">
            <summary>메신저는 개체가 메시지를 교환할 수 있는 클래스입니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.Messenger.Default">
            <summary>Messenger의 기본 인스턴스를 사용하여 정적 방식으로 메시지를 등록하고 보낼 수 있습니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Register``1(System.Object,System.Action{``0})">
            <summary>메시지 TMessage의 형식에 대한 수신자를 등록합니다. 해당 메시지를 보낼 때 작업 매개 변수가 실행됩니다. <para>받는 사람을 등록해도 이 수신자에 대한 하드 참조가 생성되지 않으므로 이 수신자가 삭제되면 메모리 누출이 발생하지 않습니다.</para></summary>
            <typeparam name="TMessage">수신자가 등록하는 메시지 형식입니다.</typeparam>
            <param name="recipient">메시지를 받게 될 수신자입니다.</param>
            <param name="action">TMessage 형식의 메시지가 전송될 때 실행되는 작업입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Register``1(System.Object,System.Boolean,System.Action{``0})">
            <summary>메시지 TMessage의 형식에 대한 수신자를 등록합니다. 해당 메시지를 보낼 때 작업 매개 변수가 실행됩니다. TMessage에서 파생된 메시지(또는 TMessage가 인터페이스인 경우 TMessage를 구현하는 메시지)도 수신할 수 있는 방법에 대한 자세한 내용은 receiveDerivedMessagesToo 매개 변수를 참조하십시오. <para>받는 사람을 등록해도 이 수신자에 대한 하드 참조가 생성되지 않으므로 이 수신자가 삭제되면 메모리 누출이 발생하지 않습니다.</para></summary>
            <typeparam name="TMessage">수신자가 등록하는 메시지 형식입니다.</typeparam>
            <param name="recipient">메시지를 받게 될 수신자입니다.</param>
            <param name="receiveDerivedMessagesToo">true이면 TMessage에서 파생된 메시지 형식도 받는 사람에게 전송됩니다. 예를 들어, SendOrderMessage 및 ExecuteOrderMessage가 OrderMessage에서 파생되는 경우, OrderMessage에 등록하고 receiveDerivedMessagesToo를 true로 설정하면 SendOrderMessage 및 ExecuteOrderMessage가 등록된 수신자에게 전송됩니다. <para>또한 TMessage가 인터페이스인 경우 TMessage를 구현하는 메시지 형식도 받는 사람에게 전송됩니다. 예를 들어, SendOrderMessage 및 ExecuteOrderMessage가 IOrderMessage를 구현할 경우, OrderMessage에 등록하고 receiveDerivedMessagesToo를 true로 설정하면 SendOrderMessage 및 ExecuteOrderMessage가 등록된 수신자에게 전송됩니다.</para></param>
            <param name="action">TMessage 형식의 메시지가 전송될 때 실행되는 작업입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Register``1(System.Object,System.Object,System.Action{``0})">
            <summary>메시지 TMessage의 형식에 대한 수신자를 등록합니다. 해당 메시지를 보낼 때 작업 매개 변수가 실행됩니다. <para>받는 사람을 등록해도 이 수신자에 대한 하드 참조가 생성되지 않으므로 이 수신자가 삭제되면 메모리 누출이 발생하지 않습니다.</para></summary>
            <typeparam name="TMessage">수신자가 등록하는 메시지 형식입니다.</typeparam>
            <param name="recipient">메시지를 받게 될 수신자입니다.</param>
            <param name="token">메시징 채널에 대한 토큰입니다. 받는 사람이 토큰을 사용하여 등록하고 보낸 사람이 동일한 토큰을 사용하여 메시지를 보내는 경우 이 메시지가 받는 사람에게 전달됩니다. 등록할 때 토큰을 사용하지 않았거나 다른 토큰을 사용한 다른 수신자에게는 메시지가 제공되지 않습니다. 마찬가지로 토큰 없이 또는 다른 토큰으로 전송된 메시지는 해당 수신자에게 전달되지 않습니다.</param>
            <param name="action">TMessage 형식의 메시지가 전송될 때 실행되는 작업입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Register``1(System.Object,System.Object,System.Boolean,System.Action{``0})">
            <summary>메시지 TMessage의 형식에 대한 수신자를 등록합니다. 해당 메시지를 보낼 때 작업 매개 변수가 실행됩니다. TMessage에서 파생된 메시지(또는 TMessage가 인터페이스인 경우 TMessage를 구현하는 메시지)도 수신할 수 있는 방법에 대한 자세한 내용은 receiveDerivedMessagesToo 매개 변수를 참조하십시오. <para>받는 사람을 등록해도 이 수신자에 대한 하드 참조가 생성되지 않으므로 이 수신자가 삭제되면 메모리 누출이 발생하지 않습니다.</para></summary>
            <typeparam name="TMessage">수신자가 등록하는 메시지 형식입니다.</typeparam>
            <param name="recipient">메시지를 받게 될 수신자입니다.</param>
            <param name="token">메시징 채널에 대한 토큰입니다. 받는 사람이 토큰을 사용하여 등록하고 보낸 사람이 동일한 토큰을 사용하여 메시지를 보내는 경우 이 메시지가 받는 사람에게 전달됩니다. 등록할 때 토큰을 사용하지 않았거나 다른 토큰을 사용한 다른 수신자에게는 메시지가 제공되지 않습니다. 마찬가지로 토큰 없이 또는 다른 토큰으로 전송된 메시지는 해당 수신자에게 전달되지 않습니다.</param>
            <param name="receiveDerivedMessagesToo">true이면 TMessage에서 파생된 메시지 형식도 받는 사람에게 전송됩니다. 예를 들어, SendOrderMessage 및 ExecuteOrderMessage가 OrderMessage에서 파생되는 경우, OrderMessage에 등록하고 receiveDerivedMessagesToo를 true로 설정하면 SendOrderMessage 및 ExecuteOrderMessage가 등록된 수신자에게 전송됩니다. <para>또한 TMessage가 인터페이스인 경우 TMessage를 구현하는 메시지 형식도 받는 사람에게 전송됩니다. 예를 들어, SendOrderMessage 및 ExecuteOrderMessage가 IOrderMessage를 구현할 경우, OrderMessage에 등록하고 receiveDerivedMessagesToo를 true로 설정하면 SendOrderMessage 및 ExecuteOrderMessage가 등록된 수신자에게 전송됩니다.</para></param>
            <param name="action">TMessage 형식의 메시지가 전송될 때 실행되는 작업입니다. 중요 WeakActions(http://stackoverflow.com/questions/25730530/ 참조)를 사용하기 때문에 현재 클로저는 지원되지 않습니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Send``1(``0)">
            <summary>등록된 수신자에게 메시지를 보냅니다. 메시지는 등록 메서드 중 하나를 사용하여 이 메시지 형식에 등록된 모든 받는 사람에게 전달됩니다.</summary>
            <typeparam name="TMessage">전송될 메시지의 형식입니다.</typeparam>
            <param name="message">등록된 수신자에게 보낼 메시지입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Send``2(``0)">
            <summary>등록된 수신자에게 메시지를 보냅니다. 메시지는 등록 메서드 중 하나를 사용하여 이 메시지 형식에 등록된 수신자에게만 도달하고 targetType에 해당합니다.</summary>
            <typeparam name="TMessage">전송될 메시지의 형식입니다.</typeparam>
            <typeparam name="TTarget">메시지를 받을 수신자 형식입니다. 메시지는 다른 형식의 수신자에게 전송되지 않습니다.</typeparam>
            <param name="message">등록된 수신자에게 보낼 메시지입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Send``1(``0,System.Object)">
            <summary>등록된 수신자에게 메시지를 보냅니다. 메시지는 등록 메서드 중 하나를 사용하여 이 메시지 형식에 등록된 수신자에게만 도달하고 targetType에 해당합니다.</summary>
            <typeparam name="TMessage">전송될 메시지의 형식입니다.</typeparam>
            <param name="message">등록된 수신자에게 보낼 메시지입니다.</param>
            <param name="token">메시징 채널에 대한 토큰입니다. 받는 사람이 토큰을 사용하여 등록하고 보낸 사람이 동일한 토큰을 사용하여 메시지를 보내는 경우 이 메시지가 받는 사람에게 전달됩니다. 등록할 때 토큰을 사용하지 않았거나 다른 토큰을 사용한 다른 수신자에게는 메시지가 제공되지 않습니다. 마찬가지로 토큰 없이 또는 다른 토큰으로 전송된 메시지는 해당 수신자에게 전달되지 않습니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Unregister(System.Object)">
            <summary>메시지 받는 사람을 완전히 등록 취소합니다. 이 메서드가 실행된 후 수신자는 더 이상 메시지를 받지 않습니다.</summary>
            <param name="recipient">등록 취소해야 하는 수신자입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Unregister``1(System.Object)">
            <summary>지정된 형식의 메시지에 대해서만 메시지 수신자를 등록 취소합니다. 이 메서드가 실행된 후 받는 사람은 더 이상 TMessage 형식의 메시지를 받지 않지만 이전에 등록된 경우 다른 메시지 형식을 계속 수신합니다.</summary>
            <param name="recipient">등록 취소해야 하는 수신자입니다.</param>
            <typeparam name="TMessage">받는 사람이 등록을 취소할 메시지 형식입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Unregister``1(System.Object,System.Object)">
            <summary>지정된 형식의 메시지와 지정된 토큰에 대해서만 메시지 수신자를 등록 취소합니다. 이 메서드가 실행된 후 받는 사람은 지정된 토큰으로 더 이상 TMessage 형식의 메시지를 받지 않지만 이전에 등록된 경우 다른 토큰으로 다른 메시지 형식 또는 메시지를 계속 수신합니다.</summary>
            <param name="recipient">등록 취소해야 하는 수신자입니다.</param>
            <param name="token">받는 사람이 등록 취소되어야 하는 토큰입니다.</param>
            <typeparam name="TMessage">받는 사람이 등록을 취소할 메시지 형식입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Unregister``1(System.Object,System.Action{``0})">
            <summary>지정된 형식의 메시지와 지정된 작업에 대해 메시지 받는 사람을 등록 취소합니다. 이전에 등록된 경우 다른 메시지 형식은 여전히 받는 사람에게 전송됩니다. 메시지 형식 TMessage 및 지정된 수신자(해당하는 경우)에게 등록된 다른 작업도 계속해서 사용할 수 있습니다.</summary>
            <typeparam name="TMessage">받는 사람이 등록을 취소할 메시지 형식입니다.</typeparam>
            <param name="recipient">등록 취소해야 하는 수신자입니다.</param>
            <param name="action">받는 사람 및 메시지 형식 TMessage에 대해 등록 취소해야 하는 작업입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Unregister``1(System.Object,System.Object,System.Action{``0})">
            <summary>지정된 메시지 형식, 지정된 작업 및 지정된 토큰에 대해 메시지 받는 사람을 등록 취소합니다. 이전에 등록된 경우 다른 메시지 형식은 여전히 받는 사람에게 전송됩니다. 메시지 형식 TMessage 및 지정된 수신자와 기타 토큰(해당하는 경우)에 대해 등록된 다른 작업도 계속해서 사용할 수 있습니다.</summary>
            <typeparam name="TMessage">받는 사람이 등록을 취소할 메시지 형식입니다.</typeparam>
            <param name="recipient">등록 취소해야 하는 수신자입니다.</param>
            <param name="token">받는 사람이 등록 취소되어야 하는 토큰입니다.</param>
            <param name="action">받는 사람 및 메시지 형식 TMessage에 대해 등록 취소해야 하는 작업입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.OverrideDefault(GalaSoft.MvvmLight.Messaging.IMessenger)">
            <summary>Messenger.Default 인스턴스를 사용자 지정 인스턴스(예: 단위 테스트용)로 재정의하는 방법을 제공합니다.</summary>
            <param name="newMessenger">Messenger.Default로 사용되는 인스턴스입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Reset">
            <summary>Messenger의 기본(정적) 인스턴스를 null로 설정합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.ResetAll">
            <summary>정적 <see cref="M:GalaSoft.MvvmLight.Messaging.Messenger.Reset"/> 메서드에 대한 비정적 액세스를 제공합니다. Messenger의 기본(정적) 인스턴스를 null로 설정합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.RequestCleanup">
            <summary>수신자 목록을 검색하고 정리해야 하는 것을 Messenger에 알립니다. 수신자는 <see cref="T:System.WeakReference"/>(으)로 저장되므로 Messenger가 수신자를 목록에 유지하더라도 가비지 수집될 수 있습니다. 정리 작업 중에 모든 &quot;죽은&quot; 수신자가 목록에서 제거됩니다. 이 작업은 시간이 조금 걸릴 수 있으므로 애플리케이션이 유휴 상태일 때만 실행됩니다. 이러한 이유로 Messenger 클래스의 사용자는 <see cref="M:GalaSoft.MvvmLight.Messaging.Messenger.Cleanup" /> 메서드를 강제로 적용하는 대신을(를) 사용해야 합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.Messenger.Cleanup">
            <summary>수신자 목록을 스캔하여 &quot;죽은&quot; 인스턴스를 제거합니다. 수신자는 <see cref="T:System.WeakReference"/>(으)로 저장되므로 Messenger가 수신자를 목록에 유지하더라도 가비지 수집될 수 있습니다. 정리 작업 중에 모든 &quot;죽은&quot; 수신자가 목록에서 제거됩니다. 이 작업은 시간이 조금 걸릴 수 있으므로 애플리케이션이 유휴 상태일 때만 실행됩니다. 이러한 이유로 Messenger 클래스의 사용자는 <see cref="M:GalaSoft.MvvmLight.Messaging.Messenger.Cleanup" /> 메서드를 강제로 적용하는 대신을(를) 사용해야 합니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.NotificationMessage">
            <summary>수신자에게 문자열 메시지(알림)를 전달합니다. <para>일반적으로 알림은 정적 클래스의 고유한 문자열로 정의됩니다. 고유한 문자열을 정의하려면 Guid.NewGuid().ToString() 또는 기타 고유 식별자를 사용할 수 있습니다.</para></summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage.#ctor(System.String)">
            <summary>NotificationMessage 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="notification">받는 사람에게 전달될 임의의 메시지를 포함하는 문자열입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage.#ctor(System.Object,System.String)">
            <summary>NotificationMessage 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="notification">받는 사람에게 전달될 임의의 메시지를 포함하는 문자열입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage.#ctor(System.Object,System.Object,System.String)">
            <summary>NotificationMessage 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="target">메시지의 의도된 대상입니다. 이 매개 변수는 메시지의 의도된 대상을 표시하는 데 사용할 수 있습니다. 물론 이것은 단지 표시일 뿐이고, AMD는 null일 수 있습니다.</param>
            <param name="notification">받는 사람에게 전달될 임의의 메시지를 포함하는 문자열입니다.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.NotificationMessage.Notification">
            <summary>받는 사람에게 전달될 임의의 메시지를 포함하는 문자열을 가져옵니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction">
            <summary>기본 제공 콜백이 있는 메시지 클래스를 제공합니다. 수신자가 메시지 처리를 완료하면 콜백을 실행하여 발신자에게 메시지가 완료되었음을 알릴 수 있습니다. <see cref="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction.Execute" /> 메서드를 사용하여 콜백을 실행합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction.#ctor(System.String,System.Action)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="notification">메시지에 의해 수행될 임의의 문자열입니다.</param>
            <param name="callback">받는 사람이 메시지를 처리했다는 것을 보낸 사람에게 알리기 위해 실행할 수 있는 콜백 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction.#ctor(System.Object,System.String,System.Action)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="notification">메시지에 의해 수행될 임의의 문자열입니다.</param>
            <param name="callback">받는 사람이 메시지를 처리했다는 것을 보낸 사람에게 알리기 위해 실행할 수 있는 콜백 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction.#ctor(System.Object,System.Object,System.String,System.Action)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="target">메시지의 의도된 대상입니다. 이 매개 변수는 메시지의 의도된 대상을 표시하는 데 사용할 수 있습니다. 물론 이것은 단지 표시일 뿐이고, AMD는 null일 수 있습니다.</param>
            <param name="notification">메시지에 의해 수행될 임의의 문자열입니다.</param>
            <param name="callback">받는 사람이 메시지를 처리했다는 것을 보낸 사람에게 알리기 위해 실행할 수 있는 콜백 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction.Execute">
            <summary>메시지와 함께 제공된 콜백을 실행합니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1">
            <summary>기본 제공 콜백이 있는 메시지 클래스를 제공합니다. 수신자가 메시지 처리를 완료하면 콜백을 실행하여 발신자에게 메시지가 완료되었음을 알릴 수 있습니다. <see cref="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1.Execute(`0)" /> 메서드를 사용하여 콜백을 실행합니다. 콜백 메서드에는 하나의 매개 변수가 있습니다. <seealso cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction"/>.</summary>
            <typeparam name="TCallbackParameter">콜백 메서드 형식의 유일한 매개 변수입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1.#ctor(System.String,System.Action{`0})">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="notification">메시지에 의해 수행될 임의의 문자열입니다.</param>
            <param name="callback">받는 사람이 메시지를 처리했다는 것을 보낸 사람에게 알리기 위해 실행할 수 있는 콜백 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1.#ctor(System.Object,System.String,System.Action{`0})">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="notification">메시지에 의해 수행될 임의의 문자열입니다.</param>
            <param name="callback">받는 사람이 메시지를 처리했다는 것을 보낸 사람에게 알리기 위해 실행할 수 있는 콜백 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1.#ctor(System.Object,System.Object,System.String,System.Action{`0})">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="target">메시지의 의도된 대상입니다. 이 매개 변수는 메시지의 의도된 대상을 표시하는 데 사용할 수 있습니다. 물론 이것은 단지 표시일 뿐이고, AMD는 null일 수 있습니다.</param>
            <param name="notification">메시지에 의해 수행될 임의의 문자열입니다.</param>
            <param name="callback">받는 사람이 메시지를 처리했다는 것을 보낸 사람에게 알리기 위해 실행할 수 있는 콜백 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1.Execute(`0)">
            <summary>메시지와 함께 제공된 콜백을 실행합니다.</summary>
            <param name="parameter">메시지 보낸 사람이 요청하고 받는 사람의 상태에 대한 추가 정보를 제공하는 매개 변수입니다.</param>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.NotificationMessage`1">
            <summary>문자열 메시지(알림)와 일반 값(콘텐츠)을 받는 사람에게 전달합니다.</summary>
            <typeparam name="T">콘텐츠 속성의 형식입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage`1.#ctor(`0,System.String)">
            <summary>NotificationMessage 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="content">받는 사람에게 전달될 값입니다.</param>
            <param name="notification">받는 사람에게 전달될 임의의 메시지를 포함하는 문자열입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage`1.#ctor(System.Object,`0,System.String)">
            <summary>NotificationMessage 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="content">받는 사람에게 전달될 값입니다.</param>
            <param name="notification">받는 사람에게 전달될 임의의 메시지를 포함하는 문자열입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessage`1.#ctor(System.Object,System.Object,`0,System.String)">
            <summary>NotificationMessage 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="target">메시지의 의도된 대상입니다. 이 매개 변수는 메시지의 의도된 대상을 표시하는 데 사용할 수 있습니다. 물론 이것은 단지 표시일 뿐이고, AMD는 null일 수 있습니다.</param>
            <param name="content">받는 사람에게 전달될 값입니다.</param>
            <param name="notification">받는 사람에게 전달될 임의의 메시지를 포함하는 문자열입니다.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.NotificationMessage`1.Notification">
            <summary>받는 사람에게 전달될 임의의 메시지를 포함하는 문자열을 가져옵니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback">
            <summary>기본 제공 콜백이 있는 메시지 클래스를 제공합니다. 수신자가 메시지 처리를 완료하면 콜백을 실행하여 발신자에게 메시지가 완료되었음을 알릴 수 있습니다. <see cref="M:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback.Execute(System.Object[])" /> 메서드를 사용하여 콜백을 실행합니다. 콜백 메서드에는 하나의 매개 변수가 있습니다. <seealso cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction"/> 그리고 <seealso cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageAction`1"/>.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback.#ctor(System.String,System.Delegate)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="notification">메시지에 의해 수행될 임의의 문자열입니다.</param>
            <param name="callback">받는 사람이 메시지를 처리했다는 것을 보낸 사람에게 알리기 위해 실행할 수 있는 콜백 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback.#ctor(System.Object,System.String,System.Delegate)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="notification">메시지에 의해 수행될 임의의 문자열입니다.</param>
            <param name="callback">받는 사람이 메시지를 처리했다는 것을 보낸 사람에게 알리기 위해 실행할 수 있는 콜백 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback.#ctor(System.Object,System.Object,System.String,System.Delegate)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="target">메시지의 의도된 대상입니다. 이 매개 변수는 메시지의 의도된 대상을 표시하는 데 사용할 수 있습니다. 물론 이것은 단지 표시일 뿐이고, AMD는 null일 수 있습니다.</param>
            <param name="notification">메시지에 의해 수행될 임의의 문자열입니다.</param>
            <param name="callback">받는 사람이 메시지를 처리했다는 것을 보낸 사람에게 알리기 위해 실행할 수 있는 콜백 메서드입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.NotificationMessageWithCallback.Execute(System.Object[])">
            <summary>메시지와 함께 제공된 콜백을 임의의 수의 매개 변수와 함께 실행합니다.</summary>
            <param name="arguments">콜백 메서드에 전달될 여러 매개 변수입니다.</param>
            <returns>콜백 메서드에서 반환된 개체입니다.</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1">
            <summary>문자열 속성 이름(PropertyName)과 일반 값(<see cref="P:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.OldValue" /> 및 <see cref="P:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.NewValue" />)을 받는 사람에게 전달합니다.  이 메시지 형식은 PropertyChanged 이벤트를 메신저 시스템을 사용하여 받는 사람에게 전파하는 데 사용할 수 있습니다.</summary>
            <typeparam name="T">OldValue 및 NewValue 속성의 형식입니다.</typeparam>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.#ctor(System.Object,`0,`0,System.String)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="oldValue">변경 사항이 발생하기 전의 속성 값입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <param name="propertyName">변경된 속성의 이름입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.#ctor(`0,`0,System.String)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="oldValue">변경 사항이 발생하기 전의 속성 값입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <param name="propertyName">변경된 속성의 이름입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.#ctor(System.Object,System.Object,`0,`0,System.String)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="target">메시지의 의도된 대상입니다. 이 매개 변수는 메시지의 의도된 대상을 표시하는 데 사용할 수 있습니다. 물론 이것은 단지 표시일 뿐이고, AMD는 null일 수 있습니다.</param>
            <param name="oldValue">변경 사항이 발생하기 전의 속성 값입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <param name="propertyName">변경된 속성의 이름입니다.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.NewValue">
            <summary>변경 후 속성이 가진 값을 가져옵니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1.OldValue">
            <summary>변경 전 속성이 가지고 있던 값을 가져옵니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessage`1" /> 클래스에 대한 기본 클래스입니다. 이 클래스를 사용하면 수신자가 T 형식을 지정하지 않고도 모든 PropertyChangedMessages에 등록할 수 있습니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase.#ctor(System.Object,System.String)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="propertyName">변경된 속성의 이름입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase.#ctor(System.Object,System.Object,System.String)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="sender">메시지를 보낸 사람입니다.</param>
            <param name="target">메시지의 의도된 대상입니다. 이 매개 변수는 메시지의 의도된 대상을 표시하는 데 사용할 수 있습니다. 물론 이것은 단지 표시일 뿐이고, AMD는 null일 수 있습니다.</param>
            <param name="propertyName">변경된 속성의 이름입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase.#ctor(System.String)">
            <summary><see cref="T:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="propertyName">변경된 속성의 이름입니다.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.Messaging.PropertyChangedMessageBase.PropertyName">
            <summary>속성의 이름을 가져오거나 설정합니다.</summary>
        </member>
        <member name="T:GalaSoft.MvvmLight.ObservableObject">
            <summary>속성을 관찰할 수 있어야 하는 개체에 대한 기본 클래스입니다.</summary>
        </member>
        <member name="E:GalaSoft.MvvmLight.ObservableObject.PropertyChanged">
            <summary>속성 값이 변경된 후에 발생합니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.ObservableObject.PropertyChangedHandler">
            <summary>PropertyChanged 이벤트 처리기에 대한 액세스를 파생된 클래스에 제공합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.VerifyPropertyName(System.String)">
            <summary>속성 이름이 이 ViewModel에 있는지 확인합니다. 이 메서드는 예를 들어 RaisePropertyChanged를 호출하기 전과 같이, 속성을 사용하기 전에 호출할 수 있습니다. 속성 이름이 변경되었지만 일부 위치가 누락된 경우 오류를 방지할 수 있습니다.</summary>
            <remarks>이 메서드는 DEBUG 모드에서만 활성화됩니다.</remarks>
            <param name="propertyName">검사할 속성의 이름입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.RaisePropertyChanged(System.String)">
            <summary>필요한 경우 PropertyChanged 이벤트를 발생시킵니다.</summary>
            <remarks>propertyName 매개 변수가 현재 클래스의 기존 속성과 일치하지 않으면 DEBUG 구성에서만 예외가 발생합니다.</remarks>
            <param name="propertyName">(선택 사항) 변경된 속성의 이름입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>필요한 경우 PropertyChanged 이벤트를 발생시킵니다.</summary>
            <typeparam name="T">변경된 속성의 형식입니다.</typeparam>
            <param name="propertyExpression">변경된 속성을 식별하는 식입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>식에서 속성의 이름을 추출합니다.</summary>
            <typeparam name="T">속성의 형식입니다.</typeparam>
            <param name="propertyExpression">속성 이름을 반환하는 식입니다.</param>
            <returns>식에서 반환되는 속성의 이름입니다.</returns>
            <exception cref="T:System.ArgumentNullException">식이 null인 경우.</exception>
            <exception cref="T:System.ArgumentException">식이 속성을 나타내지 않는 경우.</exception>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.Set``1(System.Linq.Expressions.Expression{System.Func{``0}},``0@,``0)">
            <summary>속성에 새 값을 할당합니다. 그런 다음 필요 시 PropertyChanged 이벤트를 발생시킵니다.</summary>
            <typeparam name="T">변경된 속성의 형식입니다.</typeparam>
            <param name="propertyExpression">변경된 속성을 식별하는 식입니다.</param>
            <param name="field">속성 값을 저장하는 필드입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <returns>PropertyChanged 이벤트가 발생한 경우 true이며 그렇지 않은 경우 false입니다. 이전 값이 새 값과 같으면 이벤트가 발생하지 않습니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.Set``1(System.String,``0@,``0)">
            <summary>속성에 새 값을 할당합니다. 그런 다음 필요 시 PropertyChanged 이벤트를 발생시킵니다.</summary>
            <typeparam name="T">변경된 속성의 형식입니다.</typeparam>
            <param name="propertyName">변경된 속성의 이름입니다.</param>
            <param name="field">속성 값을 저장하는 필드입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <returns>PropertyChanged 이벤트가 발생한 경우 true이며 그렇지 않은 경우 false입니다. 이전 값이 새 값과 같으면 이벤트가 발생하지 않습니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.ObservableObject.Set``1(``0@,``0,System.String)">
            <summary>속성에 새 값을 할당합니다. 그런 다음 필요 시 PropertyChanged 이벤트를 발생시킵니다.</summary>
            <typeparam name="T">변경된 속성의 형식입니다.</typeparam>
            <param name="field">속성 값을 저장하는 필드입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <param name="propertyName">(선택 사항) 변경된 속성의 이름입니다.</param>
            <returns>PropertyChanged 이벤트가 발생한 경우 true이며 그렇지 않은 경우 false입니다. 이전 값이 새 값과 같으면 이벤트가 발생하지 않습니다.</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.ViewModelBase">
            <summary>MVVM 패턴의 ViewModel 클래스에 대한 기본 클래스입니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.#ctor">
            <summary>ViewModelBase 클래스의 새 인스턴스를 초기화합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.#ctor(GalaSoft.MvvmLight.Messaging.IMessenger)">
            <summary>ViewModelBase 클래스의 새 인스턴스를 초기화합니다.</summary>
            <param name="messenger">메시지를 다른 개체로 브로드캐스트하는 데 사용되는 <see cref="T:GalaSoft.MvvmLight.Messaging.Messenger" /> 인스턴스입니다. null이면 이 클래스는 Messenger의 기본 인스턴스를 사용하여 브로드캐스트를 시도합니다.</param>
        </member>
        <member name="P:GalaSoft.MvvmLight.ViewModelBase.IsInDesignMode">
            <summary>컨트롤이 디자인 모드(Blend 또는 Visual Studio에서 실행)에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.ViewModelBase.IsInDesignModeStatic">
            <summary>컨트롤이 디자인 모드(Blend 또는 Visual Studio에서 실행)에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.ViewModelBase.MessengerInstance">
            <summary>메시지를 다른 개체로 브로드캐스트하는 데 사용되는 <see cref="T:GalaSoft.MvvmLight.Messaging.IMessenger" /> 인스턴스를 가져오거나 설정합니다. null이면 이 클래스는 Messenger의 기본 인스턴스를 사용하여 브로드캐스트를 시도합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.Cleanup">
            <summary>Messenger 클래스에서 이 인스턴스를 등록 취소합니다. <para>추가 리소스를 정리하려면 이 메서드를 재정의한 다음 정리한 다음 base.Cleanup()을 호출합니다.</para></summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.Broadcast``1(``0,``0,System.String)">
            <summary>PropertyChangedMessage를 이 클래스로 전달된 메신저의 인스턴스(사용 가능한 경우) 또는 Messenger의 기본 인스턴스를 사용하여 브로드캐스트합니다.</summary>
            <typeparam name="T">변경된 속성의 형식입니다.</typeparam>
            <param name="oldValue">변경 전 속성 값입니다.</param>
            <param name="newValue">변경 후 속성 값입니다.</param>
            <param name="propertyName">변경된 속성의 이름입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.RaisePropertyChanged``1(System.String,``0,``0,System.Boolean)">
            <summary>필요한 경우 PropertyChanged 이벤트를 발생시키고 Messenger 인스턴스(또는 Messenger 인스턴스를 사용할 수 없는 경우 정적 기본 인스턴스)를 사용하여 PropertyChangedMessage를 브로드캐스트합니다.</summary>
            <typeparam name="T">변경된 속성의 형식입니다.</typeparam>
            <param name="propertyName">변경된 속성의 이름입니다.</param>
            <param name="oldValue">변경 사항이 발생하기 전의 속성 값입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <param name="broadcast">true이면 PropertyChangedMessage가 브로드캐스트됩니다. false이면 이벤트만 발생합니다.</param>
            <remarks>propertyName 매개 변수가 현재 클래스의 기존 속성과 일치하지 않으면 DEBUG 구성에서만 예외가 발생합니다.</remarks>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}},``0,``0,System.Boolean)">
            <summary>필요한 경우 PropertyChanged 이벤트를 발생시키고 Messenger 인스턴스(또는 Messenger 인스턴스를 사용할 수 없는 경우 정적 기본 인스턴스)를 사용하여 PropertyChangedMessage를 브로드캐스트합니다.</summary>
            <typeparam name="T">변경된 속성의 형식입니다.</typeparam>
            <param name="propertyExpression">변경된 속성을 식별하는 식입니다.</param>
            <param name="oldValue">변경 사항이 발생하기 전의 속성 값입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <param name="broadcast">true이면 PropertyChangedMessage가 브로드캐스트됩니다. false이면 이벤트만 발생합니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.Set``1(System.Linq.Expressions.Expression{System.Func{``0}},``0@,``0,System.Boolean)">
            <summary>속성에 새 값을 할당합니다. 그런 다음 필요한 경우 PropertyChanged 이벤트를 발생시키고 Messenger 인스턴스(또는 Messenger 인스턴스를 사용할 수 없는 경우 정적 기본 인스턴스)를 사용하여 PropertyChangedMessage를 브로드캐스트합니다.</summary>
            <typeparam name="T">변경된 속성의 형식입니다.</typeparam>
            <param name="propertyExpression">변경된 속성을 식별하는 식입니다.</param>
            <param name="field">속성 값을 저장하는 필드입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <param name="broadcast">true이면 PropertyChangedMessage가 브로드캐스트됩니다. false이면 이벤트만 발생합니다.</param>
            <returns>PropertyChanged 이벤트가 발생한 경우 True이며 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.Set``1(System.String,``0@,``0,System.Boolean)">
            <summary>속성에 새 값을 할당합니다. 그런 다음 필요한 경우 PropertyChanged 이벤트를 발생시키고 Messenger 인스턴스(또는 Messenger 인스턴스를 사용할 수 없는 경우 정적 기본 인스턴스)를 사용하여 PropertyChangedMessage를 브로드캐스트합니다.</summary>
            <typeparam name="T">변경된 속성의 형식입니다.</typeparam>
            <param name="propertyName">변경된 속성의 이름입니다.</param>
            <param name="field">속성 값을 저장하는 필드입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <param name="broadcast">true이면 PropertyChangedMessage가 브로드캐스트됩니다. false이면 이벤트만 발생합니다.</param>
            <returns>PropertyChanged 이벤트가 발생한 경우 True이며 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.ViewModelBase.Set``1(``0@,``0,System.Boolean,System.String)">
            <summary>속성에 새 값을 할당합니다. 그런 다음 필요한 경우 PropertyChanged 이벤트를 발생시키고 Messenger 인스턴스(또는 Messenger 인스턴스를 사용할 수 없는 경우 정적 기본 인스턴스)를 사용하여 PropertyChangedMessage를 브로드캐스트합니다.</summary>
            <typeparam name="T">변경된 속성의 형식입니다.</typeparam>
            <param name="field">속성 값을 저장하는 필드입니다.</param>
            <param name="newValue">변경 사항이 발생한 후의 속성 값입니다.</param>
            <param name="broadcast">true이면 PropertyChangedMessage가 브로드캐스트됩니다. false이면 이벤트만 발생합니다.</param>
            <param name="propertyName">(선택 사항) 변경된 속성의 이름입니다.</param>
            <returns>PropertyChanged 이벤트가 발생한 경우 True이며 그렇지 않을 경우 false입니다.</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Views.IDialogService">
            <summary>대화 상자를 Windows, Windows Phone, Android, iOS 등과 같은 다양한 프레임워크에 표시하는 방법을 정의하는 인터페이스입니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowError(System.String,System.String,System.String,System.Action)">
            <summary>오류에 대한 정보를 표시합니다.</summary>
            <param name="message">사용자에게 표시할 메시지입니다.</param>
            <param name="title">대화 상자의 제목입니다. null일 수 있습니다.</param>
            <param name="buttonText">대화 상자의 유일한 버튼에 표시되는 텍스트입니다. null을 남겨두면 &quot;확인&quot; 텍스트가 사용됩니다.</param>
            <param name="afterHideCallback">사용자가 대화 상자를 닫은 후 실행해야 하는 콜백입니다.</param>
            <returns>이 비동기 메서드를 기다릴 수 있는 작업입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowError(System.Exception,System.String,System.String,System.Action)">
            <summary>오류에 대한 정보를 표시합니다.</summary>
            <param name="error">사용자에게 메시지를 표시해야 하는 예외입니다.</param>
            <param name="title">대화 상자의 제목입니다. null일 수 있습니다.</param>
            <param name="buttonText">대화 상자의 유일한 버튼에 표시되는 텍스트입니다. null을 남겨두면 &quot;확인&quot; 텍스트가 사용됩니다.</param>
            <param name="afterHideCallback">사용자가 대화 상자를 닫은 후 실행해야 하는 콜백입니다.</param>
            <returns>이 비동기 메서드를 기다릴 수 있는 작업입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowMessage(System.String,System.String)">
            <summary>사용자에게 정보를 표시합니다. 대화 상자에는 &quot;확인&quot;이라는 텍스트가 있는 버튼이 단 하나만 있습니다.</summary>
            <param name="message">사용자에게 표시할 메시지입니다.</param>
            <param name="title">대화 상자의 제목입니다. null일 수 있습니다.</param>
            <returns>이 비동기 메서드를 기다릴 수 있는 작업입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowMessage(System.String,System.String,System.String,System.Action)">
            <summary>사용자에게 정보를 표시합니다. 대화 상자에는 버튼이 하나만 있습니다.</summary>
            <param name="message">사용자에게 표시할 메시지입니다.</param>
            <param name="title">대화 상자의 제목입니다. null일 수 있습니다.</param>
            <param name="buttonText">대화 상자의 유일한 버튼에 표시되는 텍스트입니다. null을 남겨두면 &quot;확인&quot; 텍스트가 사용됩니다.</param>
            <param name="afterHideCallback">사용자가 대화 상자를 닫은 후 실행해야 하는 콜백입니다.</param>
            <returns>이 비동기 메서드를 기다릴 수 있는 작업입니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowMessage(System.String,System.String,System.String,System.String,System.Action{System.Boolean})">
            <summary>사용자에게 정보를 표시합니다. 대화 상자에는 버튼이 하나만 있습니다.</summary>
            <param name="message">사용자에게 표시할 메시지입니다.</param>
            <param name="title">대화 상자의 제목입니다. null일 수 있습니다.</param>
            <param name="buttonConfirmText">대화 상자의 “확인” 버튼에 표시되는 텍스트입니다. null을 남겨두면 &quot;확인&quot; 텍스트가 사용됩니다.</param>
            <param name="buttonCancelText">대화 상자의 “취소” 버튼에 표시되는 텍스트입니다. null을 남겨두면 &quot;취소&quot; 텍스트가 사용됩니다.</param>
            <param name="afterHideCallback">사용자가 대화 상자를 닫은 후 실행해야 하는 콜백입니다. 콜백 메서드는 &quot;확인&quot; 단추(true) 또는 &quot;취소&quot; 단추(false)를 사용자가 눌렀는지 여부를 나타내는 부울 매개 변수를 가져옵니다.</param>
            <returns>이 비동기 메서드를 기다릴 수 있는 작업입니다. 작업은 대화 상자 결과에 따라 true 또는 false를 반환합니다.</returns>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.IDialogService.ShowMessageBox(System.String,System.String)">
            <summary>간단한 대화 상자로 사용자에게 정보를 표시합니다. 대화 상자에는 &quot;확인&quot;이라는 텍스트가 있는 버튼이 단 하나만 있습니다. 이 메서드는 디버깅을 위해 사용해야 합니다.</summary>
            <param name="message">사용자에게 표시할 메시지입니다.</param>
            <param name="title">대화 상자의 제목입니다. null일 수 있습니다.</param>
            <returns>이 비동기 메서드를 기다릴 수 있는 작업입니다.</returns>
        </member>
        <member name="T:GalaSoft.MvvmLight.Views.INavigationService">
            <summary>Windows, Windows Phone, Android, iOS 등과 같은 다양한 프레임워크에서 페이지 간 탐색을 수행하는 방법을 정의하는 인터페이스입니다.</summary>
        </member>
        <member name="P:GalaSoft.MvvmLight.Views.INavigationService.CurrentPageKey">
            <summary>현재 표시된 페이지에 해당하는 키입니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.INavigationService.GoBack">
            <summary>가능하면 탐색 서비스에 현재 페이지를 삭제하고 탐색 스택에 이전 페이지를 표시하도록 지시합니다.</summary>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.INavigationService.NavigateTo(System.String)">
            <summary>내비게이션 서비스에 지정된 키에 해당하는 새 페이지를 표시하도록 지시합니다. 플랫폼에 따라 탐색 서비스를 키/페이지 목록으로 구성해야 할 수 있습니다.</summary>
            <param name="pageKey">표시해야 하는 페이지에 해당하는 키입니다.</param>
        </member>
        <member name="M:GalaSoft.MvvmLight.Views.INavigationService.NavigateTo(System.String,System.Object)">
            <summary>내비게이션 서비스에 지정된 키에 해당하는 새 페이지를 표시하도록 지시하고 매개 변수를 새 페이지에 전달합니다. 플랫폼에 따라 탐색 서비스를 키/페이지 목록으로 구성해야 할 수 있습니다.</summary>
            <param name="pageKey">표시해야 하는 페이지에 해당하는 키입니다.</param>
            <param name="parameter">새 페이지로 전달해야 하는 매개 변수입니다.</param>
        </member>
    </members>
</doc>